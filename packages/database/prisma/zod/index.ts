import { z } from 'zod';
import { Prisma } from '../generated/client';
import Decimal from 'decimal.js';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;

// DECIMAL
//------------------------------------------------------

export const DecimalJsLikeSchema: z.ZodType<Prisma.DecimalJsLike> = z.object({
  d: z.array(z.number()),
  e: z.number(),
  s: z.number(),
  toFixed: z.function(z.tuple([]), z.string()),
})

export const DECIMAL_STRING_REGEX = /^(?:-?Infinity|NaN|-?(?:0[bB][01]+(?:\.[01]+)?(?:[pP][-+]?\d+)?|0[oO][0-7]+(?:\.[0-7]+)?(?:[pP][-+]?\d+)?|0[xX][\da-fA-F]+(?:\.[\da-fA-F]+)?(?:[pP][-+]?\d+)?|(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?))$/;

export const isValidDecimalInput =
  (v?: null | string | number | Prisma.DecimalJsLike): v is string | number | Prisma.DecimalJsLike => {
    if (v === undefined || v === null) return false;
    return (
      (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
      (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
      typeof v === 'number'
    )
  };

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','emailVerified','image','createdAt','updatedAt','username','role','banned','banReason','banExpires','onboardingComplete','paymentsCustomerId','locale','twoFactorEnabled']);

export const SessionScalarFieldEnumSchema = z.enum(['id','expiresAt','ipAddress','userAgent','userId','impersonatedBy','activeOrganizationId','token','createdAt','updatedAt']);

export const AccountScalarFieldEnumSchema = z.enum(['id','accountId','providerId','userId','accessToken','refreshToken','idToken','expiresAt','password','accessTokenExpiresAt','refreshTokenExpiresAt','scope','createdAt','updatedAt']);

export const VerificationScalarFieldEnumSchema = z.enum(['id','identifier','value','expiresAt','createdAt','updatedAt']);

export const PasskeyScalarFieldEnumSchema = z.enum(['id','name','publicKey','userId','credentialID','counter','deviceType','backedUp','transports','createdAt']);

export const TwoFactorScalarFieldEnumSchema = z.enum(['id','secret','backupCodes','userId']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','slug','logo','createdAt','metadata','paymentsCustomerId']);

export const MemberScalarFieldEnumSchema = z.enum(['id','organizationId','userId','role','createdAt']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','organizationId','email','role','status','expiresAt','inviterId']);

export const PurchaseScalarFieldEnumSchema = z.enum(['id','organizationId','userId','type','customerId','subscriptionId','productId','status','createdAt','updatedAt']);

export const AiChatScalarFieldEnumSchema = z.enum(['id','organizationId','userId','title','messages','createdAt','updatedAt']);

export const ProjectScalarFieldEnumSchema = z.enum(['id','organizationId','jobName','jobNumber','description','status','client','location','startDate','targetDate','createdAt','updatedAt','createdBy']);

export const DrawingScalarFieldEnumSchema = z.enum(['id','projectId','number','title','revision','parentId','filePath','fileUrl','createdAt','updatedAt']);

export const MilestoneTemplateScalarFieldEnumSchema = z.enum(['id','projectId','name','description','milestones','isDefault','usageCount','createdAt','updatedAt']);

export const ComponentScalarFieldEnumSchema = z.enum(['id','projectId','drawingId','milestoneTemplateId','componentId','weldId','instanceNumber','totalInstancesOnDrawing','displayId','type','workflowType','spec','size','material','pressureRating','description','area','system','testPackage','testPressure','testRequired','totalLength','lengthUnit','totalQuantity','quantityUnit','notes','completionPercent','status','createdAt','updatedAt','installationDate','installerUserId']);

export const ComponentMilestoneScalarFieldEnumSchema = z.enum(['id','componentId','milestoneName','milestoneOrder','weight','isCompleted','percentageValue','quantityValue','quantityUnit','completedAt','completedBy','effectiveDate','createdAt','updatedAt']);

export const ImportJobScalarFieldEnumSchema = z.enum(['id','projectId','userId','filename','originalPath','status','totalRows','processedRows','errorRows','errors','startedAt','completedAt','duration','createdAt','updatedAt']);

export const AuditLogScalarFieldEnumSchema = z.enum(['id','projectId','userId','componentId','entityType','entityId','action','changes','ipAddress','userAgent','sessionId','timestamp']);

export const ReportingCacheScalarFieldEnumSchema = z.enum(['id','projectId','reportType','cacheKey','filters','result','calculatedAt','expiresAt','calculationDuration','rowCount','createdBy']);

export const ROCConfigurationsScalarFieldEnumSchema = z.enum(['id','organizationId','projectId','componentType','milestoneWeights','description','isDefault','effectiveDate','createdAt','updatedAt','createdBy']);

export const ProgressSnapshotsScalarFieldEnumSchema = z.enum(['id','projectId','snapshotDate','snapshotTime','totalComponents','completedComponents','overallCompletionPercent','rocWeightedPercent','areaBreakdown','systemBreakdown','testPackageBreakdown','dailyVelocity','weeklyVelocity','milestoneVelocity','stalledComponents7d','stalledComponents14d','stalledComponents21d','calculationDuration','generatedBy','generationMethod','rocConfigId']);

export const ReportGenerationsScalarFieldEnumSchema = z.enum(['id','projectId','reportType','requestedBy','requestedAt','filters','outputFormat','deliveryMethod','status','startedAt','completedAt','duration','resultRowCount','resultSize','downloadUrl','downloadExpires','errorMessage','errorDetails','cacheHit','dbQueryTime','exportTime','memoryUsage']);

export const WeldTypeScalarFieldEnumSchema = z.enum(['id','code','description','active','createdAt']);

export const WelderScalarFieldEnumSchema = z.enum(['id','projectId','stencil','name','active','createdAt','updatedAt']);

export const FieldWeldScalarFieldEnumSchema = z.enum(['id','projectId','weldIdNumber','welderId','dateWelded','drawingId','packageNumber','testPressure','specCode','tieInNumber','xrayPercent','weldSize','schedule','weldTypeCode','baseMetal','pwhtRequired','datePwht','ndeTypes','ndeResult','ndeDate','turnoverDate','comments','createdAt','updatedAt']);

export const EarlyAccessLeadScalarFieldEnumSchema = z.enum(['id','name','email','company','projectSize','currentMethod','role','phone','message','source','utmSource','utmMedium','utmCampaign','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const PurchaseTypeSchema = z.enum(['SUBSCRIPTION','ONE_TIME']);

export type PurchaseTypeType = `${z.infer<typeof PurchaseTypeSchema>}`

export const ProjectStatusSchema = z.enum(['ACTIVE','COMPLETED','ARCHIVED']);

export type ProjectStatusType = `${z.infer<typeof ProjectStatusSchema>}`

export const WorkflowTypeSchema = z.enum(['MILESTONE_DISCRETE','MILESTONE_PERCENTAGE','MILESTONE_QUANTITY']);

export type WorkflowTypeType = `${z.infer<typeof WorkflowTypeSchema>}`

export const ComponentStatusSchema = z.enum(['NOT_STARTED','IN_PROGRESS','COMPLETED','ON_HOLD','DELETED']);

export type ComponentStatusType = `${z.infer<typeof ComponentStatusSchema>}`

export const ComponentTypeSchema = z.enum(['SPOOL','PIPING_FOOTAGE','THREADED_PIPE','FITTING','VALVE','FLANGE','GASKET','SUPPORT','FIELD_WELD','INSTRUMENT','INSULATION','PAINT','OTHER']);

export type ComponentTypeType = `${z.infer<typeof ComponentTypeSchema>}`

export const ImportStatusSchema = z.enum(['PENDING','PROCESSING','COMPLETED','FAILED','CANCELLED']);

export type ImportStatusType = `${z.infer<typeof ImportStatusSchema>}`

export const AuditActionSchema = z.enum(['CREATE','UPDATE','DELETE','HARD_DELETE','SOFT_DELETE','IMPORT','BULK_MILESTONE_UPDATE','CONFLICT_RESOLVED']);

export type AuditActionType = `${z.infer<typeof AuditActionSchema>}`

export const ReportTypeSchema = z.enum(['PROGRESS_SUMMARY','COMPONENT_DETAILS','TEST_READINESS','TREND_ANALYSIS','AUDIT_TRAIL']);

export type ReportTypeType = `${z.infer<typeof ReportTypeSchema>}`

export const ReportStatusSchema = z.enum(['PENDING','PROCESSING','COMPLETED','FAILED']);

export type ReportStatusType = `${z.infer<typeof ReportStatusSchema>}`

export const OutputFormatSchema = z.enum(['JSON','CSV','EXCEL','PDF']);

export type OutputFormatType = `${z.infer<typeof OutputFormatSchema>}`

export const DeliveryMethodSchema = z.enum(['DOWNLOAD','EMAIL','API']);

export type DeliveryMethodType = `${z.infer<typeof DeliveryMethodSchema>}`

export const GenerationMethodSchema = z.enum(['MANUAL','SCHEDULED','REALTIME']);

export type GenerationMethodType = `${z.infer<typeof GenerationMethodSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().nullable(),
  role: z.string().nullable(),
  banned: z.boolean().nullable(),
  banReason: z.string().nullable(),
  banExpires: z.coerce.date().nullable(),
  onboardingComplete: z.boolean(),
  paymentsCustomerId: z.string().nullable(),
  locale: z.string().nullable(),
  twoFactorEnabled: z.boolean().nullable(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().nullable(),
  activeOrganizationId: z.string().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  idToken: z.string().nullable(),
  expiresAt: z.coerce.date().nullable(),
  password: z.string().nullable(),
  accessTokenExpiresAt: z.coerce.date().nullable(),
  refreshTokenExpiresAt: z.coerce.date().nullable(),
  scope: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// VERIFICATION SCHEMA
/////////////////////////////////////////

export const VerificationSchema = z.object({
  id: z.string().cuid(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type Verification = z.infer<typeof VerificationSchema>

/////////////////////////////////////////
// PASSKEY SCHEMA
/////////////////////////////////////////

export const PasskeySchema = z.object({
  id: z.string().cuid(),
  name: z.string().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
})

export type Passkey = z.infer<typeof PasskeySchema>

/////////////////////////////////////////
// TWO FACTOR SCHEMA
/////////////////////////////////////////

export const TwoFactorSchema = z.object({
  id: z.string().cuid(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string(),
})

export type TwoFactor = z.infer<typeof TwoFactorSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  slug: z.string().nullable(),
  logo: z.string().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().nullable(),
  paymentsCustomerId: z.string().nullable(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// MEMBER SCHEMA
/////////////////////////////////////////

export const MemberSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
})

export type Member = z.infer<typeof MemberSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// PURCHASE SCHEMA
/////////////////////////////////////////

export const PurchaseSchema = z.object({
  type: PurchaseTypeSchema,
  id: z.string().cuid(),
  organizationId: z.string().nullable(),
  userId: z.string().nullable(),
  customerId: z.string(),
  subscriptionId: z.string().nullable(),
  productId: z.string(),
  status: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Purchase = z.infer<typeof PurchaseSchema>

/////////////////////////////////////////
// AI CHAT SCHEMA
/////////////////////////////////////////

export const AiChatSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string().nullable(),
  userId: z.string().nullable(),
  title: z.string().nullable(),
  /**
   * [Array<{role: "user" | "assistant"; content: string;}>]
   */
  messages: z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AiChat = z.infer<typeof AiChatSchema>

/////////////////////////////////////////
// PROJECT SCHEMA
/////////////////////////////////////////

export const ProjectSchema = z.object({
  status: ProjectStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().nullable(),
  client: z.string().nullable(),
  location: z.string().nullable(),
  startDate: z.coerce.date().nullable(),
  targetDate: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdBy: z.string(),
})

export type Project = z.infer<typeof ProjectSchema>

/////////////////////////////////////////
// DRAWING SCHEMA
/////////////////////////////////////////

export const DrawingSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().nullable(),
  parentId: z.string().nullable(),
  filePath: z.string().nullable(),
  fileUrl: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Drawing = z.infer<typeof DrawingSchema>

/////////////////////////////////////////
// MILESTONE TEMPLATE SCHEMA
/////////////////////////////////////////

export const MilestoneTemplateSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  /**
   * [Array<{name: string, weight: number, order: number}>]
   */
  milestones: z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })),
  isDefault: z.boolean(),
  usageCount: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type MilestoneTemplate = z.infer<typeof MilestoneTemplateSchema>

/////////////////////////////////////////
// COMPONENT SCHEMA
/////////////////////////////////////////

export const ComponentSchema = z.object({
  type: ComponentTypeSchema,
  workflowType: WorkflowTypeSchema,
  status: ComponentStatusSchema,
  id: z.string().cuid(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().nullable(),
  instanceNumber: z.number().int(),
  totalInstancesOnDrawing: z.number().int().nullable(),
  displayId: z.string().nullable(),
  spec: z.string().nullable(),
  size: z.string().nullable(),
  material: z.string().nullable(),
  pressureRating: z.string().nullable(),
  description: z.string().nullable(),
  area: z.string().nullable(),
  system: z.string().nullable(),
  testPackage: z.string().nullable(),
  testPressure: z.number().nullable(),
  testRequired: z.string().nullable(),
  totalLength: z.number().nullable(),
  lengthUnit: z.string().nullable(),
  totalQuantity: z.number().nullable(),
  quantityUnit: z.string().nullable(),
  notes: z.string().nullable(),
  completionPercent: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  installationDate: z.coerce.date().nullable(),
  installerUserId: z.string().nullable(),
})

export type Component = z.infer<typeof ComponentSchema>

/////////////////////////////////////////
// COMPONENT MILESTONE SCHEMA
/////////////////////////////////////////

export const ComponentMilestoneSchema = z.object({
  id: z.string().cuid(),
  componentId: z.string(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean(),
  percentageValue: z.number().nullable(),
  quantityValue: z.number().nullable(),
  quantityUnit: z.string().nullable(),
  completedAt: z.coerce.date().nullable(),
  completedBy: z.string().nullable(),
  effectiveDate: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ComponentMilestone = z.infer<typeof ComponentMilestoneSchema>

/////////////////////////////////////////
// IMPORT JOB SCHEMA
/////////////////////////////////////////

export const ImportJobSchema = z.object({
  status: ImportStatusSchema,
  id: z.string().cuid(),
  projectId: z.string(),
  userId: z.string(),
  filename: z.string(),
  originalPath: z.string().nullable(),
  totalRows: z.number().int().nullable(),
  processedRows: z.number().int().nullable(),
  errorRows: z.number().int().nullable(),
  /**
   * [Array<{row: number, field: string, error: string, value: any}>]
   */
  errors: z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })).nullable(),
  startedAt: z.coerce.date().nullable(),
  completedAt: z.coerce.date().nullable(),
  duration: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ImportJob = z.infer<typeof ImportJobSchema>

/////////////////////////////////////////
// AUDIT LOG SCHEMA
/////////////////////////////////////////

export const AuditLogSchema = z.object({
  action: AuditActionSchema,
  id: z.string().cuid(),
  projectId: z.string(),
  userId: z.string(),
  componentId: z.string().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  /**
   * {[field: string]: {old: any, new: any}}
   */
  changes: z.record(z.object({ old: z.any(), new: z.any() })),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  sessionId: z.string().nullable(),
  timestamp: z.coerce.date(),
})

export type AuditLog = z.infer<typeof AuditLogSchema>

/////////////////////////////////////////
// REPORTING CACHE SCHEMA
/////////////////////////////////////////

export const ReportingCacheSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.record(z.any()),
  result: z.any(),
  calculatedAt: z.coerce.date(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().nullable(),
  rowCount: z.number().int().nullable(),
  createdBy: z.string().nullable(),
})

export type ReportingCache = z.infer<typeof ReportingCacheSchema>

/////////////////////////////////////////
// ROC CONFIGURATIONS SCHEMA
/////////////////////////////////////////

export const ROCConfigurationsSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  projectId: z.string().nullable(),
  componentType: z.string().nullable(),
  milestoneWeights: z.record(z.number()),
  description: z.string().nullable(),
  isDefault: z.boolean(),
  effectiveDate: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdBy: z.string(),
})

export type ROCConfigurations = z.infer<typeof ROCConfigurationsSchema>

/////////////////////////////////////////
// PROGRESS SNAPSHOTS SCHEMA
/////////////////////////////////////////

export const ProgressSnapshotsSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date(),
  totalComponents: z.number().int(),
  completedComponents: z.number().int(),
  overallCompletionPercent: z.instanceof(Prisma.Decimal, { message: "Field 'overallCompletionPercent' must be a Decimal. Location: ['Models', 'ProgressSnapshots']"}),
  rocWeightedPercent: z.instanceof(Prisma.Decimal, { message: "Field 'rocWeightedPercent' must be a Decimal. Location: ['Models', 'ProgressSnapshots']"}),
  areaBreakdown: z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })),
  systemBreakdown: z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })),
  testPackageBreakdown: z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })),
  dailyVelocity: z.instanceof(Prisma.Decimal, { message: "Field 'dailyVelocity' must be a Decimal. Location: ['Models', 'ProgressSnapshots']"}).nullable(),
  weeklyVelocity: z.instanceof(Prisma.Decimal, { message: "Field 'weeklyVelocity' must be a Decimal. Location: ['Models', 'ProgressSnapshots']"}).nullable(),
  milestoneVelocity: z.record(z.number()),
  stalledComponents7d: z.number().int(),
  stalledComponents14d: z.number().int(),
  stalledComponents21d: z.number().int(),
  calculationDuration: z.number().int().nullable(),
  generatedBy: z.string().nullable(),
  generationMethod: z.string(),
  rocConfigId: z.string().nullable(),
})

export type ProgressSnapshots = z.infer<typeof ProgressSnapshotsSchema>

/////////////////////////////////////////
// REPORT GENERATIONS SCHEMA
/////////////////////////////////////////

export const ReportGenerationsSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  reportType: z.string(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date(),
  filters: z.record(z.any()),
  outputFormat: z.string(),
  deliveryMethod: z.string(),
  status: z.string(),
  startedAt: z.coerce.date().nullable(),
  completedAt: z.coerce.date().nullable(),
  duration: z.number().int().nullable(),
  resultRowCount: z.number().int().nullable(),
  resultSize: z.bigint().nullable(),
  downloadUrl: z.string().nullable(),
  downloadExpires: z.coerce.date().nullable(),
  errorMessage: z.string().nullable(),
  errorDetails: z.any().nullable(),
  cacheHit: z.boolean(),
  dbQueryTime: z.number().int().nullable(),
  exportTime: z.number().int().nullable(),
  memoryUsage: z.bigint().nullable(),
})

export type ReportGenerations = z.infer<typeof ReportGenerationsSchema>

/////////////////////////////////////////
// WELD TYPE SCHEMA
/////////////////////////////////////////

export const WeldTypeSchema = z.object({
  id: z.string().cuid(),
  code: z.string(),
  description: z.string(),
  active: z.boolean(),
  createdAt: z.coerce.date(),
})

export type WeldType = z.infer<typeof WeldTypeSchema>

/////////////////////////////////////////
// WELDER SCHEMA
/////////////////////////////////////////

export const WelderSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Welder = z.infer<typeof WelderSchema>

/////////////////////////////////////////
// FIELD WELD SCHEMA
/////////////////////////////////////////

export const FieldWeldSchema = z.object({
  id: z.string().cuid(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().nullable(),
  dateWelded: z.coerce.date().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: JsonValueSchema,
  specCode: z.string(),
  tieInNumber: z.string().nullable(),
  xrayPercent: z.number().int().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().nullable(),
  pwhtRequired: z.boolean(),
  datePwht: z.coerce.date().nullable(),
  ndeTypes: z.string().array(),
  ndeResult: z.string().nullable(),
  ndeDate: z.coerce.date().nullable(),
  turnoverDate: z.coerce.date().nullable(),
  comments: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FieldWeld = z.infer<typeof FieldWeldSchema>

/////////////////////////////////////////
// EARLY ACCESS LEAD SCHEMA
/////////////////////////////////////////

export const EarlyAccessLeadSchema = z.object({
  id: z.string().uuid(),
  name: z.string(),
  email: z.string(),
  company: z.string(),
  projectSize: z.string(),
  currentMethod: z.string(),
  role: z.string(),
  phone: z.string().nullable(),
  message: z.string().nullable(),
  source: z.string(),
  utmSource: z.string().nullable(),
  utmMedium: z.string().nullable(),
  utmCampaign: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EarlyAccessLead = z.infer<typeof EarlyAccessLeadSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  passkeys: z.union([z.boolean(),z.lazy(() => PasskeyFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  createdProjects: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  installedComponents: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  completedMilestones: z.union([z.boolean(),z.lazy(() => ComponentMilestoneFindManyArgsSchema)]).optional(),
  importJobs: z.union([z.boolean(),z.lazy(() => ImportJobFindManyArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  reportingCacheCreated: z.union([z.boolean(),z.lazy(() => ReportingCacheFindManyArgsSchema)]).optional(),
  rocConfigsCreated: z.union([z.boolean(),z.lazy(() => ROCConfigurationsFindManyArgsSchema)]).optional(),
  snapshotsGenerated: z.union([z.boolean(),z.lazy(() => ProgressSnapshotsFindManyArgsSchema)]).optional(),
  reportGenerationsRequested: z.union([z.boolean(),z.lazy(() => ReportGenerationsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  sessions: z.boolean().optional(),
  accounts: z.boolean().optional(),
  passkeys: z.boolean().optional(),
  invitations: z.boolean().optional(),
  purchases: z.boolean().optional(),
  members: z.boolean().optional(),
  twofactors: z.boolean().optional(),
  aiChats: z.boolean().optional(),
  createdProjects: z.boolean().optional(),
  installedComponents: z.boolean().optional(),
  completedMilestones: z.boolean().optional(),
  importJobs: z.boolean().optional(),
  auditLogs: z.boolean().optional(),
  reportingCacheCreated: z.boolean().optional(),
  rocConfigsCreated: z.boolean().optional(),
  snapshotsGenerated: z.boolean().optional(),
  reportGenerationsRequested: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  username: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  locale: z.boolean().optional(),
  twoFactorEnabled: z.boolean().optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  passkeys: z.union([z.boolean(),z.lazy(() => PasskeyFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  createdProjects: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  installedComponents: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  completedMilestones: z.union([z.boolean(),z.lazy(() => ComponentMilestoneFindManyArgsSchema)]).optional(),
  importJobs: z.union([z.boolean(),z.lazy(() => ImportJobFindManyArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  reportingCacheCreated: z.union([z.boolean(),z.lazy(() => ReportingCacheFindManyArgsSchema)]).optional(),
  rocConfigsCreated: z.union([z.boolean(),z.lazy(() => ROCConfigurationsFindManyArgsSchema)]).optional(),
  snapshotsGenerated: z.union([z.boolean(),z.lazy(() => ProgressSnapshotsFindManyArgsSchema)]).optional(),
  reportGenerationsRequested: z.union([z.boolean(),z.lazy(() => ReportGenerationsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  impersonatedBy: z.boolean().optional(),
  activeOrganizationId: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  password: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION
//------------------------------------------------------

export const VerificationSelectSchema: z.ZodType<Prisma.VerificationSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// PASSKEY
//------------------------------------------------------

export const PasskeyIncludeSchema: z.ZodType<Prisma.PasskeyInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PasskeyArgsSchema: z.ZodType<Prisma.PasskeyDefaultArgs> = z.object({
  select: z.lazy(() => PasskeySelectSchema).optional(),
  include: z.lazy(() => PasskeyIncludeSchema).optional(),
}).strict();

export const PasskeySelectSchema: z.ZodType<Prisma.PasskeySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  publicKey: z.boolean().optional(),
  userId: z.boolean().optional(),
  credentialID: z.boolean().optional(),
  counter: z.boolean().optional(),
  deviceType: z.boolean().optional(),
  backedUp: z.boolean().optional(),
  transports: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TWO FACTOR
//------------------------------------------------------

export const TwoFactorIncludeSchema: z.ZodType<Prisma.TwoFactorInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TwoFactorArgsSchema: z.ZodType<Prisma.TwoFactorDefaultArgs> = z.object({
  select: z.lazy(() => TwoFactorSelectSchema).optional(),
  include: z.lazy(() => TwoFactorIncludeSchema).optional(),
}).strict();

export const TwoFactorSelectSchema: z.ZodType<Prisma.TwoFactorSelect> = z.object({
  id: z.boolean().optional(),
  secret: z.boolean().optional(),
  backupCodes: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  rocConfigurations: z.union([z.boolean(),z.lazy(() => ROCConfigurationsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  members: z.boolean().optional(),
  invitations: z.boolean().optional(),
  purchases: z.boolean().optional(),
  aiChats: z.boolean().optional(),
  projects: z.boolean().optional(),
  rocConfigurations: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  logo: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  rocConfigurations: z.union([z.boolean(),z.lazy(() => ROCConfigurationsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MEMBER
//------------------------------------------------------

export const MemberIncludeSchema: z.ZodType<Prisma.MemberInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const MemberArgsSchema: z.ZodType<Prisma.MemberDefaultArgs> = z.object({
  select: z.lazy(() => MemberSelectSchema).optional(),
  include: z.lazy(() => MemberIncludeSchema).optional(),
}).strict();

export const MemberSelectSchema: z.ZodType<Prisma.MemberSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PURCHASE
//------------------------------------------------------

export const PurchaseIncludeSchema: z.ZodType<Prisma.PurchaseInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PurchaseArgsSchema: z.ZodType<Prisma.PurchaseDefaultArgs> = z.object({
  select: z.lazy(() => PurchaseSelectSchema).optional(),
  include: z.lazy(() => PurchaseIncludeSchema).optional(),
}).strict();

export const PurchaseSelectSchema: z.ZodType<Prisma.PurchaseSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  customerId: z.boolean().optional(),
  subscriptionId: z.boolean().optional(),
  productId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// AI CHAT
//------------------------------------------------------

export const AiChatIncludeSchema: z.ZodType<Prisma.AiChatInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AiChatArgsSchema: z.ZodType<Prisma.AiChatDefaultArgs> = z.object({
  select: z.lazy(() => AiChatSelectSchema).optional(),
  include: z.lazy(() => AiChatIncludeSchema).optional(),
}).strict();

export const AiChatSelectSchema: z.ZodType<Prisma.AiChatSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  title: z.boolean().optional(),
  messages: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PROJECT
//------------------------------------------------------

export const ProjectIncludeSchema: z.ZodType<Prisma.ProjectInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  drawings: z.union([z.boolean(),z.lazy(() => DrawingFindManyArgsSchema)]).optional(),
  components: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  milestoneTemplates: z.union([z.boolean(),z.lazy(() => MilestoneTemplateFindManyArgsSchema)]).optional(),
  importJobs: z.union([z.boolean(),z.lazy(() => ImportJobFindManyArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  reportingCache: z.union([z.boolean(),z.lazy(() => ReportingCacheFindManyArgsSchema)]).optional(),
  rocConfigurations: z.union([z.boolean(),z.lazy(() => ROCConfigurationsFindManyArgsSchema)]).optional(),
  progressSnapshots: z.union([z.boolean(),z.lazy(() => ProgressSnapshotsFindManyArgsSchema)]).optional(),
  reportGenerations: z.union([z.boolean(),z.lazy(() => ReportGenerationsFindManyArgsSchema)]).optional(),
  welders: z.union([z.boolean(),z.lazy(() => WelderFindManyArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProjectArgsSchema: z.ZodType<Prisma.ProjectDefaultArgs> = z.object({
  select: z.lazy(() => ProjectSelectSchema).optional(),
  include: z.lazy(() => ProjectIncludeSchema).optional(),
}).strict();

export const ProjectCountOutputTypeArgsSchema: z.ZodType<Prisma.ProjectCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProjectCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProjectCountOutputTypeSelectSchema: z.ZodType<Prisma.ProjectCountOutputTypeSelect> = z.object({
  drawings: z.boolean().optional(),
  components: z.boolean().optional(),
  milestoneTemplates: z.boolean().optional(),
  importJobs: z.boolean().optional(),
  auditLogs: z.boolean().optional(),
  reportingCache: z.boolean().optional(),
  rocConfigurations: z.boolean().optional(),
  progressSnapshots: z.boolean().optional(),
  reportGenerations: z.boolean().optional(),
  welders: z.boolean().optional(),
  fieldWelds: z.boolean().optional(),
}).strict();

export const ProjectSelectSchema: z.ZodType<Prisma.ProjectSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  jobName: z.boolean().optional(),
  jobNumber: z.boolean().optional(),
  description: z.boolean().optional(),
  status: z.boolean().optional(),
  client: z.boolean().optional(),
  location: z.boolean().optional(),
  startDate: z.boolean().optional(),
  targetDate: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  drawings: z.union([z.boolean(),z.lazy(() => DrawingFindManyArgsSchema)]).optional(),
  components: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  milestoneTemplates: z.union([z.boolean(),z.lazy(() => MilestoneTemplateFindManyArgsSchema)]).optional(),
  importJobs: z.union([z.boolean(),z.lazy(() => ImportJobFindManyArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  reportingCache: z.union([z.boolean(),z.lazy(() => ReportingCacheFindManyArgsSchema)]).optional(),
  rocConfigurations: z.union([z.boolean(),z.lazy(() => ROCConfigurationsFindManyArgsSchema)]).optional(),
  progressSnapshots: z.union([z.boolean(),z.lazy(() => ProgressSnapshotsFindManyArgsSchema)]).optional(),
  reportGenerations: z.union([z.boolean(),z.lazy(() => ReportGenerationsFindManyArgsSchema)]).optional(),
  welders: z.union([z.boolean(),z.lazy(() => WelderFindManyArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DRAWING
//------------------------------------------------------

export const DrawingIncludeSchema: z.ZodType<Prisma.DrawingInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  parent: z.union([z.boolean(),z.lazy(() => DrawingArgsSchema)]).optional(),
  children: z.union([z.boolean(),z.lazy(() => DrawingFindManyArgsSchema)]).optional(),
  components: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DrawingCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DrawingArgsSchema: z.ZodType<Prisma.DrawingDefaultArgs> = z.object({
  select: z.lazy(() => DrawingSelectSchema).optional(),
  include: z.lazy(() => DrawingIncludeSchema).optional(),
}).strict();

export const DrawingCountOutputTypeArgsSchema: z.ZodType<Prisma.DrawingCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => DrawingCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DrawingCountOutputTypeSelectSchema: z.ZodType<Prisma.DrawingCountOutputTypeSelect> = z.object({
  children: z.boolean().optional(),
  components: z.boolean().optional(),
  fieldWelds: z.boolean().optional(),
}).strict();

export const DrawingSelectSchema: z.ZodType<Prisma.DrawingSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  number: z.boolean().optional(),
  title: z.boolean().optional(),
  revision: z.boolean().optional(),
  parentId: z.boolean().optional(),
  filePath: z.boolean().optional(),
  fileUrl: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  parent: z.union([z.boolean(),z.lazy(() => DrawingArgsSchema)]).optional(),
  children: z.union([z.boolean(),z.lazy(() => DrawingFindManyArgsSchema)]).optional(),
  components: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DrawingCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MILESTONE TEMPLATE
//------------------------------------------------------

export const MilestoneTemplateIncludeSchema: z.ZodType<Prisma.MilestoneTemplateInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  components: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MilestoneTemplateCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MilestoneTemplateArgsSchema: z.ZodType<Prisma.MilestoneTemplateDefaultArgs> = z.object({
  select: z.lazy(() => MilestoneTemplateSelectSchema).optional(),
  include: z.lazy(() => MilestoneTemplateIncludeSchema).optional(),
}).strict();

export const MilestoneTemplateCountOutputTypeArgsSchema: z.ZodType<Prisma.MilestoneTemplateCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MilestoneTemplateCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MilestoneTemplateCountOutputTypeSelectSchema: z.ZodType<Prisma.MilestoneTemplateCountOutputTypeSelect> = z.object({
  components: z.boolean().optional(),
}).strict();

export const MilestoneTemplateSelectSchema: z.ZodType<Prisma.MilestoneTemplateSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  milestones: z.boolean().optional(),
  isDefault: z.boolean().optional(),
  usageCount: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  components: z.union([z.boolean(),z.lazy(() => ComponentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MilestoneTemplateCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COMPONENT
//------------------------------------------------------

export const ComponentIncludeSchema: z.ZodType<Prisma.ComponentInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  drawing: z.union([z.boolean(),z.lazy(() => DrawingArgsSchema)]).optional(),
  milestoneTemplate: z.union([z.boolean(),z.lazy(() => MilestoneTemplateArgsSchema)]).optional(),
  installer: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  milestones: z.union([z.boolean(),z.lazy(() => ComponentMilestoneFindManyArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ComponentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ComponentArgsSchema: z.ZodType<Prisma.ComponentDefaultArgs> = z.object({
  select: z.lazy(() => ComponentSelectSchema).optional(),
  include: z.lazy(() => ComponentIncludeSchema).optional(),
}).strict();

export const ComponentCountOutputTypeArgsSchema: z.ZodType<Prisma.ComponentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ComponentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ComponentCountOutputTypeSelectSchema: z.ZodType<Prisma.ComponentCountOutputTypeSelect> = z.object({
  milestones: z.boolean().optional(),
  auditLogs: z.boolean().optional(),
  fieldWelds: z.boolean().optional(),
}).strict();

export const ComponentSelectSchema: z.ZodType<Prisma.ComponentSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  drawingId: z.boolean().optional(),
  milestoneTemplateId: z.boolean().optional(),
  componentId: z.boolean().optional(),
  weldId: z.boolean().optional(),
  instanceNumber: z.boolean().optional(),
  totalInstancesOnDrawing: z.boolean().optional(),
  displayId: z.boolean().optional(),
  type: z.boolean().optional(),
  workflowType: z.boolean().optional(),
  spec: z.boolean().optional(),
  size: z.boolean().optional(),
  material: z.boolean().optional(),
  pressureRating: z.boolean().optional(),
  description: z.boolean().optional(),
  area: z.boolean().optional(),
  system: z.boolean().optional(),
  testPackage: z.boolean().optional(),
  testPressure: z.boolean().optional(),
  testRequired: z.boolean().optional(),
  totalLength: z.boolean().optional(),
  lengthUnit: z.boolean().optional(),
  totalQuantity: z.boolean().optional(),
  quantityUnit: z.boolean().optional(),
  notes: z.boolean().optional(),
  completionPercent: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  installationDate: z.boolean().optional(),
  installerUserId: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  drawing: z.union([z.boolean(),z.lazy(() => DrawingArgsSchema)]).optional(),
  milestoneTemplate: z.union([z.boolean(),z.lazy(() => MilestoneTemplateArgsSchema)]).optional(),
  installer: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  milestones: z.union([z.boolean(),z.lazy(() => ComponentMilestoneFindManyArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ComponentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// COMPONENT MILESTONE
//------------------------------------------------------

export const ComponentMilestoneIncludeSchema: z.ZodType<Prisma.ComponentMilestoneInclude> = z.object({
  component: z.union([z.boolean(),z.lazy(() => ComponentArgsSchema)]).optional(),
  completer: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const ComponentMilestoneArgsSchema: z.ZodType<Prisma.ComponentMilestoneDefaultArgs> = z.object({
  select: z.lazy(() => ComponentMilestoneSelectSchema).optional(),
  include: z.lazy(() => ComponentMilestoneIncludeSchema).optional(),
}).strict();

export const ComponentMilestoneSelectSchema: z.ZodType<Prisma.ComponentMilestoneSelect> = z.object({
  id: z.boolean().optional(),
  componentId: z.boolean().optional(),
  milestoneName: z.boolean().optional(),
  milestoneOrder: z.boolean().optional(),
  weight: z.boolean().optional(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.boolean().optional(),
  quantityValue: z.boolean().optional(),
  quantityUnit: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  completedBy: z.boolean().optional(),
  effectiveDate: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  component: z.union([z.boolean(),z.lazy(() => ComponentArgsSchema)]).optional(),
  completer: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// IMPORT JOB
//------------------------------------------------------

export const ImportJobIncludeSchema: z.ZodType<Prisma.ImportJobInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const ImportJobArgsSchema: z.ZodType<Prisma.ImportJobDefaultArgs> = z.object({
  select: z.lazy(() => ImportJobSelectSchema).optional(),
  include: z.lazy(() => ImportJobIncludeSchema).optional(),
}).strict();

export const ImportJobSelectSchema: z.ZodType<Prisma.ImportJobSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  userId: z.boolean().optional(),
  filename: z.boolean().optional(),
  originalPath: z.boolean().optional(),
  status: z.boolean().optional(),
  totalRows: z.boolean().optional(),
  processedRows: z.boolean().optional(),
  errorRows: z.boolean().optional(),
  errors: z.boolean().optional(),
  startedAt: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  duration: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// AUDIT LOG
//------------------------------------------------------

export const AuditLogIncludeSchema: z.ZodType<Prisma.AuditLogInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  component: z.union([z.boolean(),z.lazy(() => ComponentArgsSchema)]).optional(),
}).strict()

export const AuditLogArgsSchema: z.ZodType<Prisma.AuditLogDefaultArgs> = z.object({
  select: z.lazy(() => AuditLogSelectSchema).optional(),
  include: z.lazy(() => AuditLogIncludeSchema).optional(),
}).strict();

export const AuditLogSelectSchema: z.ZodType<Prisma.AuditLogSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  userId: z.boolean().optional(),
  componentId: z.boolean().optional(),
  entityType: z.boolean().optional(),
  entityId: z.boolean().optional(),
  action: z.boolean().optional(),
  changes: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  component: z.union([z.boolean(),z.lazy(() => ComponentArgsSchema)]).optional(),
}).strict()

// REPORTING CACHE
//------------------------------------------------------

export const ReportingCacheIncludeSchema: z.ZodType<Prisma.ReportingCacheInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const ReportingCacheArgsSchema: z.ZodType<Prisma.ReportingCacheDefaultArgs> = z.object({
  select: z.lazy(() => ReportingCacheSelectSchema).optional(),
  include: z.lazy(() => ReportingCacheIncludeSchema).optional(),
}).strict();

export const ReportingCacheSelectSchema: z.ZodType<Prisma.ReportingCacheSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  reportType: z.boolean().optional(),
  cacheKey: z.boolean().optional(),
  filters: z.boolean().optional(),
  result: z.boolean().optional(),
  calculatedAt: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  calculationDuration: z.boolean().optional(),
  rowCount: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ROC CONFIGURATIONS
//------------------------------------------------------

export const ROCConfigurationsIncludeSchema: z.ZodType<Prisma.ROCConfigurationsInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  progressSnapshots: z.union([z.boolean(),z.lazy(() => ProgressSnapshotsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ROCConfigurationsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ROCConfigurationsArgsSchema: z.ZodType<Prisma.ROCConfigurationsDefaultArgs> = z.object({
  select: z.lazy(() => ROCConfigurationsSelectSchema).optional(),
  include: z.lazy(() => ROCConfigurationsIncludeSchema).optional(),
}).strict();

export const ROCConfigurationsCountOutputTypeArgsSchema: z.ZodType<Prisma.ROCConfigurationsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ROCConfigurationsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ROCConfigurationsCountOutputTypeSelectSchema: z.ZodType<Prisma.ROCConfigurationsCountOutputTypeSelect> = z.object({
  progressSnapshots: z.boolean().optional(),
}).strict();

export const ROCConfigurationsSelectSchema: z.ZodType<Prisma.ROCConfigurationsSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  projectId: z.boolean().optional(),
  componentType: z.boolean().optional(),
  milestoneWeights: z.boolean().optional(),
  description: z.boolean().optional(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  progressSnapshots: z.union([z.boolean(),z.lazy(() => ProgressSnapshotsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ROCConfigurationsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROGRESS SNAPSHOTS
//------------------------------------------------------

export const ProgressSnapshotsIncludeSchema: z.ZodType<Prisma.ProgressSnapshotsInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  generator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  rocConfig: z.union([z.boolean(),z.lazy(() => ROCConfigurationsArgsSchema)]).optional(),
}).strict()

export const ProgressSnapshotsArgsSchema: z.ZodType<Prisma.ProgressSnapshotsDefaultArgs> = z.object({
  select: z.lazy(() => ProgressSnapshotsSelectSchema).optional(),
  include: z.lazy(() => ProgressSnapshotsIncludeSchema).optional(),
}).strict();

export const ProgressSnapshotsSelectSchema: z.ZodType<Prisma.ProgressSnapshotsSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  snapshotDate: z.boolean().optional(),
  snapshotTime: z.boolean().optional(),
  totalComponents: z.boolean().optional(),
  completedComponents: z.boolean().optional(),
  overallCompletionPercent: z.boolean().optional(),
  rocWeightedPercent: z.boolean().optional(),
  areaBreakdown: z.boolean().optional(),
  systemBreakdown: z.boolean().optional(),
  testPackageBreakdown: z.boolean().optional(),
  dailyVelocity: z.boolean().optional(),
  weeklyVelocity: z.boolean().optional(),
  milestoneVelocity: z.boolean().optional(),
  stalledComponents7d: z.boolean().optional(),
  stalledComponents14d: z.boolean().optional(),
  stalledComponents21d: z.boolean().optional(),
  calculationDuration: z.boolean().optional(),
  generatedBy: z.boolean().optional(),
  generationMethod: z.boolean().optional(),
  rocConfigId: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  generator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  rocConfig: z.union([z.boolean(),z.lazy(() => ROCConfigurationsArgsSchema)]).optional(),
}).strict()

// REPORT GENERATIONS
//------------------------------------------------------

export const ReportGenerationsIncludeSchema: z.ZodType<Prisma.ReportGenerationsInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  requester: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const ReportGenerationsArgsSchema: z.ZodType<Prisma.ReportGenerationsDefaultArgs> = z.object({
  select: z.lazy(() => ReportGenerationsSelectSchema).optional(),
  include: z.lazy(() => ReportGenerationsIncludeSchema).optional(),
}).strict();

export const ReportGenerationsSelectSchema: z.ZodType<Prisma.ReportGenerationsSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  reportType: z.boolean().optional(),
  requestedBy: z.boolean().optional(),
  requestedAt: z.boolean().optional(),
  filters: z.boolean().optional(),
  outputFormat: z.boolean().optional(),
  deliveryMethod: z.boolean().optional(),
  status: z.boolean().optional(),
  startedAt: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  duration: z.boolean().optional(),
  resultRowCount: z.boolean().optional(),
  resultSize: z.boolean().optional(),
  downloadUrl: z.boolean().optional(),
  downloadExpires: z.boolean().optional(),
  errorMessage: z.boolean().optional(),
  errorDetails: z.boolean().optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.boolean().optional(),
  exportTime: z.boolean().optional(),
  memoryUsage: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  requester: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// WELD TYPE
//------------------------------------------------------

export const WeldTypeIncludeSchema: z.ZodType<Prisma.WeldTypeInclude> = z.object({
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WeldTypeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const WeldTypeArgsSchema: z.ZodType<Prisma.WeldTypeDefaultArgs> = z.object({
  select: z.lazy(() => WeldTypeSelectSchema).optional(),
  include: z.lazy(() => WeldTypeIncludeSchema).optional(),
}).strict();

export const WeldTypeCountOutputTypeArgsSchema: z.ZodType<Prisma.WeldTypeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => WeldTypeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const WeldTypeCountOutputTypeSelectSchema: z.ZodType<Prisma.WeldTypeCountOutputTypeSelect> = z.object({
  fieldWelds: z.boolean().optional(),
}).strict();

export const WeldTypeSelectSchema: z.ZodType<Prisma.WeldTypeSelect> = z.object({
  id: z.boolean().optional(),
  code: z.boolean().optional(),
  description: z.boolean().optional(),
  active: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WeldTypeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WELDER
//------------------------------------------------------

export const WelderIncludeSchema: z.ZodType<Prisma.WelderInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WelderCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const WelderArgsSchema: z.ZodType<Prisma.WelderDefaultArgs> = z.object({
  select: z.lazy(() => WelderSelectSchema).optional(),
  include: z.lazy(() => WelderIncludeSchema).optional(),
}).strict();

export const WelderCountOutputTypeArgsSchema: z.ZodType<Prisma.WelderCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => WelderCountOutputTypeSelectSchema).nullish(),
}).strict();

export const WelderCountOutputTypeSelectSchema: z.ZodType<Prisma.WelderCountOutputTypeSelect> = z.object({
  fieldWelds: z.boolean().optional(),
}).strict();

export const WelderSelectSchema: z.ZodType<Prisma.WelderSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  stencil: z.boolean().optional(),
  name: z.boolean().optional(),
  active: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  fieldWelds: z.union([z.boolean(),z.lazy(() => FieldWeldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WelderCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FIELD WELD
//------------------------------------------------------

export const FieldWeldIncludeSchema: z.ZodType<Prisma.FieldWeldInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  welder: z.union([z.boolean(),z.lazy(() => WelderArgsSchema)]).optional(),
  drawing: z.union([z.boolean(),z.lazy(() => DrawingArgsSchema)]).optional(),
  weldType: z.union([z.boolean(),z.lazy(() => WeldTypeArgsSchema)]).optional(),
  component: z.union([z.boolean(),z.lazy(() => ComponentArgsSchema)]).optional(),
}).strict()

export const FieldWeldArgsSchema: z.ZodType<Prisma.FieldWeldDefaultArgs> = z.object({
  select: z.lazy(() => FieldWeldSelectSchema).optional(),
  include: z.lazy(() => FieldWeldIncludeSchema).optional(),
}).strict();

export const FieldWeldSelectSchema: z.ZodType<Prisma.FieldWeldSelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  weldIdNumber: z.boolean().optional(),
  welderId: z.boolean().optional(),
  dateWelded: z.boolean().optional(),
  drawingId: z.boolean().optional(),
  packageNumber: z.boolean().optional(),
  testPressure: z.boolean().optional(),
  specCode: z.boolean().optional(),
  tieInNumber: z.boolean().optional(),
  xrayPercent: z.boolean().optional(),
  weldSize: z.boolean().optional(),
  schedule: z.boolean().optional(),
  weldTypeCode: z.boolean().optional(),
  baseMetal: z.boolean().optional(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.boolean().optional(),
  ndeTypes: z.boolean().optional(),
  ndeResult: z.boolean().optional(),
  ndeDate: z.boolean().optional(),
  turnoverDate: z.boolean().optional(),
  comments: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  welder: z.union([z.boolean(),z.lazy(() => WelderArgsSchema)]).optional(),
  drawing: z.union([z.boolean(),z.lazy(() => DrawingArgsSchema)]).optional(),
  weldType: z.union([z.boolean(),z.lazy(() => WeldTypeArgsSchema)]).optional(),
  component: z.union([z.boolean(),z.lazy(() => ComponentArgsSchema)]).optional(),
}).strict()

// EARLY ACCESS LEAD
//------------------------------------------------------

export const EarlyAccessLeadSelectSchema: z.ZodType<Prisma.EarlyAccessLeadSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  company: z.boolean().optional(),
  projectSize: z.boolean().optional(),
  currentMethod: z.boolean().optional(),
  role: z.boolean().optional(),
  phone: z.boolean().optional(),
  message: z.boolean().optional(),
  source: z.boolean().optional(),
  utmSource: z.boolean().optional(),
  utmMedium: z.boolean().optional(),
  utmCampaign: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  createdProjects: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  installedComponents: z.lazy(() => ComponentListRelationFilterSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneListRelationFilterSchema).optional(),
  importJobs: z.lazy(() => ImportJobListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheListRelationFilterSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsListRelationFilterSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsListRelationFilterSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  locale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorOrderByRelationAggregateInputSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectOrderByRelationAggregateInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentOrderByRelationAggregateInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneOrderByRelationAggregateInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobOrderByRelationAggregateInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheOrderByRelationAggregateInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsOrderByRelationAggregateInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsOrderByRelationAggregateInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string(),
    username: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    email: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    username: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
    username: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    username: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  username: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  createdProjects: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  installedComponents: z.lazy(() => ComponentListRelationFilterSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneListRelationFilterSchema).optional(),
  importJobs: z.lazy(() => ImportJobListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheListRelationFilterSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsListRelationFilterSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsListRelationFilterSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  locale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationWhereInputSchema: z.ZodType<Prisma.VerificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VerificationOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const VerificationWhereUniqueInputSchema: z.ZodType<Prisma.VerificationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const VerificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const PasskeyWhereInputSchema: z.ZodType<Prisma.PasskeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PasskeyOrderByWithRelationInputSchema: z.ZodType<Prisma.PasskeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PasskeyWhereUniqueInputSchema: z.ZodType<Prisma.PasskeyWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PasskeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.PasskeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PasskeyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PasskeyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PasskeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PasskeyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PasskeySumOrderByAggregateInputSchema).optional()
}).strict();

export const PasskeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PasskeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema),z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema),z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const TwoFactorWhereInputSchema: z.ZodType<Prisma.TwoFactorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TwoFactorOrderByWithRelationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TwoFactorWhereUniqueInputSchema: z.ZodType<Prisma.TwoFactorWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TwoFactorOrderByWithAggregationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TwoFactorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TwoFactorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TwoFactorMinOrderByAggregateInputSchema).optional()
}).strict();

export const TwoFactorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  projects: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputSchema).optional(),
  projects: z.lazy(() => ProjectOrderByRelationAggregateInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  projects: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const MemberWhereInputSchema: z.ZodType<Prisma.MemberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const MemberOrderByWithRelationInputSchema: z.ZodType<Prisma.MemberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const MemberWhereUniqueInputSchema: z.ZodType<Prisma.MemberWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const MemberOrderByWithAggregationInputSchema: z.ZodType<Prisma.MemberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputSchema).optional()
}).strict();

export const MemberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const PurchaseWhereInputSchema: z.ZodType<Prisma.PurchaseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseOrderByWithRelationInputSchema: z.ZodType<Prisma.PurchaseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PurchaseWhereUniqueInputSchema: z.ZodType<Prisma.PurchaseWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    subscriptionId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    subscriptionId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  subscriptionId: z.string().optional(),
  AND: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const PurchaseOrderByWithAggregationInputSchema: z.ZodType<Prisma.PurchaseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PurchaseCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PurchaseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PurchaseMinOrderByAggregateInputSchema).optional()
}).strict();

export const PurchaseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PurchaseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema),z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema),z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeWithAggregatesFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AiChatWhereInputSchema: z.ZodType<Prisma.AiChatWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AiChatOrderByWithRelationInputSchema: z.ZodType<Prisma.AiChatOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AiChatWhereUniqueInputSchema: z.ZodType<Prisma.AiChatWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AiChatOrderByWithAggregationInputSchema: z.ZodType<Prisma.AiChatOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AiChatCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AiChatMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AiChatMinOrderByAggregateInputSchema).optional()
}).strict();

export const AiChatScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AiChatScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema),z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema),z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProjectWhereInputSchema: z.ZodType<Prisma.ProjectWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  jobName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  jobNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  client: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  targetDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  creator: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingListRelationFilterSchema).optional(),
  components: z.lazy(() => ComponentListRelationFilterSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateListRelationFilterSchema).optional(),
  importJobs: z.lazy(() => ImportJobListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheListRelationFilterSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsListRelationFilterSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsListRelationFilterSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsListRelationFilterSchema).optional(),
  welders: z.lazy(() => WelderListRelationFilterSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict();

export const ProjectOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  jobName: z.lazy(() => SortOrderSchema).optional(),
  jobNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  client: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  targetDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  drawings: z.lazy(() => DrawingOrderByRelationAggregateInputSchema).optional(),
  components: z.lazy(() => ComponentOrderByRelationAggregateInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateOrderByRelationAggregateInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobOrderByRelationAggregateInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheOrderByRelationAggregateInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsOrderByRelationAggregateInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsOrderByRelationAggregateInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsOrderByRelationAggregateInputSchema).optional(),
  welders: z.lazy(() => WelderOrderByRelationAggregateInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProjectWhereUniqueInputSchema: z.ZodType<Prisma.ProjectWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    unique_org_job_number: z.lazy(() => ProjectUnique_org_job_numberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    unique_org_job_number: z.lazy(() => ProjectUnique_org_job_numberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  unique_org_job_number: z.lazy(() => ProjectUnique_org_job_numberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  jobName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  jobNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  client: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  targetDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  creator: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingListRelationFilterSchema).optional(),
  components: z.lazy(() => ComponentListRelationFilterSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateListRelationFilterSchema).optional(),
  importJobs: z.lazy(() => ImportJobListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheListRelationFilterSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsListRelationFilterSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsListRelationFilterSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsListRelationFilterSchema).optional(),
  welders: z.lazy(() => WelderListRelationFilterSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict());

export const ProjectOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  jobName: z.lazy(() => SortOrderSchema).optional(),
  jobNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  client: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  targetDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  jobName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  jobNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusWithAggregatesFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  client: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  targetDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const DrawingWhereInputSchema: z.ZodType<Prisma.DrawingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DrawingWhereInputSchema),z.lazy(() => DrawingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DrawingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DrawingWhereInputSchema),z.lazy(() => DrawingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  number: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revision: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filePath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  parent: z.union([ z.lazy(() => DrawingNullableScalarRelationFilterSchema),z.lazy(() => DrawingWhereInputSchema) ]).optional().nullable(),
  children: z.lazy(() => DrawingListRelationFilterSchema).optional(),
  components: z.lazy(() => ComponentListRelationFilterSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict();

export const DrawingOrderByWithRelationInputSchema: z.ZodType<Prisma.DrawingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  revision: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  filePath: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fileUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  parent: z.lazy(() => DrawingOrderByWithRelationInputSchema).optional(),
  children: z.lazy(() => DrawingOrderByRelationAggregateInputSchema).optional(),
  components: z.lazy(() => ComponentOrderByRelationAggregateInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldOrderByRelationAggregateInputSchema).optional()
}).strict();

export const DrawingWhereUniqueInputSchema: z.ZodType<Prisma.DrawingWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    projectId_number: z.lazy(() => DrawingProjectIdNumberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    projectId_number: z.lazy(() => DrawingProjectIdNumberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  projectId_number: z.lazy(() => DrawingProjectIdNumberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => DrawingWhereInputSchema),z.lazy(() => DrawingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DrawingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DrawingWhereInputSchema),z.lazy(() => DrawingWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  number: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revision: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filePath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  parent: z.union([ z.lazy(() => DrawingNullableScalarRelationFilterSchema),z.lazy(() => DrawingWhereInputSchema) ]).optional().nullable(),
  children: z.lazy(() => DrawingListRelationFilterSchema).optional(),
  components: z.lazy(() => ComponentListRelationFilterSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict());

export const DrawingOrderByWithAggregationInputSchema: z.ZodType<Prisma.DrawingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  revision: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  filePath: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fileUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DrawingCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DrawingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DrawingMinOrderByAggregateInputSchema).optional()
}).strict();

export const DrawingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DrawingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DrawingScalarWhereWithAggregatesInputSchema),z.lazy(() => DrawingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DrawingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DrawingScalarWhereWithAggregatesInputSchema),z.lazy(() => DrawingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  number: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  revision: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  parentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  filePath: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fileUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MilestoneTemplateWhereInputSchema: z.ZodType<Prisma.MilestoneTemplateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MilestoneTemplateWhereInputSchema),z.lazy(() => MilestoneTemplateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MilestoneTemplateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MilestoneTemplateWhereInputSchema),z.lazy(() => MilestoneTemplateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  milestones: z.lazy(() => JsonFilterSchema).optional(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  usageCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  components: z.lazy(() => ComponentListRelationFilterSchema).optional()
}).strict();

export const MilestoneTemplateOrderByWithRelationInputSchema: z.ZodType<Prisma.MilestoneTemplateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  milestones: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  components: z.lazy(() => ComponentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MilestoneTemplateWhereUniqueInputSchema: z.ZodType<Prisma.MilestoneTemplateWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    projectId_name: z.lazy(() => MilestoneTemplateProjectIdNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    projectId_name: z.lazy(() => MilestoneTemplateProjectIdNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  projectId_name: z.lazy(() => MilestoneTemplateProjectIdNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MilestoneTemplateWhereInputSchema),z.lazy(() => MilestoneTemplateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MilestoneTemplateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MilestoneTemplateWhereInputSchema),z.lazy(() => MilestoneTemplateWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  milestones: z.lazy(() => JsonFilterSchema).optional(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  usageCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  components: z.lazy(() => ComponentListRelationFilterSchema).optional()
}).strict());

export const MilestoneTemplateOrderByWithAggregationInputSchema: z.ZodType<Prisma.MilestoneTemplateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  milestones: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MilestoneTemplateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MilestoneTemplateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MilestoneTemplateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MilestoneTemplateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MilestoneTemplateSumOrderByAggregateInputSchema).optional()
}).strict();

export const MilestoneTemplateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MilestoneTemplateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MilestoneTemplateScalarWhereWithAggregatesInputSchema),z.lazy(() => MilestoneTemplateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MilestoneTemplateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MilestoneTemplateScalarWhereWithAggregatesInputSchema),z.lazy(() => MilestoneTemplateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  milestones: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  isDefault: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  usageCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ComponentWhereInputSchema: z.ZodType<Prisma.ComponentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ComponentWhereInputSchema),z.lazy(() => ComponentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentWhereInputSchema),z.lazy(() => ComponentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  drawingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneTemplateId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instanceNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  totalInstancesOnDrawing: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  displayId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumComponentTypeFilterSchema),z.lazy(() => ComponentTypeSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => EnumWorkflowTypeFilterSchema),z.lazy(() => WorkflowTypeSchema) ]).optional(),
  spec: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  material: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  pressureRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  area: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  system: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  testPackage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  testPressure: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  testRequired: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  totalLength: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lengthUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  totalQuantity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  completionPercent: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumComponentStatusFilterSchema),z.lazy(() => ComponentStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  installationDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  installerUserId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  drawing: z.union([ z.lazy(() => DrawingScalarRelationFilterSchema),z.lazy(() => DrawingWhereInputSchema) ]).optional(),
  milestoneTemplate: z.union([ z.lazy(() => MilestoneTemplateScalarRelationFilterSchema),z.lazy(() => MilestoneTemplateWhereInputSchema) ]).optional(),
  installer: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict();

export const ComponentOrderByWithRelationInputSchema: z.ZodType<Prisma.ComponentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  milestoneTemplateId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  weldId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  displayId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  workflowType: z.lazy(() => SortOrderSchema).optional(),
  spec: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  material: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pressureRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  area: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  system: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  testPackage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  testRequired: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  totalLength: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lengthUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  totalQuantity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quantityUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  installationDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  installerUserId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  drawing: z.lazy(() => DrawingOrderByWithRelationInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateOrderByWithRelationInputSchema).optional(),
  installer: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneOrderByRelationAggregateInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ComponentWhereUniqueInputSchema: z.ZodType<Prisma.ComponentWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    weldId: z.string(),
    drawingId_componentId_instanceNumber: z.lazy(() => ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
    weldId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    drawingId_componentId_instanceNumber: z.lazy(() => ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    weldId: z.string(),
    drawingId_componentId_instanceNumber: z.lazy(() => ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInputSchema),
  }),
  z.object({
    weldId: z.string(),
  }),
  z.object({
    drawingId_componentId_instanceNumber: z.lazy(() => ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  weldId: z.string().optional(),
  drawingId_componentId_instanceNumber: z.lazy(() => ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ComponentWhereInputSchema),z.lazy(() => ComponentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentWhereInputSchema),z.lazy(() => ComponentWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  drawingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneTemplateId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  instanceNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  totalInstancesOnDrawing: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  displayId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumComponentTypeFilterSchema),z.lazy(() => ComponentTypeSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => EnumWorkflowTypeFilterSchema),z.lazy(() => WorkflowTypeSchema) ]).optional(),
  spec: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  material: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  pressureRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  area: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  system: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  testPackage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  testPressure: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  testRequired: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  totalLength: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lengthUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  totalQuantity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  completionPercent: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumComponentStatusFilterSchema),z.lazy(() => ComponentStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  installationDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  installerUserId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  drawing: z.union([ z.lazy(() => DrawingScalarRelationFilterSchema),z.lazy(() => DrawingWhereInputSchema) ]).optional(),
  milestoneTemplate: z.union([ z.lazy(() => MilestoneTemplateScalarRelationFilterSchema),z.lazy(() => MilestoneTemplateWhereInputSchema) ]).optional(),
  installer: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict());

export const ComponentOrderByWithAggregationInputSchema: z.ZodType<Prisma.ComponentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  milestoneTemplateId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  weldId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  displayId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  workflowType: z.lazy(() => SortOrderSchema).optional(),
  spec: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  size: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  material: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pressureRating: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  area: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  system: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  testPackage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  testRequired: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  totalLength: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lengthUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  totalQuantity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quantityUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  installationDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  installerUserId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ComponentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ComponentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ComponentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ComponentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ComponentSumOrderByAggregateInputSchema).optional()
}).strict();

export const ComponentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ComponentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ComponentScalarWhereWithAggregatesInputSchema),z.lazy(() => ComponentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentScalarWhereWithAggregatesInputSchema),z.lazy(() => ComponentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  drawingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  milestoneTemplateId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  weldId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  instanceNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  totalInstancesOnDrawing: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  displayId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumComponentTypeWithAggregatesFilterSchema),z.lazy(() => ComponentTypeSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => EnumWorkflowTypeWithAggregatesFilterSchema),z.lazy(() => WorkflowTypeSchema) ]).optional(),
  spec: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  material: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  pressureRating: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  area: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  system: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  testPackage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  testPressure: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  testRequired: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  totalLength: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lengthUnit: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  totalQuantity: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  completionPercent: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumComponentStatusWithAggregatesFilterSchema),z.lazy(() => ComponentStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  installationDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  installerUserId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ComponentMilestoneWhereInputSchema: z.ZodType<Prisma.ComponentMilestoneWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ComponentMilestoneWhereInputSchema),z.lazy(() => ComponentMilestoneWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentMilestoneWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentMilestoneWhereInputSchema),z.lazy(() => ComponentMilestoneWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isCompleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  percentageValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  effectiveDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  component: z.union([ z.lazy(() => ComponentScalarRelationFilterSchema),z.lazy(() => ComponentWhereInputSchema) ]).optional(),
  completer: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ComponentMilestoneOrderByWithRelationInputSchema: z.ZodType<Prisma.ComponentMilestoneOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  milestoneName: z.lazy(() => SortOrderSchema).optional(),
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quantityValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quantityUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  component: z.lazy(() => ComponentOrderByWithRelationInputSchema).optional(),
  completer: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const ComponentMilestoneWhereUniqueInputSchema: z.ZodType<Prisma.ComponentMilestoneWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    componentId_milestoneName: z.lazy(() => ComponentMilestoneComponentIdMilestoneNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    componentId_milestoneName: z.lazy(() => ComponentMilestoneComponentIdMilestoneNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  componentId_milestoneName: z.lazy(() => ComponentMilestoneComponentIdMilestoneNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ComponentMilestoneWhereInputSchema),z.lazy(() => ComponentMilestoneWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentMilestoneWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentMilestoneWhereInputSchema),z.lazy(() => ComponentMilestoneWhereInputSchema).array() ]).optional(),
  componentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneOrder: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  weight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isCompleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  percentageValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  effectiveDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  component: z.union([ z.lazy(() => ComponentScalarRelationFilterSchema),z.lazy(() => ComponentWhereInputSchema) ]).optional(),
  completer: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ComponentMilestoneOrderByWithAggregationInputSchema: z.ZodType<Prisma.ComponentMilestoneOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  milestoneName: z.lazy(() => SortOrderSchema).optional(),
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quantityValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  quantityUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ComponentMilestoneCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ComponentMilestoneAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ComponentMilestoneMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ComponentMilestoneMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ComponentMilestoneSumOrderByAggregateInputSchema).optional()
}).strict();

export const ComponentMilestoneScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ComponentMilestoneScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ComponentMilestoneScalarWhereWithAggregatesInputSchema),z.lazy(() => ComponentMilestoneScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentMilestoneScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentMilestoneScalarWhereWithAggregatesInputSchema),z.lazy(() => ComponentMilestoneScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  milestoneName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  milestoneOrder: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  weight: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  isCompleted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  percentageValue: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  quantityValue: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  effectiveDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ImportJobWhereInputSchema: z.ZodType<Prisma.ImportJobWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ImportJobWhereInputSchema),z.lazy(() => ImportJobWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImportJobWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImportJobWhereInputSchema),z.lazy(() => ImportJobWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filename: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  originalPath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumImportStatusFilterSchema),z.lazy(() => ImportStatusSchema) ]).optional(),
  totalRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  processedRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  errorRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  errors: z.lazy(() => JsonNullableFilterSchema).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const ImportJobOrderByWithRelationInputSchema: z.ZodType<Prisma.ImportJobOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  originalPath: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  totalRows: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  processedRows: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errorRows: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errors: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const ImportJobWhereUniqueInputSchema: z.ZodType<Prisma.ImportJobWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ImportJobWhereInputSchema),z.lazy(() => ImportJobWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImportJobWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImportJobWhereInputSchema),z.lazy(() => ImportJobWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filename: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  originalPath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumImportStatusFilterSchema),z.lazy(() => ImportStatusSchema) ]).optional(),
  totalRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  processedRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  errorRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  errors: z.lazy(() => JsonNullableFilterSchema).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const ImportJobOrderByWithAggregationInputSchema: z.ZodType<Prisma.ImportJobOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  originalPath: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  totalRows: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  processedRows: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errorRows: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errors: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ImportJobCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ImportJobAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ImportJobMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ImportJobMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ImportJobSumOrderByAggregateInputSchema).optional()
}).strict();

export const ImportJobScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ImportJobScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ImportJobScalarWhereWithAggregatesInputSchema),z.lazy(() => ImportJobScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImportJobScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImportJobScalarWhereWithAggregatesInputSchema),z.lazy(() => ImportJobScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  filename: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  originalPath: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumImportStatusWithAggregatesFilterSchema),z.lazy(() => ImportStatusSchema) ]).optional(),
  totalRows: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  processedRows: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  errorRows: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  errors: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AuditLogWhereInputSchema: z.ZodType<Prisma.AuditLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  entityType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entityId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => EnumAuditActionFilterSchema),z.lazy(() => AuditActionSchema) ]).optional(),
  changes: z.lazy(() => JsonFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  component: z.union([ z.lazy(() => ComponentNullableScalarRelationFilterSchema),z.lazy(() => ComponentWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogOrderByWithRelationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  entityType: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  changes: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  component: z.lazy(() => ComponentOrderByWithRelationInputSchema).optional()
}).strict();

export const AuditLogWhereUniqueInputSchema: z.ZodType<Prisma.AuditLogWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  entityType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entityId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => EnumAuditActionFilterSchema),z.lazy(() => AuditActionSchema) ]).optional(),
  changes: z.lazy(() => JsonFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  component: z.union([ z.lazy(() => ComponentNullableScalarRelationFilterSchema),z.lazy(() => ComponentWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AuditLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  entityType: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  changes: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AuditLogCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AuditLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AuditLogMinOrderByAggregateInputSchema).optional()
}).strict();

export const AuditLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AuditLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  entityType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  entityId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => EnumAuditActionWithAggregatesFilterSchema),z.lazy(() => AuditActionSchema) ]).optional(),
  changes: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReportingCacheWhereInputSchema: z.ZodType<Prisma.ReportingCacheWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReportingCacheWhereInputSchema),z.lazy(() => ReportingCacheWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportingCacheWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportingCacheWhereInputSchema),z.lazy(() => ReportingCacheWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cacheKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  result: z.lazy(() => JsonFilterSchema).optional(),
  calculatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  rowCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  creator: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ReportingCacheOrderByWithRelationInputSchema: z.ZodType<Prisma.ReportingCacheOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  cacheKey: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  result: z.lazy(() => SortOrderSchema).optional(),
  calculatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rowCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const ReportingCacheWhereUniqueInputSchema: z.ZodType<Prisma.ReportingCacheWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    idx_cache_unique: z.lazy(() => ReportingCacheIdx_cache_uniqueCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    idx_cache_unique: z.lazy(() => ReportingCacheIdx_cache_uniqueCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  idx_cache_unique: z.lazy(() => ReportingCacheIdx_cache_uniqueCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ReportingCacheWhereInputSchema),z.lazy(() => ReportingCacheWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportingCacheWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportingCacheWhereInputSchema),z.lazy(() => ReportingCacheWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cacheKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  result: z.lazy(() => JsonFilterSchema).optional(),
  calculatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  rowCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  creator: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ReportingCacheOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReportingCacheOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  cacheKey: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  result: z.lazy(() => SortOrderSchema).optional(),
  calculatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rowCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ReportingCacheCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ReportingCacheAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReportingCacheMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReportingCacheMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ReportingCacheSumOrderByAggregateInputSchema).optional()
}).strict();

export const ReportingCacheScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReportingCacheScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReportingCacheScalarWhereWithAggregatesInputSchema),z.lazy(() => ReportingCacheScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportingCacheScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportingCacheScalarWhereWithAggregatesInputSchema),z.lazy(() => ReportingCacheScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cacheKey: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  result: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  calculatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  rowCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ROCConfigurationsWhereInputSchema: z.ZodType<Prisma.ROCConfigurationsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ROCConfigurationsWhereInputSchema),z.lazy(() => ROCConfigurationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ROCConfigurationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ROCConfigurationsWhereInputSchema),z.lazy(() => ROCConfigurationsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  componentType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  milestoneWeights: z.lazy(() => JsonFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  effectiveDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  project: z.union([ z.lazy(() => ProjectNullableScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  creator: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsListRelationFilterSchema).optional()
}).strict();

export const ROCConfigurationsOrderByWithRelationInputSchema: z.ZodType<Prisma.ROCConfigurationsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  componentType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  milestoneWeights: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ROCConfigurationsWhereUniqueInputSchema: z.ZodType<Prisma.ROCConfigurationsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ROCConfigurationsWhereInputSchema),z.lazy(() => ROCConfigurationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ROCConfigurationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ROCConfigurationsWhereInputSchema),z.lazy(() => ROCConfigurationsWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  componentType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  milestoneWeights: z.lazy(() => JsonFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  effectiveDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  project: z.union([ z.lazy(() => ProjectNullableScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  creator: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsListRelationFilterSchema).optional()
}).strict());

export const ROCConfigurationsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ROCConfigurationsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  componentType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  milestoneWeights: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ROCConfigurationsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ROCConfigurationsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ROCConfigurationsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ROCConfigurationsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ROCConfigurationsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ROCConfigurationsScalarWhereWithAggregatesInputSchema),z.lazy(() => ROCConfigurationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ROCConfigurationsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ROCConfigurationsScalarWhereWithAggregatesInputSchema),z.lazy(() => ROCConfigurationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  componentType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  milestoneWeights: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isDefault: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  effectiveDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ProgressSnapshotsWhereInputSchema: z.ZodType<Prisma.ProgressSnapshotsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProgressSnapshotsWhereInputSchema),z.lazy(() => ProgressSnapshotsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProgressSnapshotsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProgressSnapshotsWhereInputSchema),z.lazy(() => ProgressSnapshotsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  snapshotDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  snapshotTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  totalComponents: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  completedComponents: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  overallCompletionPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rocWeightedPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  areaBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  systemBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  testPackageBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  dailyVelocity: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  milestoneVelocity: z.lazy(() => JsonFilterSchema).optional(),
  stalledComponents7d: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stalledComponents14d: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stalledComponents21d: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  generationMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rocConfigId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  generator: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  rocConfig: z.union([ z.lazy(() => ROCConfigurationsNullableScalarRelationFilterSchema),z.lazy(() => ROCConfigurationsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ProgressSnapshotsOrderByWithRelationInputSchema: z.ZodType<Prisma.ProgressSnapshotsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  snapshotDate: z.lazy(() => SortOrderSchema).optional(),
  snapshotTime: z.lazy(() => SortOrderSchema).optional(),
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  areaBreakdown: z.lazy(() => SortOrderSchema).optional(),
  systemBreakdown: z.lazy(() => SortOrderSchema).optional(),
  testPackageBreakdown: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  weeklyVelocity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  milestoneVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  generatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  generationMethod: z.lazy(() => SortOrderSchema).optional(),
  rocConfigId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  generator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  rocConfig: z.lazy(() => ROCConfigurationsOrderByWithRelationInputSchema).optional()
}).strict();

export const ProgressSnapshotsWhereUniqueInputSchema: z.ZodType<Prisma.ProgressSnapshotsWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    idx_snapshot_project_date: z.lazy(() => ProgressSnapshotsIdx_snapshot_project_dateCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    idx_snapshot_project_date: z.lazy(() => ProgressSnapshotsIdx_snapshot_project_dateCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  idx_snapshot_project_date: z.lazy(() => ProgressSnapshotsIdx_snapshot_project_dateCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ProgressSnapshotsWhereInputSchema),z.lazy(() => ProgressSnapshotsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProgressSnapshotsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProgressSnapshotsWhereInputSchema),z.lazy(() => ProgressSnapshotsWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  snapshotDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  snapshotTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  totalComponents: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  completedComponents: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  overallCompletionPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rocWeightedPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  areaBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  systemBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  testPackageBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  dailyVelocity: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  milestoneVelocity: z.lazy(() => JsonFilterSchema).optional(),
  stalledComponents7d: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  stalledComponents14d: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  stalledComponents21d: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  generationMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rocConfigId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  generator: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  rocConfig: z.union([ z.lazy(() => ROCConfigurationsNullableScalarRelationFilterSchema),z.lazy(() => ROCConfigurationsWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ProgressSnapshotsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProgressSnapshotsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  snapshotDate: z.lazy(() => SortOrderSchema).optional(),
  snapshotTime: z.lazy(() => SortOrderSchema).optional(),
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  areaBreakdown: z.lazy(() => SortOrderSchema).optional(),
  systemBreakdown: z.lazy(() => SortOrderSchema).optional(),
  testPackageBreakdown: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  weeklyVelocity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  milestoneVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  generatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  generationMethod: z.lazy(() => SortOrderSchema).optional(),
  rocConfigId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProgressSnapshotsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProgressSnapshotsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProgressSnapshotsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProgressSnapshotsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProgressSnapshotsSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProgressSnapshotsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProgressSnapshotsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereWithAggregatesInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProgressSnapshotsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereWithAggregatesInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  snapshotDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  snapshotTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  totalComponents: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  completedComponents: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  overallCompletionPercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rocWeightedPercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  areaBreakdown: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  systemBreakdown: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  testPackageBreakdown: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  dailyVelocity: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  milestoneVelocity: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  stalledComponents7d: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  stalledComponents14d: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  stalledComponents21d: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  generationMethod: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rocConfigId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ReportGenerationsWhereInputSchema: z.ZodType<Prisma.ReportGenerationsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReportGenerationsWhereInputSchema),z.lazy(() => ReportGenerationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportGenerationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportGenerationsWhereInputSchema),z.lazy(() => ReportGenerationsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  outputFormat: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deliveryMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  resultRowCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  resultSize: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  downloadUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  downloadExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  errorDetails: z.lazy(() => JsonNullableFilterSchema).optional(),
  cacheHit: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  dbQueryTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  exportTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  memoryUsage: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  requester: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const ReportGenerationsOrderByWithRelationInputSchema: z.ZodType<Prisma.ReportGenerationsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  outputFormat: z.lazy(() => SortOrderSchema).optional(),
  deliveryMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultRowCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultSize: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  downloadUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  downloadExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errorMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errorDetails: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  cacheHit: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  exportTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memoryUsage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  requester: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const ReportGenerationsWhereUniqueInputSchema: z.ZodType<Prisma.ReportGenerationsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ReportGenerationsWhereInputSchema),z.lazy(() => ReportGenerationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportGenerationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportGenerationsWhereInputSchema),z.lazy(() => ReportGenerationsWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  outputFormat: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deliveryMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  resultRowCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  resultSize: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  downloadUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  downloadExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  errorDetails: z.lazy(() => JsonNullableFilterSchema).optional(),
  cacheHit: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  dbQueryTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  exportTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  memoryUsage: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  requester: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const ReportGenerationsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReportGenerationsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  outputFormat: z.lazy(() => SortOrderSchema).optional(),
  deliveryMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultRowCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultSize: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  downloadUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  downloadExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errorMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  errorDetails: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  cacheHit: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  exportTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  memoryUsage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ReportGenerationsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ReportGenerationsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReportGenerationsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReportGenerationsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ReportGenerationsSumOrderByAggregateInputSchema).optional()
}).strict();

export const ReportGenerationsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReportGenerationsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReportGenerationsScalarWhereWithAggregatesInputSchema),z.lazy(() => ReportGenerationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportGenerationsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportGenerationsScalarWhereWithAggregatesInputSchema),z.lazy(() => ReportGenerationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  filters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  outputFormat: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deliveryMethod: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  resultRowCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  resultSize: z.union([ z.lazy(() => BigIntNullableWithAggregatesFilterSchema),z.bigint() ]).optional().nullable(),
  downloadUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  downloadExpires: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  errorMessage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  errorDetails: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  cacheHit: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  dbQueryTime: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  exportTime: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  memoryUsage: z.union([ z.lazy(() => BigIntNullableWithAggregatesFilterSchema),z.bigint() ]).optional().nullable(),
}).strict();

export const WeldTypeWhereInputSchema: z.ZodType<Prisma.WeldTypeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WeldTypeWhereInputSchema),z.lazy(() => WeldTypeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WeldTypeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WeldTypeWhereInputSchema),z.lazy(() => WeldTypeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict();

export const WeldTypeOrderByWithRelationInputSchema: z.ZodType<Prisma.WeldTypeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldOrderByRelationAggregateInputSchema).optional()
}).strict();

export const WeldTypeWhereUniqueInputSchema: z.ZodType<Prisma.WeldTypeWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    code: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => WeldTypeWhereInputSchema),z.lazy(() => WeldTypeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WeldTypeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WeldTypeWhereInputSchema),z.lazy(() => WeldTypeWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict());

export const WeldTypeOrderByWithAggregationInputSchema: z.ZodType<Prisma.WeldTypeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => WeldTypeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WeldTypeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WeldTypeMinOrderByAggregateInputSchema).optional()
}).strict();

export const WeldTypeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WeldTypeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WeldTypeScalarWhereWithAggregatesInputSchema),z.lazy(() => WeldTypeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WeldTypeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WeldTypeScalarWhereWithAggregatesInputSchema),z.lazy(() => WeldTypeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WelderWhereInputSchema: z.ZodType<Prisma.WelderWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WelderWhereInputSchema),z.lazy(() => WelderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WelderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WelderWhereInputSchema),z.lazy(() => WelderWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stencil: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict();

export const WelderOrderByWithRelationInputSchema: z.ZodType<Prisma.WelderOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  stencil: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldOrderByRelationAggregateInputSchema).optional()
}).strict();

export const WelderWhereUniqueInputSchema: z.ZodType<Prisma.WelderWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    idx_welder_project_stencil: z.lazy(() => WelderIdx_welder_project_stencilCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    idx_welder_project_stencil: z.lazy(() => WelderIdx_welder_project_stencilCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  idx_welder_project_stencil: z.lazy(() => WelderIdx_welder_project_stencilCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => WelderWhereInputSchema),z.lazy(() => WelderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WelderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WelderWhereInputSchema),z.lazy(() => WelderWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stencil: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldListRelationFilterSchema).optional()
}).strict());

export const WelderOrderByWithAggregationInputSchema: z.ZodType<Prisma.WelderOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  stencil: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => WelderCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WelderMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WelderMinOrderByAggregateInputSchema).optional()
}).strict();

export const WelderScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WelderScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WelderScalarWhereWithAggregatesInputSchema),z.lazy(() => WelderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WelderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WelderScalarWhereWithAggregatesInputSchema),z.lazy(() => WelderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  stencil: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FieldWeldWhereInputSchema: z.ZodType<Prisma.FieldWeldWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FieldWeldWhereInputSchema),z.lazy(() => FieldWeldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldWeldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldWeldWhereInputSchema),z.lazy(() => FieldWeldWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldIdNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  welderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dateWelded: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  drawingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  packageNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testPressure: z.lazy(() => JsonFilterSchema).optional(),
  specCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tieInNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  xrayPercent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  weldSize: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  schedule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldTypeCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  baseMetal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  pwhtRequired: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  datePwht: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ndeTypes: z.lazy(() => StringNullableListFilterSchema).optional(),
  ndeResult: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ndeDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  turnoverDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  welder: z.union([ z.lazy(() => WelderNullableScalarRelationFilterSchema),z.lazy(() => WelderWhereInputSchema) ]).optional().nullable(),
  drawing: z.union([ z.lazy(() => DrawingScalarRelationFilterSchema),z.lazy(() => DrawingWhereInputSchema) ]).optional(),
  weldType: z.union([ z.lazy(() => WeldTypeScalarRelationFilterSchema),z.lazy(() => WeldTypeWhereInputSchema) ]).optional(),
  component: z.union([ z.lazy(() => ComponentNullableScalarRelationFilterSchema),z.lazy(() => ComponentWhereInputSchema) ]).optional().nullable(),
}).strict();

export const FieldWeldOrderByWithRelationInputSchema: z.ZodType<Prisma.FieldWeldOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  weldIdNumber: z.lazy(() => SortOrderSchema).optional(),
  welderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dateWelded: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  packageNumber: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  specCode: z.lazy(() => SortOrderSchema).optional(),
  tieInNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  xrayPercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  weldSize: z.lazy(() => SortOrderSchema).optional(),
  schedule: z.lazy(() => SortOrderSchema).optional(),
  weldTypeCode: z.lazy(() => SortOrderSchema).optional(),
  baseMetal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pwhtRequired: z.lazy(() => SortOrderSchema).optional(),
  datePwht: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ndeTypes: z.lazy(() => SortOrderSchema).optional(),
  ndeResult: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ndeDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  turnoverDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  welder: z.lazy(() => WelderOrderByWithRelationInputSchema).optional(),
  drawing: z.lazy(() => DrawingOrderByWithRelationInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeOrderByWithRelationInputSchema).optional(),
  component: z.lazy(() => ComponentOrderByWithRelationInputSchema).optional()
}).strict();

export const FieldWeldWhereUniqueInputSchema: z.ZodType<Prisma.FieldWeldWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    idx_field_weld_project_id: z.lazy(() => FieldWeldIdx_field_weld_project_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    idx_field_weld_project_id: z.lazy(() => FieldWeldIdx_field_weld_project_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  idx_field_weld_project_id: z.lazy(() => FieldWeldIdx_field_weld_project_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => FieldWeldWhereInputSchema),z.lazy(() => FieldWeldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldWeldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldWeldWhereInputSchema),z.lazy(() => FieldWeldWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldIdNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  welderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dateWelded: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  drawingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  packageNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testPressure: z.lazy(() => JsonFilterSchema).optional(),
  specCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tieInNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  xrayPercent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  weldSize: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  schedule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldTypeCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  baseMetal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  pwhtRequired: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  datePwht: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ndeTypes: z.lazy(() => StringNullableListFilterSchema).optional(),
  ndeResult: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ndeDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  turnoverDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectScalarRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  welder: z.union([ z.lazy(() => WelderNullableScalarRelationFilterSchema),z.lazy(() => WelderWhereInputSchema) ]).optional().nullable(),
  drawing: z.union([ z.lazy(() => DrawingScalarRelationFilterSchema),z.lazy(() => DrawingWhereInputSchema) ]).optional(),
  weldType: z.union([ z.lazy(() => WeldTypeScalarRelationFilterSchema),z.lazy(() => WeldTypeWhereInputSchema) ]).optional(),
  component: z.union([ z.lazy(() => ComponentNullableScalarRelationFilterSchema),z.lazy(() => ComponentWhereInputSchema) ]).optional().nullable(),
}).strict());

export const FieldWeldOrderByWithAggregationInputSchema: z.ZodType<Prisma.FieldWeldOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  weldIdNumber: z.lazy(() => SortOrderSchema).optional(),
  welderId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dateWelded: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  packageNumber: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  specCode: z.lazy(() => SortOrderSchema).optional(),
  tieInNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  xrayPercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  weldSize: z.lazy(() => SortOrderSchema).optional(),
  schedule: z.lazy(() => SortOrderSchema).optional(),
  weldTypeCode: z.lazy(() => SortOrderSchema).optional(),
  baseMetal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  pwhtRequired: z.lazy(() => SortOrderSchema).optional(),
  datePwht: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ndeTypes: z.lazy(() => SortOrderSchema).optional(),
  ndeResult: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ndeDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  turnoverDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FieldWeldCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FieldWeldAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FieldWeldMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FieldWeldMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FieldWeldSumOrderByAggregateInputSchema).optional()
}).strict();

export const FieldWeldScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FieldWeldScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FieldWeldScalarWhereWithAggregatesInputSchema),z.lazy(() => FieldWeldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldWeldScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldWeldScalarWhereWithAggregatesInputSchema),z.lazy(() => FieldWeldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  weldIdNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  welderId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dateWelded: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  drawingId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  packageNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  testPressure: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  specCode: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tieInNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  xrayPercent: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  weldSize: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  schedule: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  weldTypeCode: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  baseMetal: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  pwhtRequired: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  datePwht: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  ndeTypes: z.lazy(() => StringNullableListFilterSchema).optional(),
  ndeResult: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ndeDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  turnoverDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EarlyAccessLeadWhereInputSchema: z.ZodType<Prisma.EarlyAccessLeadWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EarlyAccessLeadWhereInputSchema),z.lazy(() => EarlyAccessLeadWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EarlyAccessLeadWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EarlyAccessLeadWhereInputSchema),z.lazy(() => EarlyAccessLeadWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  company: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectSize: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currentMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  utmSource: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  utmMedium: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  utmCampaign: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EarlyAccessLeadOrderByWithRelationInputSchema: z.ZodType<Prisma.EarlyAccessLeadOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  projectSize: z.lazy(() => SortOrderSchema).optional(),
  currentMethod: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  message: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  utmSource: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  utmMedium: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  utmCampaign: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessLeadWhereUniqueInputSchema: z.ZodType<Prisma.EarlyAccessLeadWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => EarlyAccessLeadWhereInputSchema),z.lazy(() => EarlyAccessLeadWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EarlyAccessLeadWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EarlyAccessLeadWhereInputSchema),z.lazy(() => EarlyAccessLeadWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  company: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectSize: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currentMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  utmSource: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  utmMedium: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  utmCampaign: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const EarlyAccessLeadOrderByWithAggregationInputSchema: z.ZodType<Prisma.EarlyAccessLeadOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  projectSize: z.lazy(() => SortOrderSchema).optional(),
  currentMethod: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  message: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  utmSource: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  utmMedium: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  utmCampaign: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EarlyAccessLeadCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EarlyAccessLeadMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EarlyAccessLeadMinOrderByAggregateInputSchema).optional()
}).strict();

export const EarlyAccessLeadScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EarlyAccessLeadScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EarlyAccessLeadScalarWhereWithAggregatesInputSchema),z.lazy(() => EarlyAccessLeadScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EarlyAccessLeadScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EarlyAccessLeadScalarWhereWithAggregatesInputSchema),z.lazy(() => EarlyAccessLeadScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  company: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectSize: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currentMethod: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  utmSource: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  utmMedium: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  utmCampaign: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationCreateInputSchema: z.ZodType<Prisma.VerificationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateInputSchema: z.ZodType<Prisma.VerificationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationCreateManyInputSchema: z.ZodType<Prisma.VerificationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyCreateInputSchema: z.ZodType<Prisma.PasskeyCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutPasskeysInputSchema)
}).strict();

export const PasskeyUncheckedCreateInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUpdateInputSchema: z.ZodType<Prisma.PasskeyUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPasskeysNestedInputSchema).optional()
}).strict();

export const PasskeyUncheckedUpdateInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyCreateManyInputSchema: z.ZodType<Prisma.PasskeyCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUpdateManyMutationInputSchema: z.ZodType<Prisma.PasskeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TwoFactorCreateInputSchema: z.ZodType<Prisma.TwoFactorCreateInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  user: z.lazy(() => UserCreateNestedOneWithoutTwofactorsInputSchema)
}).strict();

export const TwoFactorUncheckedCreateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateInputSchema: z.ZodType<Prisma.TwoFactorUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema).optional()
}).strict();

export const TwoFactorUncheckedUpdateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorCreateManyInputSchema: z.ZodType<Prisma.TwoFactorCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateManyMutationInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MemberCreateInputSchema: z.ZodType<Prisma.MemberCreateInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateInputSchema: z.ZodType<Prisma.MemberUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateInputSchema: z.ZodType<Prisma.MemberUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyInputSchema: z.ZodType<Prisma.MemberCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateManyMutationInputSchema: z.ZodType<Prisma.MemberUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseCreateInputSchema: z.ZodType<Prisma.PurchaseCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseUpdateInputSchema: z.ZodType<Prisma.PurchaseUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseCreateManyInputSchema: z.ZodType<Prisma.PurchaseCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseUpdateManyMutationInputSchema: z.ZodType<Prisma.PurchaseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateInputSchema: z.ZodType<Prisma.AiChatCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatUpdateInputSchema: z.ZodType<Prisma.AiChatUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateManyInputSchema: z.ZodType<Prisma.AiChatCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatUpdateManyMutationInputSchema: z.ZodType<Prisma.AiChatUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateInputSchema: z.ZodType<Prisma.ProjectCreateInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUpdateInputSchema: z.ZodType<Prisma.ProjectUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectCreateManyInputSchema: z.ZodType<Prisma.ProjectCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string()
}).strict();

export const ProjectUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DrawingCreateInputSchema: z.ZodType<Prisma.DrawingCreateInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutDrawingsInputSchema),
  parent: z.lazy(() => DrawingCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => DrawingCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUncheckedCreateInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  children: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUpdateInputSchema: z.ZodType<Prisma.DrawingUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutDrawingsNestedInputSchema).optional(),
  parent: z.lazy(() => DrawingUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => DrawingUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.lazy(() => DrawingUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingCreateManyInputSchema: z.ZodType<Prisma.DrawingCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DrawingUpdateManyMutationInputSchema: z.ZodType<Prisma.DrawingUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DrawingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MilestoneTemplateCreateInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutMilestoneTemplatesInputSchema),
  components: z.lazy(() => ComponentCreateNestedManyWithoutMilestoneTemplateInputSchema).optional()
}).strict();

export const MilestoneTemplateUncheckedCreateInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutMilestoneTemplateInputSchema).optional()
}).strict();

export const MilestoneTemplateUpdateInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutMilestoneTemplatesNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutMilestoneTemplateNestedInputSchema).optional()
}).strict();

export const MilestoneTemplateUncheckedUpdateInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutMilestoneTemplateNestedInputSchema).optional()
}).strict();

export const MilestoneTemplateCreateManyInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MilestoneTemplateUpdateManyMutationInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MilestoneTemplateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentCreateInputSchema: z.ZodType<Prisma.ComponentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUpdateInputSchema: z.ZodType<Prisma.ComponentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentCreateManyInputSchema: z.ZodType<Prisma.ComponentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable()
}).strict();

export const ComponentUpdateManyMutationInputSchema: z.ZodType<Prisma.ComponentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ComponentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ComponentMilestoneCreateInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateInput> = z.object({
  id: z.string().cuid().optional(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  component: z.lazy(() => ComponentCreateNestedOneWithoutMilestonesInputSchema),
  completer: z.lazy(() => UserCreateNestedOneWithoutCompletedMilestonesInputSchema).optional()
}).strict();

export const ComponentMilestoneUncheckedCreateInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  completedBy: z.string().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentMilestoneUpdateInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  component: z.lazy(() => ComponentUpdateOneRequiredWithoutMilestonesNestedInputSchema).optional(),
  completer: z.lazy(() => UserUpdateOneWithoutCompletedMilestonesNestedInputSchema).optional()
}).strict();

export const ComponentMilestoneUncheckedUpdateInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentMilestoneCreateManyInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  completedBy: z.string().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentMilestoneUpdateManyMutationInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobCreateInputSchema: z.ZodType<Prisma.ImportJobCreateInput> = z.object({
  id: z.string().cuid().optional(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutImportJobsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutImportJobsInputSchema)
}).strict();

export const ImportJobUncheckedCreateInputSchema: z.ZodType<Prisma.ImportJobUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  userId: z.string(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ImportJobUpdateInputSchema: z.ZodType<Prisma.ImportJobUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutImportJobsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutImportJobsNestedInputSchema).optional()
}).strict();

export const ImportJobUncheckedUpdateInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobCreateManyInputSchema: z.ZodType<Prisma.ImportJobCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  userId: z.string(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ImportJobUpdateManyMutationInputSchema: z.ZodType<Prisma.ImportJobUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateInputSchema: z.ZodType<Prisma.AuditLogCreateInput> = z.object({
  id: z.string().cuid().optional(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutAuditLogsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  userId: z.string(),
  componentId: z.string().optional().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateInputSchema: z.ZodType<Prisma.AuditLogUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateManyInputSchema: z.ZodType<Prisma.AuditLogCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  userId: z.string(),
  componentId: z.string().optional().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateManyMutationInputSchema: z.ZodType<Prisma.AuditLogUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportingCacheCreateInputSchema: z.ZodType<Prisma.ReportingCacheCreateInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutReportingCacheInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutReportingCacheCreatedInputSchema).optional()
}).strict();

export const ReportingCacheUncheckedCreateInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const ReportingCacheUpdateInputSchema: z.ZodType<Prisma.ReportingCacheUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutReportingCacheNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneWithoutReportingCacheCreatedNestedInputSchema).optional()
}).strict();

export const ReportingCacheUncheckedUpdateInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportingCacheCreateManyInputSchema: z.ZodType<Prisma.ReportingCacheCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const ReportingCacheUpdateManyMutationInputSchema: z.ZodType<Prisma.ReportingCacheUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportingCacheUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ROCConfigurationsCreateInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRocConfigurationsInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutRocConfigurationsInputSchema).optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutRocConfigsCreatedInputSchema),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedCreateInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsUpdateInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRocConfigurationsNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutRocConfigurationsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutRocConfigsCreatedNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsCreateManyInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string()
}).strict();

export const ROCConfigurationsUpdateManyMutationInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsCreateInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generationMethod: z.string().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutProgressSnapshotsInputSchema),
  generator: z.lazy(() => UserCreateNestedOneWithoutSnapshotsGeneratedInputSchema).optional(),
  rocConfig: z.lazy(() => ROCConfigurationsCreateNestedOneWithoutProgressSnapshotsInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedCreateInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  generationMethod: z.string().optional(),
  rocConfigId: z.string().optional().nullable()
}).strict();

export const ProgressSnapshotsUpdateInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutProgressSnapshotsNestedInputSchema).optional(),
  generator: z.lazy(() => UserUpdateOneWithoutSnapshotsGeneratedNestedInputSchema).optional(),
  rocConfig: z.lazy(() => ROCConfigurationsUpdateOneWithoutProgressSnapshotsNestedInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedUpdateInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rocConfigId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProgressSnapshotsCreateManyInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  generationMethod: z.string().optional(),
  rocConfigId: z.string().optional().nullable()
}).strict();

export const ProgressSnapshotsUpdateManyMutationInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rocConfigId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsCreateInputSchema: z.ZodType<Prisma.ReportGenerationsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutReportGenerationsInputSchema),
  requester: z.lazy(() => UserCreateNestedOneWithoutReportGenerationsRequestedInputSchema)
}).strict();

export const ReportGenerationsUncheckedCreateInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable()
}).strict();

export const ReportGenerationsUpdateInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutReportGenerationsNestedInputSchema).optional(),
  requester: z.lazy(() => UserUpdateOneRequiredWithoutReportGenerationsRequestedNestedInputSchema).optional()
}).strict();

export const ReportGenerationsUncheckedUpdateInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsCreateManyInputSchema: z.ZodType<Prisma.ReportGenerationsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable()
}).strict();

export const ReportGenerationsUpdateManyMutationInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const WeldTypeCreateInputSchema: z.ZodType<Prisma.WeldTypeCreateInput> = z.object({
  id: z.string().cuid().optional(),
  code: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutWeldTypeInputSchema).optional()
}).strict();

export const WeldTypeUncheckedCreateInputSchema: z.ZodType<Prisma.WeldTypeUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  code: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutWeldTypeInputSchema).optional()
}).strict();

export const WeldTypeUpdateInputSchema: z.ZodType<Prisma.WeldTypeUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutWeldTypeNestedInputSchema).optional()
}).strict();

export const WeldTypeUncheckedUpdateInputSchema: z.ZodType<Prisma.WeldTypeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutWeldTypeNestedInputSchema).optional()
}).strict();

export const WeldTypeCreateManyInputSchema: z.ZodType<Prisma.WeldTypeCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  code: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const WeldTypeUpdateManyMutationInputSchema: z.ZodType<Prisma.WeldTypeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WeldTypeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WeldTypeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WelderCreateInputSchema: z.ZodType<Prisma.WelderCreateInput> = z.object({
  id: z.string().cuid().optional(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutWeldersInputSchema),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutWelderInputSchema).optional()
}).strict();

export const WelderUncheckedCreateInputSchema: z.ZodType<Prisma.WelderUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutWelderInputSchema).optional()
}).strict();

export const WelderUpdateInputSchema: z.ZodType<Prisma.WelderUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutWeldersNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutWelderNestedInputSchema).optional()
}).strict();

export const WelderUncheckedUpdateInputSchema: z.ZodType<Prisma.WelderUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutWelderNestedInputSchema).optional()
}).strict();

export const WelderCreateManyInputSchema: z.ZodType<Prisma.WelderCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WelderUpdateManyMutationInputSchema: z.ZodType<Prisma.WelderUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WelderUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WelderUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldCreateInputSchema: z.ZodType<Prisma.FieldWeldCreateInput> = z.object({
  id: z.string().cuid().optional(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutFieldWeldsInputSchema),
  welder: z.lazy(() => WelderCreateNestedOneWithoutFieldWeldsInputSchema).optional(),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutFieldWeldsInputSchema),
  weldType: z.lazy(() => WeldTypeCreateNestedOneWithoutFieldWeldsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutFieldWeldsInputSchema).optional()
}).strict();

export const FieldWeldUncheckedCreateInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldUpdateInputSchema: z.ZodType<Prisma.FieldWeldUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  welder: z.lazy(() => WelderUpdateOneWithoutFieldWeldsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutFieldWeldsNestedInputSchema).optional()
}).strict();

export const FieldWeldUncheckedUpdateInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldCreateManyInputSchema: z.ZodType<Prisma.FieldWeldCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldUpdateManyMutationInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessLeadCreateInputSchema: z.ZodType<Prisma.EarlyAccessLeadCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  company: z.string(),
  projectSize: z.string(),
  currentMethod: z.string(),
  role: z.string(),
  phone: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  source: z.string().optional(),
  utmSource: z.string().optional().nullable(),
  utmMedium: z.string().optional().nullable(),
  utmCampaign: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EarlyAccessLeadUncheckedCreateInputSchema: z.ZodType<Prisma.EarlyAccessLeadUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  company: z.string(),
  projectSize: z.string(),
  currentMethod: z.string(),
  role: z.string(),
  phone: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  source: z.string().optional(),
  utmSource: z.string().optional().nullable(),
  utmMedium: z.string().optional().nullable(),
  utmCampaign: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EarlyAccessLeadUpdateInputSchema: z.ZodType<Prisma.EarlyAccessLeadUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  company: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  utmSource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmMedium: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmCampaign: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessLeadUncheckedUpdateInputSchema: z.ZodType<Prisma.EarlyAccessLeadUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  company: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  utmSource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmMedium: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmCampaign: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessLeadCreateManyInputSchema: z.ZodType<Prisma.EarlyAccessLeadCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  name: z.string(),
  email: z.string(),
  company: z.string(),
  projectSize: z.string(),
  currentMethod: z.string(),
  role: z.string(),
  phone: z.string().optional().nullable(),
  message: z.string().optional().nullable(),
  source: z.string().optional(),
  utmSource: z.string().optional().nullable(),
  utmMedium: z.string().optional().nullable(),
  utmCampaign: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EarlyAccessLeadUpdateManyMutationInputSchema: z.ZodType<Prisma.EarlyAccessLeadUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  company: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  utmSource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmMedium: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmCampaign: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessLeadUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EarlyAccessLeadUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  company: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  utmSource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmMedium: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  utmCampaign: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const PasskeyListRelationFilterSchema: z.ZodType<Prisma.PasskeyListRelationFilter> = z.object({
  every: z.lazy(() => PasskeyWhereInputSchema).optional(),
  some: z.lazy(() => PasskeyWhereInputSchema).optional(),
  none: z.lazy(() => PasskeyWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const PurchaseListRelationFilterSchema: z.ZodType<Prisma.PurchaseListRelationFilter> = z.object({
  every: z.lazy(() => PurchaseWhereInputSchema).optional(),
  some: z.lazy(() => PurchaseWhereInputSchema).optional(),
  none: z.lazy(() => PurchaseWhereInputSchema).optional()
}).strict();

export const MemberListRelationFilterSchema: z.ZodType<Prisma.MemberListRelationFilter> = z.object({
  every: z.lazy(() => MemberWhereInputSchema).optional(),
  some: z.lazy(() => MemberWhereInputSchema).optional(),
  none: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const TwoFactorListRelationFilterSchema: z.ZodType<Prisma.TwoFactorListRelationFilter> = z.object({
  every: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  some: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  none: z.lazy(() => TwoFactorWhereInputSchema).optional()
}).strict();

export const AiChatListRelationFilterSchema: z.ZodType<Prisma.AiChatListRelationFilter> = z.object({
  every: z.lazy(() => AiChatWhereInputSchema).optional(),
  some: z.lazy(() => AiChatWhereInputSchema).optional(),
  none: z.lazy(() => AiChatWhereInputSchema).optional()
}).strict();

export const ProjectListRelationFilterSchema: z.ZodType<Prisma.ProjectListRelationFilter> = z.object({
  every: z.lazy(() => ProjectWhereInputSchema).optional(),
  some: z.lazy(() => ProjectWhereInputSchema).optional(),
  none: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ComponentListRelationFilterSchema: z.ZodType<Prisma.ComponentListRelationFilter> = z.object({
  every: z.lazy(() => ComponentWhereInputSchema).optional(),
  some: z.lazy(() => ComponentWhereInputSchema).optional(),
  none: z.lazy(() => ComponentWhereInputSchema).optional()
}).strict();

export const ComponentMilestoneListRelationFilterSchema: z.ZodType<Prisma.ComponentMilestoneListRelationFilter> = z.object({
  every: z.lazy(() => ComponentMilestoneWhereInputSchema).optional(),
  some: z.lazy(() => ComponentMilestoneWhereInputSchema).optional(),
  none: z.lazy(() => ComponentMilestoneWhereInputSchema).optional()
}).strict();

export const ImportJobListRelationFilterSchema: z.ZodType<Prisma.ImportJobListRelationFilter> = z.object({
  every: z.lazy(() => ImportJobWhereInputSchema).optional(),
  some: z.lazy(() => ImportJobWhereInputSchema).optional(),
  none: z.lazy(() => ImportJobWhereInputSchema).optional()
}).strict();

export const AuditLogListRelationFilterSchema: z.ZodType<Prisma.AuditLogListRelationFilter> = z.object({
  every: z.lazy(() => AuditLogWhereInputSchema).optional(),
  some: z.lazy(() => AuditLogWhereInputSchema).optional(),
  none: z.lazy(() => AuditLogWhereInputSchema).optional()
}).strict();

export const ReportingCacheListRelationFilterSchema: z.ZodType<Prisma.ReportingCacheListRelationFilter> = z.object({
  every: z.lazy(() => ReportingCacheWhereInputSchema).optional(),
  some: z.lazy(() => ReportingCacheWhereInputSchema).optional(),
  none: z.lazy(() => ReportingCacheWhereInputSchema).optional()
}).strict();

export const ROCConfigurationsListRelationFilterSchema: z.ZodType<Prisma.ROCConfigurationsListRelationFilter> = z.object({
  every: z.lazy(() => ROCConfigurationsWhereInputSchema).optional(),
  some: z.lazy(() => ROCConfigurationsWhereInputSchema).optional(),
  none: z.lazy(() => ROCConfigurationsWhereInputSchema).optional()
}).strict();

export const ProgressSnapshotsListRelationFilterSchema: z.ZodType<Prisma.ProgressSnapshotsListRelationFilter> = z.object({
  every: z.lazy(() => ProgressSnapshotsWhereInputSchema).optional(),
  some: z.lazy(() => ProgressSnapshotsWhereInputSchema).optional(),
  none: z.lazy(() => ProgressSnapshotsWhereInputSchema).optional()
}).strict();

export const ReportGenerationsListRelationFilterSchema: z.ZodType<Prisma.ReportGenerationsListRelationFilter> = z.object({
  every: z.lazy(() => ReportGenerationsWhereInputSchema).optional(),
  some: z.lazy(() => ReportGenerationsWhereInputSchema).optional(),
  none: z.lazy(() => ReportGenerationsWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PasskeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PurchaseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MemberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TwoFactorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AiChatOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ComponentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMilestoneOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ComponentMilestoneOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImportJobOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ImportJobOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AuditLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportingCacheOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ReportingCacheOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ROCConfigurationsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ROCConfigurationsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProgressSnapshotsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProgressSnapshotsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportGenerationsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ReportGenerationsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const PasskeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyAvgOrderByAggregateInput> = z.object({
  counter: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeySumOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeySumOrderByAggregateInput> = z.object({
  counter: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const TwoFactorCountOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMinOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const MemberOrganizationIdUserIdCompoundUniqueInputSchema: z.ZodType<Prisma.MemberOrganizationIdUserIdCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  userId: z.string()
}).strict();

export const MemberCountOrderByAggregateInputSchema: z.ZodType<Prisma.MemberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMinOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPurchaseTypeFilterSchema: z.ZodType<Prisma.EnumPurchaseTypeFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeFilterSchema) ]).optional(),
}).strict();

export const OrganizationNullableScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const UserNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const PurchaseCountOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseMinOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPurchaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional()
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const AiChatCountOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatMinOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const EnumProjectStatusFilterSchema: z.ZodType<Prisma.EnumProjectStatusFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusFilterSchema) ]).optional(),
}).strict();

export const DrawingListRelationFilterSchema: z.ZodType<Prisma.DrawingListRelationFilter> = z.object({
  every: z.lazy(() => DrawingWhereInputSchema).optional(),
  some: z.lazy(() => DrawingWhereInputSchema).optional(),
  none: z.lazy(() => DrawingWhereInputSchema).optional()
}).strict();

export const MilestoneTemplateListRelationFilterSchema: z.ZodType<Prisma.MilestoneTemplateListRelationFilter> = z.object({
  every: z.lazy(() => MilestoneTemplateWhereInputSchema).optional(),
  some: z.lazy(() => MilestoneTemplateWhereInputSchema).optional(),
  none: z.lazy(() => MilestoneTemplateWhereInputSchema).optional()
}).strict();

export const WelderListRelationFilterSchema: z.ZodType<Prisma.WelderListRelationFilter> = z.object({
  every: z.lazy(() => WelderWhereInputSchema).optional(),
  some: z.lazy(() => WelderWhereInputSchema).optional(),
  none: z.lazy(() => WelderWhereInputSchema).optional()
}).strict();

export const FieldWeldListRelationFilterSchema: z.ZodType<Prisma.FieldWeldListRelationFilter> = z.object({
  every: z.lazy(() => FieldWeldWhereInputSchema).optional(),
  some: z.lazy(() => FieldWeldWhereInputSchema).optional(),
  none: z.lazy(() => FieldWeldWhereInputSchema).optional()
}).strict();

export const DrawingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DrawingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MilestoneTemplateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MilestoneTemplateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WelderOrderByRelationAggregateInputSchema: z.ZodType<Prisma.WelderOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldWeldOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FieldWeldOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectUnique_org_job_numberCompoundUniqueInputSchema: z.ZodType<Prisma.ProjectUnique_org_job_numberCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  jobNumber: z.string()
}).strict();

export const ProjectCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  jobName: z.lazy(() => SortOrderSchema).optional(),
  jobNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  client: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  targetDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  jobName: z.lazy(() => SortOrderSchema).optional(),
  jobNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  client: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  targetDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  jobName: z.lazy(() => SortOrderSchema).optional(),
  jobNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  client: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  targetDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumProjectStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumProjectStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional()
}).strict();

export const ProjectScalarRelationFilterSchema: z.ZodType<Prisma.ProjectScalarRelationFilter> = z.object({
  is: z.lazy(() => ProjectWhereInputSchema).optional(),
  isNot: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const DrawingNullableScalarRelationFilterSchema: z.ZodType<Prisma.DrawingNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => DrawingWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DrawingWhereInputSchema).optional().nullable()
}).strict();

export const DrawingProjectIdNumberCompoundUniqueInputSchema: z.ZodType<Prisma.DrawingProjectIdNumberCompoundUniqueInput> = z.object({
  projectId: z.string(),
  number: z.string()
}).strict();

export const DrawingCountOrderByAggregateInputSchema: z.ZodType<Prisma.DrawingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  revision: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DrawingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DrawingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  revision: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DrawingMinOrderByAggregateInputSchema: z.ZodType<Prisma.DrawingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  number: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  revision: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MilestoneTemplateProjectIdNameCompoundUniqueInputSchema: z.ZodType<Prisma.MilestoneTemplateProjectIdNameCompoundUniqueInput> = z.object({
  projectId: z.string(),
  name: z.string()
}).strict();

export const MilestoneTemplateCountOrderByAggregateInputSchema: z.ZodType<Prisma.MilestoneTemplateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  milestones: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MilestoneTemplateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MilestoneTemplateAvgOrderByAggregateInput> = z.object({
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MilestoneTemplateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MilestoneTemplateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MilestoneTemplateMinOrderByAggregateInputSchema: z.ZodType<Prisma.MilestoneTemplateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MilestoneTemplateSumOrderByAggregateInputSchema: z.ZodType<Prisma.MilestoneTemplateSumOrderByAggregateInput> = z.object({
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumComponentTypeFilterSchema: z.ZodType<Prisma.EnumComponentTypeFilter> = z.object({
  equals: z.lazy(() => ComponentTypeSchema).optional(),
  in: z.lazy(() => ComponentTypeSchema).array().optional(),
  notIn: z.lazy(() => ComponentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => NestedEnumComponentTypeFilterSchema) ]).optional(),
}).strict();

export const EnumWorkflowTypeFilterSchema: z.ZodType<Prisma.EnumWorkflowTypeFilter> = z.object({
  equals: z.lazy(() => WorkflowTypeSchema).optional(),
  in: z.lazy(() => WorkflowTypeSchema).array().optional(),
  notIn: z.lazy(() => WorkflowTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => NestedEnumWorkflowTypeFilterSchema) ]).optional(),
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const EnumComponentStatusFilterSchema: z.ZodType<Prisma.EnumComponentStatusFilter> = z.object({
  equals: z.lazy(() => ComponentStatusSchema).optional(),
  in: z.lazy(() => ComponentStatusSchema).array().optional(),
  notIn: z.lazy(() => ComponentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => NestedEnumComponentStatusFilterSchema) ]).optional(),
}).strict();

export const DrawingScalarRelationFilterSchema: z.ZodType<Prisma.DrawingScalarRelationFilter> = z.object({
  is: z.lazy(() => DrawingWhereInputSchema).optional(),
  isNot: z.lazy(() => DrawingWhereInputSchema).optional()
}).strict();

export const MilestoneTemplateScalarRelationFilterSchema: z.ZodType<Prisma.MilestoneTemplateScalarRelationFilter> = z.object({
  is: z.lazy(() => MilestoneTemplateWhereInputSchema).optional(),
  isNot: z.lazy(() => MilestoneTemplateWhereInputSchema).optional()
}).strict();

export const ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInputSchema: z.ZodType<Prisma.ComponentDrawingIdComponentIdInstanceNumberCompoundUniqueInput> = z.object({
  drawingId: z.string(),
  componentId: z.string(),
  instanceNumber: z.number()
}).strict();

export const ComponentCountOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  milestoneTemplateId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  weldId: z.lazy(() => SortOrderSchema).optional(),
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.lazy(() => SortOrderSchema).optional(),
  displayId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  workflowType: z.lazy(() => SortOrderSchema).optional(),
  spec: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  pressureRating: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  area: z.lazy(() => SortOrderSchema).optional(),
  system: z.lazy(() => SortOrderSchema).optional(),
  testPackage: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  testRequired: z.lazy(() => SortOrderSchema).optional(),
  totalLength: z.lazy(() => SortOrderSchema).optional(),
  lengthUnit: z.lazy(() => SortOrderSchema).optional(),
  totalQuantity: z.lazy(() => SortOrderSchema).optional(),
  quantityUnit: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  installationDate: z.lazy(() => SortOrderSchema).optional(),
  installerUserId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentAvgOrderByAggregateInput> = z.object({
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  totalLength: z.lazy(() => SortOrderSchema).optional(),
  totalQuantity: z.lazy(() => SortOrderSchema).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  milestoneTemplateId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  weldId: z.lazy(() => SortOrderSchema).optional(),
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.lazy(() => SortOrderSchema).optional(),
  displayId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  workflowType: z.lazy(() => SortOrderSchema).optional(),
  spec: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  pressureRating: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  area: z.lazy(() => SortOrderSchema).optional(),
  system: z.lazy(() => SortOrderSchema).optional(),
  testPackage: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  testRequired: z.lazy(() => SortOrderSchema).optional(),
  totalLength: z.lazy(() => SortOrderSchema).optional(),
  lengthUnit: z.lazy(() => SortOrderSchema).optional(),
  totalQuantity: z.lazy(() => SortOrderSchema).optional(),
  quantityUnit: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  installationDate: z.lazy(() => SortOrderSchema).optional(),
  installerUserId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMinOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  milestoneTemplateId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  weldId: z.lazy(() => SortOrderSchema).optional(),
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.lazy(() => SortOrderSchema).optional(),
  displayId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  workflowType: z.lazy(() => SortOrderSchema).optional(),
  spec: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  material: z.lazy(() => SortOrderSchema).optional(),
  pressureRating: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  area: z.lazy(() => SortOrderSchema).optional(),
  system: z.lazy(() => SortOrderSchema).optional(),
  testPackage: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  testRequired: z.lazy(() => SortOrderSchema).optional(),
  totalLength: z.lazy(() => SortOrderSchema).optional(),
  lengthUnit: z.lazy(() => SortOrderSchema).optional(),
  totalQuantity: z.lazy(() => SortOrderSchema).optional(),
  quantityUnit: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  installationDate: z.lazy(() => SortOrderSchema).optional(),
  installerUserId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentSumOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentSumOrderByAggregateInput> = z.object({
  instanceNumber: z.lazy(() => SortOrderSchema).optional(),
  totalInstancesOnDrawing: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  totalLength: z.lazy(() => SortOrderSchema).optional(),
  totalQuantity: z.lazy(() => SortOrderSchema).optional(),
  completionPercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const EnumComponentTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumComponentTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ComponentTypeSchema).optional(),
  in: z.lazy(() => ComponentTypeSchema).array().optional(),
  notIn: z.lazy(() => ComponentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => NestedEnumComponentTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumComponentTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumComponentTypeFilterSchema).optional()
}).strict();

export const EnumWorkflowTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumWorkflowTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => WorkflowTypeSchema).optional(),
  in: z.lazy(() => WorkflowTypeSchema).array().optional(),
  notIn: z.lazy(() => WorkflowTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => NestedEnumWorkflowTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumWorkflowTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumWorkflowTypeFilterSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const EnumComponentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumComponentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ComponentStatusSchema).optional(),
  in: z.lazy(() => ComponentStatusSchema).array().optional(),
  notIn: z.lazy(() => ComponentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => NestedEnumComponentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumComponentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumComponentStatusFilterSchema).optional()
}).strict();

export const ComponentScalarRelationFilterSchema: z.ZodType<Prisma.ComponentScalarRelationFilter> = z.object({
  is: z.lazy(() => ComponentWhereInputSchema).optional(),
  isNot: z.lazy(() => ComponentWhereInputSchema).optional()
}).strict();

export const ComponentMilestoneComponentIdMilestoneNameCompoundUniqueInputSchema: z.ZodType<Prisma.ComponentMilestoneComponentIdMilestoneNameCompoundUniqueInput> = z.object({
  componentId: z.string(),
  milestoneName: z.string()
}).strict();

export const ComponentMilestoneCountOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMilestoneCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  milestoneName: z.lazy(() => SortOrderSchema).optional(),
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.lazy(() => SortOrderSchema).optional(),
  quantityValue: z.lazy(() => SortOrderSchema).optional(),
  quantityUnit: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  completedBy: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMilestoneAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMilestoneAvgOrderByAggregateInput> = z.object({
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.lazy(() => SortOrderSchema).optional(),
  quantityValue: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMilestoneMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMilestoneMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  milestoneName: z.lazy(() => SortOrderSchema).optional(),
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.lazy(() => SortOrderSchema).optional(),
  quantityValue: z.lazy(() => SortOrderSchema).optional(),
  quantityUnit: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  completedBy: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMilestoneMinOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMilestoneMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  milestoneName: z.lazy(() => SortOrderSchema).optional(),
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  isCompleted: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.lazy(() => SortOrderSchema).optional(),
  quantityValue: z.lazy(() => SortOrderSchema).optional(),
  quantityUnit: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  completedBy: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ComponentMilestoneSumOrderByAggregateInputSchema: z.ZodType<Prisma.ComponentMilestoneSumOrderByAggregateInput> = z.object({
  milestoneOrder: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  percentageValue: z.lazy(() => SortOrderSchema).optional(),
  quantityValue: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumImportStatusFilterSchema: z.ZodType<Prisma.EnumImportStatusFilter> = z.object({
  equals: z.lazy(() => ImportStatusSchema).optional(),
  in: z.lazy(() => ImportStatusSchema).array().optional(),
  notIn: z.lazy(() => ImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => NestedEnumImportStatusFilterSchema) ]).optional(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const ImportJobCountOrderByAggregateInputSchema: z.ZodType<Prisma.ImportJobCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  originalPath: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  totalRows: z.lazy(() => SortOrderSchema).optional(),
  processedRows: z.lazy(() => SortOrderSchema).optional(),
  errorRows: z.lazy(() => SortOrderSchema).optional(),
  errors: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImportJobAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ImportJobAvgOrderByAggregateInput> = z.object({
  totalRows: z.lazy(() => SortOrderSchema).optional(),
  processedRows: z.lazy(() => SortOrderSchema).optional(),
  errorRows: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImportJobMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ImportJobMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  originalPath: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  totalRows: z.lazy(() => SortOrderSchema).optional(),
  processedRows: z.lazy(() => SortOrderSchema).optional(),
  errorRows: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImportJobMinOrderByAggregateInputSchema: z.ZodType<Prisma.ImportJobMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  originalPath: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  totalRows: z.lazy(() => SortOrderSchema).optional(),
  processedRows: z.lazy(() => SortOrderSchema).optional(),
  errorRows: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ImportJobSumOrderByAggregateInputSchema: z.ZodType<Prisma.ImportJobSumOrderByAggregateInput> = z.object({
  totalRows: z.lazy(() => SortOrderSchema).optional(),
  processedRows: z.lazy(() => SortOrderSchema).optional(),
  errorRows: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumImportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumImportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ImportStatusSchema).optional(),
  in: z.lazy(() => ImportStatusSchema).array().optional(),
  notIn: z.lazy(() => ImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => NestedEnumImportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumImportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumImportStatusFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const EnumAuditActionFilterSchema: z.ZodType<Prisma.EnumAuditActionFilter> = z.object({
  equals: z.lazy(() => AuditActionSchema).optional(),
  in: z.lazy(() => AuditActionSchema).array().optional(),
  notIn: z.lazy(() => AuditActionSchema).array().optional(),
  not: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => NestedEnumAuditActionFilterSchema) ]).optional(),
}).strict();

export const ComponentNullableScalarRelationFilterSchema: z.ZodType<Prisma.ComponentNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ComponentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ComponentWhereInputSchema).optional().nullable()
}).strict();

export const AuditLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  entityType: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  changes: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  entityType: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  componentId: z.lazy(() => SortOrderSchema).optional(),
  entityType: z.lazy(() => SortOrderSchema).optional(),
  entityId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumAuditActionWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAuditActionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AuditActionSchema).optional(),
  in: z.lazy(() => AuditActionSchema).array().optional(),
  notIn: z.lazy(() => AuditActionSchema).array().optional(),
  not: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => NestedEnumAuditActionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAuditActionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAuditActionFilterSchema).optional()
}).strict();

export const ReportingCacheIdx_cache_uniqueCompoundUniqueInputSchema: z.ZodType<Prisma.ReportingCacheIdx_cache_uniqueCompoundUniqueInput> = z.object({
  projectId: z.string(),
  reportType: z.string(),
  cacheKey: z.string()
}).strict();

export const ReportingCacheCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReportingCacheCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  cacheKey: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  result: z.lazy(() => SortOrderSchema).optional(),
  calculatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  rowCount: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportingCacheAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ReportingCacheAvgOrderByAggregateInput> = z.object({
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  rowCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportingCacheMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReportingCacheMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  cacheKey: z.lazy(() => SortOrderSchema).optional(),
  calculatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  rowCount: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportingCacheMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReportingCacheMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  cacheKey: z.lazy(() => SortOrderSchema).optional(),
  calculatedAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  rowCount: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportingCacheSumOrderByAggregateInputSchema: z.ZodType<Prisma.ReportingCacheSumOrderByAggregateInput> = z.object({
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  rowCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectNullableScalarRelationFilterSchema: z.ZodType<Prisma.ProjectNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ProjectWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProjectWhereInputSchema).optional().nullable()
}).strict();

export const ROCConfigurationsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ROCConfigurationsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  componentType: z.lazy(() => SortOrderSchema).optional(),
  milestoneWeights: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ROCConfigurationsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ROCConfigurationsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  componentType: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ROCConfigurationsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ROCConfigurationsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  componentType: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isDefault: z.lazy(() => SortOrderSchema).optional(),
  effectiveDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalFilterSchema: z.ZodType<Prisma.DecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const DecimalNullableFilterSchema: z.ZodType<Prisma.DecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ROCConfigurationsNullableScalarRelationFilterSchema: z.ZodType<Prisma.ROCConfigurationsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ROCConfigurationsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ROCConfigurationsWhereInputSchema).optional().nullable()
}).strict();

export const ProgressSnapshotsIdx_snapshot_project_dateCompoundUniqueInputSchema: z.ZodType<Prisma.ProgressSnapshotsIdx_snapshot_project_dateCompoundUniqueInput> = z.object({
  projectId: z.string(),
  snapshotDate: z.coerce.date()
}).strict();

export const ProgressSnapshotsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProgressSnapshotsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  snapshotDate: z.lazy(() => SortOrderSchema).optional(),
  snapshotTime: z.lazy(() => SortOrderSchema).optional(),
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  areaBreakdown: z.lazy(() => SortOrderSchema).optional(),
  systemBreakdown: z.lazy(() => SortOrderSchema).optional(),
  testPackageBreakdown: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.lazy(() => SortOrderSchema).optional(),
  weeklyVelocity: z.lazy(() => SortOrderSchema).optional(),
  milestoneVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  generatedBy: z.lazy(() => SortOrderSchema).optional(),
  generationMethod: z.lazy(() => SortOrderSchema).optional(),
  rocConfigId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProgressSnapshotsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProgressSnapshotsAvgOrderByAggregateInput> = z.object({
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.lazy(() => SortOrderSchema).optional(),
  weeklyVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProgressSnapshotsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProgressSnapshotsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  snapshotDate: z.lazy(() => SortOrderSchema).optional(),
  snapshotTime: z.lazy(() => SortOrderSchema).optional(),
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.lazy(() => SortOrderSchema).optional(),
  weeklyVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  generatedBy: z.lazy(() => SortOrderSchema).optional(),
  generationMethod: z.lazy(() => SortOrderSchema).optional(),
  rocConfigId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProgressSnapshotsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProgressSnapshotsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  snapshotDate: z.lazy(() => SortOrderSchema).optional(),
  snapshotTime: z.lazy(() => SortOrderSchema).optional(),
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.lazy(() => SortOrderSchema).optional(),
  weeklyVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional(),
  generatedBy: z.lazy(() => SortOrderSchema).optional(),
  generationMethod: z.lazy(() => SortOrderSchema).optional(),
  rocConfigId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProgressSnapshotsSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProgressSnapshotsSumOrderByAggregateInput> = z.object({
  totalComponents: z.lazy(() => SortOrderSchema).optional(),
  completedComponents: z.lazy(() => SortOrderSchema).optional(),
  overallCompletionPercent: z.lazy(() => SortOrderSchema).optional(),
  rocWeightedPercent: z.lazy(() => SortOrderSchema).optional(),
  dailyVelocity: z.lazy(() => SortOrderSchema).optional(),
  weeklyVelocity: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents7d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents14d: z.lazy(() => SortOrderSchema).optional(),
  stalledComponents21d: z.lazy(() => SortOrderSchema).optional(),
  calculationDuration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const BigIntNullableFilterSchema: z.ZodType<Prisma.BigIntNullableFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReportGenerationsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  outputFormat: z.lazy(() => SortOrderSchema).optional(),
  deliveryMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  resultRowCount: z.lazy(() => SortOrderSchema).optional(),
  resultSize: z.lazy(() => SortOrderSchema).optional(),
  downloadUrl: z.lazy(() => SortOrderSchema).optional(),
  downloadExpires: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  errorDetails: z.lazy(() => SortOrderSchema).optional(),
  cacheHit: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.lazy(() => SortOrderSchema).optional(),
  exportTime: z.lazy(() => SortOrderSchema).optional(),
  memoryUsage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportGenerationsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ReportGenerationsAvgOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  resultRowCount: z.lazy(() => SortOrderSchema).optional(),
  resultSize: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.lazy(() => SortOrderSchema).optional(),
  exportTime: z.lazy(() => SortOrderSchema).optional(),
  memoryUsage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportGenerationsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReportGenerationsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  outputFormat: z.lazy(() => SortOrderSchema).optional(),
  deliveryMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  resultRowCount: z.lazy(() => SortOrderSchema).optional(),
  resultSize: z.lazy(() => SortOrderSchema).optional(),
  downloadUrl: z.lazy(() => SortOrderSchema).optional(),
  downloadExpires: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  cacheHit: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.lazy(() => SortOrderSchema).optional(),
  exportTime: z.lazy(() => SortOrderSchema).optional(),
  memoryUsage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportGenerationsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReportGenerationsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  reportType: z.lazy(() => SortOrderSchema).optional(),
  requestedBy: z.lazy(() => SortOrderSchema).optional(),
  requestedAt: z.lazy(() => SortOrderSchema).optional(),
  outputFormat: z.lazy(() => SortOrderSchema).optional(),
  deliveryMethod: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  resultRowCount: z.lazy(() => SortOrderSchema).optional(),
  resultSize: z.lazy(() => SortOrderSchema).optional(),
  downloadUrl: z.lazy(() => SortOrderSchema).optional(),
  downloadExpires: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  cacheHit: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.lazy(() => SortOrderSchema).optional(),
  exportTime: z.lazy(() => SortOrderSchema).optional(),
  memoryUsage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportGenerationsSumOrderByAggregateInputSchema: z.ZodType<Prisma.ReportGenerationsSumOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  resultRowCount: z.lazy(() => SortOrderSchema).optional(),
  resultSize: z.lazy(() => SortOrderSchema).optional(),
  dbQueryTime: z.lazy(() => SortOrderSchema).optional(),
  exportTime: z.lazy(() => SortOrderSchema).optional(),
  memoryUsage: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntNullableWithAggregatesFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntNullableFilterSchema).optional()
}).strict();

export const WeldTypeCountOrderByAggregateInputSchema: z.ZodType<Prisma.WeldTypeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WeldTypeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WeldTypeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WeldTypeMinOrderByAggregateInputSchema: z.ZodType<Prisma.WeldTypeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WelderIdx_welder_project_stencilCompoundUniqueInputSchema: z.ZodType<Prisma.WelderIdx_welder_project_stencilCompoundUniqueInput> = z.object({
  projectId: z.string(),
  stencil: z.string()
}).strict();

export const WelderCountOrderByAggregateInputSchema: z.ZodType<Prisma.WelderCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  stencil: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WelderMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WelderMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  stencil: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WelderMinOrderByAggregateInputSchema: z.ZodType<Prisma.WelderMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  stencil: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const WelderNullableScalarRelationFilterSchema: z.ZodType<Prisma.WelderNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => WelderWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => WelderWhereInputSchema).optional().nullable()
}).strict();

export const WeldTypeScalarRelationFilterSchema: z.ZodType<Prisma.WeldTypeScalarRelationFilter> = z.object({
  is: z.lazy(() => WeldTypeWhereInputSchema).optional(),
  isNot: z.lazy(() => WeldTypeWhereInputSchema).optional()
}).strict();

export const FieldWeldIdx_field_weld_project_idCompoundUniqueInputSchema: z.ZodType<Prisma.FieldWeldIdx_field_weld_project_idCompoundUniqueInput> = z.object({
  projectId: z.string(),
  weldIdNumber: z.string()
}).strict();

export const FieldWeldCountOrderByAggregateInputSchema: z.ZodType<Prisma.FieldWeldCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  weldIdNumber: z.lazy(() => SortOrderSchema).optional(),
  welderId: z.lazy(() => SortOrderSchema).optional(),
  dateWelded: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  packageNumber: z.lazy(() => SortOrderSchema).optional(),
  testPressure: z.lazy(() => SortOrderSchema).optional(),
  specCode: z.lazy(() => SortOrderSchema).optional(),
  tieInNumber: z.lazy(() => SortOrderSchema).optional(),
  xrayPercent: z.lazy(() => SortOrderSchema).optional(),
  weldSize: z.lazy(() => SortOrderSchema).optional(),
  schedule: z.lazy(() => SortOrderSchema).optional(),
  weldTypeCode: z.lazy(() => SortOrderSchema).optional(),
  baseMetal: z.lazy(() => SortOrderSchema).optional(),
  pwhtRequired: z.lazy(() => SortOrderSchema).optional(),
  datePwht: z.lazy(() => SortOrderSchema).optional(),
  ndeTypes: z.lazy(() => SortOrderSchema).optional(),
  ndeResult: z.lazy(() => SortOrderSchema).optional(),
  ndeDate: z.lazy(() => SortOrderSchema).optional(),
  turnoverDate: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldWeldAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FieldWeldAvgOrderByAggregateInput> = z.object({
  xrayPercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldWeldMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FieldWeldMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  weldIdNumber: z.lazy(() => SortOrderSchema).optional(),
  welderId: z.lazy(() => SortOrderSchema).optional(),
  dateWelded: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  packageNumber: z.lazy(() => SortOrderSchema).optional(),
  specCode: z.lazy(() => SortOrderSchema).optional(),
  tieInNumber: z.lazy(() => SortOrderSchema).optional(),
  xrayPercent: z.lazy(() => SortOrderSchema).optional(),
  weldSize: z.lazy(() => SortOrderSchema).optional(),
  schedule: z.lazy(() => SortOrderSchema).optional(),
  weldTypeCode: z.lazy(() => SortOrderSchema).optional(),
  baseMetal: z.lazy(() => SortOrderSchema).optional(),
  pwhtRequired: z.lazy(() => SortOrderSchema).optional(),
  datePwht: z.lazy(() => SortOrderSchema).optional(),
  ndeResult: z.lazy(() => SortOrderSchema).optional(),
  ndeDate: z.lazy(() => SortOrderSchema).optional(),
  turnoverDate: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldWeldMinOrderByAggregateInputSchema: z.ZodType<Prisma.FieldWeldMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  weldIdNumber: z.lazy(() => SortOrderSchema).optional(),
  welderId: z.lazy(() => SortOrderSchema).optional(),
  dateWelded: z.lazy(() => SortOrderSchema).optional(),
  drawingId: z.lazy(() => SortOrderSchema).optional(),
  packageNumber: z.lazy(() => SortOrderSchema).optional(),
  specCode: z.lazy(() => SortOrderSchema).optional(),
  tieInNumber: z.lazy(() => SortOrderSchema).optional(),
  xrayPercent: z.lazy(() => SortOrderSchema).optional(),
  weldSize: z.lazy(() => SortOrderSchema).optional(),
  schedule: z.lazy(() => SortOrderSchema).optional(),
  weldTypeCode: z.lazy(() => SortOrderSchema).optional(),
  baseMetal: z.lazy(() => SortOrderSchema).optional(),
  pwhtRequired: z.lazy(() => SortOrderSchema).optional(),
  datePwht: z.lazy(() => SortOrderSchema).optional(),
  ndeResult: z.lazy(() => SortOrderSchema).optional(),
  ndeDate: z.lazy(() => SortOrderSchema).optional(),
  turnoverDate: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldWeldSumOrderByAggregateInputSchema: z.ZodType<Prisma.FieldWeldSumOrderByAggregateInput> = z.object({
  xrayPercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessLeadCountOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessLeadCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  projectSize: z.lazy(() => SortOrderSchema).optional(),
  currentMethod: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  utmSource: z.lazy(() => SortOrderSchema).optional(),
  utmMedium: z.lazy(() => SortOrderSchema).optional(),
  utmCampaign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessLeadMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessLeadMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  projectSize: z.lazy(() => SortOrderSchema).optional(),
  currentMethod: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  utmSource: z.lazy(() => SortOrderSchema).optional(),
  utmMedium: z.lazy(() => SortOrderSchema).optional(),
  utmCampaign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessLeadMinOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessLeadMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  projectSize: z.lazy(() => SortOrderSchema).optional(),
  currentMethod: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  utmSource: z.lazy(() => SortOrderSchema).optional(),
  utmMedium: z.lazy(() => SortOrderSchema).optional(),
  utmCampaign: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasskeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutCreatorInputSchema),z.lazy(() => ProjectCreateWithoutCreatorInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentCreateNestedManyWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentCreateNestedManyWithoutInstallerInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutInstallerInputSchema),z.lazy(() => ComponentCreateWithoutInstallerInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyInstallerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateNestedManyWithoutCompleterInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyCompleterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImportJobCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ImportJobCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutUserInputSchema),z.lazy(() => ImportJobCreateWithoutUserInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateNestedManyWithoutGeneratorInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyGeneratorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsCreateNestedManyWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsCreateNestedManyWithoutRequesterInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyRequesterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutCreatorInputSchema),z.lazy(() => ProjectCreateWithoutCreatorInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateNestedManyWithoutInstallerInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutInstallerInputSchema),z.lazy(() => ComponentCreateWithoutInstallerInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyInstallerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyCompleterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImportJobUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutUserInputSchema),z.lazy(() => ImportJobCreateWithoutUserInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyGeneratorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyRequesterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasskeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutCreatorInputSchema),z.lazy(() => ProjectCreateWithoutCreatorInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUpdateManyWithoutInstallerNestedInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithoutInstallerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutInstallerInputSchema),z.lazy(() => ComponentCreateWithoutInstallerInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutInstallerInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutInstallerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyInstallerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutInstallerInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutInstallerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutInstallerInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutInstallerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyWithoutCompleterNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutCompleterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyCompleterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutCompleterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutCompleterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentMilestoneScalarWhereInputSchema),z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImportJobUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ImportJobUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutUserInputSchema),z.lazy(() => ImportJobCreateWithoutUserInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImportJobUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ImportJobUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImportJobScalarWhereInputSchema),z.lazy(() => ImportJobScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.ReportingCacheUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportingCacheScalarWhereInputSchema),z.lazy(() => ReportingCacheScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyWithoutGeneratorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutGeneratorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyGeneratorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutGeneratorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutGeneratorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyWithoutRequesterNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutRequesterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyRequesterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutRequesterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutRequesterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportGenerationsScalarWhereInputSchema),z.lazy(() => ReportGenerationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutCreatorInputSchema),z.lazy(() => ProjectCreateWithoutCreatorInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutInstallerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutInstallerInputSchema),z.lazy(() => ComponentCreateWithoutInstallerInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutInstallerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutInstallerInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutInstallerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyInstallerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutInstallerInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutInstallerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutInstallerInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutInstallerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutCompleterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyCompleterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutCompleterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutCompleterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentMilestoneScalarWhereInputSchema),z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutUserInputSchema),z.lazy(() => ImportJobCreateWithoutUserInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImportJobUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ImportJobUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImportJobScalarWhereInputSchema),z.lazy(() => ImportJobScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportingCacheScalarWhereInputSchema),z.lazy(() => ReportingCacheScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutGeneratorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyGeneratorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutGeneratorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutGeneratorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutRequesterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutRequesterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyRequesterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutRequesterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutRequesterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportGenerationsScalarWhereInputSchema),z.lazy(() => ReportGenerationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPasskeysInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneRequiredWithoutPasskeysNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPasskeysNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasskeysInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPasskeysInputSchema),z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTwofactorsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTwofactorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTwofactorsInputSchema),z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumPurchaseTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPurchaseTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PurchaseTypeSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutPurchasesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPurchasesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPurchasesInputSchema),z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutPurchasesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPurchasesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPurchasesInputSchema),z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutAiChatsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAiChatsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAiChatsInputSchema),z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutAiChatsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAiChatsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAiChatsInputSchema),z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProjectsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedProjectsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedProjectsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DrawingCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.DrawingCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutProjectInputSchema),z.lazy(() => DrawingCreateWithoutProjectInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ComponentCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutProjectInputSchema),z.lazy(() => ComponentCreateWithoutProjectInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MilestoneTemplateCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema).array(),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MilestoneTemplateCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImportJobCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutProjectInputSchema),z.lazy(() => ImportJobCreateWithoutProjectInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutProjectInputSchema),z.lazy(() => AuditLogCreateWithoutProjectInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WelderCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.WelderCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => WelderCreateWithoutProjectInputSchema),z.lazy(() => WelderCreateWithoutProjectInputSchema).array(),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema),z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WelderCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateWithoutProjectInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DrawingUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutProjectInputSchema),z.lazy(() => DrawingCreateWithoutProjectInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutProjectInputSchema),z.lazy(() => ComponentCreateWithoutProjectInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema).array(),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MilestoneTemplateCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutProjectInputSchema),z.lazy(() => ImportJobCreateWithoutProjectInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutProjectInputSchema),z.lazy(() => AuditLogCreateWithoutProjectInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WelderUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.WelderUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => WelderCreateWithoutProjectInputSchema),z.lazy(() => WelderCreateWithoutProjectInputSchema).array(),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema),z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WelderCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateWithoutProjectInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumProjectStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumProjectStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ProjectStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProjectsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProjectsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProjectsInputSchema),z.lazy(() => OrganizationUpdateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProjectsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedProjectsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedProjectsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedProjectsInputSchema),z.lazy(() => UserUpdateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedProjectsInputSchema) ]).optional(),
}).strict();

export const DrawingUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.DrawingUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutProjectInputSchema),z.lazy(() => DrawingCreateWithoutProjectInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DrawingUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => DrawingUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => DrawingUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DrawingUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => DrawingUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DrawingScalarWhereInputSchema),z.lazy(() => DrawingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutProjectInputSchema),z.lazy(() => ComponentCreateWithoutProjectInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema).array(),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MilestoneTemplateUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MilestoneTemplateCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MilestoneTemplateUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MilestoneTemplateUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MilestoneTemplateScalarWhereInputSchema),z.lazy(() => MilestoneTemplateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImportJobUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ImportJobUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutProjectInputSchema),z.lazy(() => ImportJobCreateWithoutProjectInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImportJobUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ImportJobUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImportJobScalarWhereInputSchema),z.lazy(() => ImportJobScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutProjectInputSchema),z.lazy(() => AuditLogCreateWithoutProjectInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ReportingCacheUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportingCacheScalarWhereInputSchema),z.lazy(() => ReportingCacheScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportGenerationsScalarWhereInputSchema),z.lazy(() => ReportGenerationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WelderUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.WelderUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => WelderCreateWithoutProjectInputSchema),z.lazy(() => WelderCreateWithoutProjectInputSchema).array(),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema),z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WelderUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => WelderUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WelderCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WelderUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => WelderUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WelderUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => WelderUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WelderScalarWhereInputSchema),z.lazy(() => WelderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateWithoutProjectInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutProjectInputSchema),z.lazy(() => DrawingCreateWithoutProjectInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DrawingUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => DrawingUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => DrawingUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DrawingUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => DrawingUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DrawingScalarWhereInputSchema),z.lazy(() => DrawingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutProjectInputSchema),z.lazy(() => ComponentCreateWithoutProjectInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema).array(),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MilestoneTemplateUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MilestoneTemplateCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MilestoneTemplateUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MilestoneTemplateUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MilestoneTemplateScalarWhereInputSchema),z.lazy(() => MilestoneTemplateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ImportJobCreateWithoutProjectInputSchema),z.lazy(() => ImportJobCreateWithoutProjectInputSchema).array(),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ImportJobCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ImportJobUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ImportJobCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ImportJobWhereUniqueInputSchema),z.lazy(() => ImportJobWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ImportJobUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ImportJobUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ImportJobUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ImportJobScalarWhereInputSchema),z.lazy(() => ImportJobScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutProjectInputSchema),z.lazy(() => AuditLogCreateWithoutProjectInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportingCacheCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportingCacheUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportingCacheCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportingCacheWhereUniqueInputSchema),z.lazy(() => ReportingCacheWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportingCacheUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ReportingCacheUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportingCacheScalarWhereInputSchema),z.lazy(() => ReportingCacheScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ROCConfigurationsCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema).array(),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ReportGenerationsCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportGenerationsCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportGenerationsWhereUniqueInputSchema),z.lazy(() => ReportGenerationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportGenerationsScalarWhereInputSchema),z.lazy(() => ReportGenerationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WelderUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.WelderUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => WelderCreateWithoutProjectInputSchema),z.lazy(() => WelderCreateWithoutProjectInputSchema).array(),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema),z.lazy(() => WelderCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WelderUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => WelderUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WelderCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WelderWhereUniqueInputSchema),z.lazy(() => WelderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WelderUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => WelderUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WelderUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => WelderUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WelderScalarWhereInputSchema),z.lazy(() => WelderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateWithoutProjectInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutDrawingsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutDrawingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutDrawingsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const DrawingCreateNestedOneWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingCreateNestedOneWithoutChildrenInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutChildrenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DrawingCreateOrConnectWithoutChildrenInputSchema).optional(),
  connect: z.lazy(() => DrawingWhereUniqueInputSchema).optional()
}).strict();

export const DrawingCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.DrawingCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutParentInputSchema),z.lazy(() => DrawingCreateWithoutParentInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentCreateNestedManyWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentCreateNestedManyWithoutDrawingInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutDrawingInputSchema),z.lazy(() => ComponentCreateWithoutDrawingInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyDrawingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldCreateNestedManyWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldCreateNestedManyWithoutDrawingInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyDrawingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DrawingUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutParentInputSchema),z.lazy(() => DrawingCreateWithoutParentInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedCreateNestedManyWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateNestedManyWithoutDrawingInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutDrawingInputSchema),z.lazy(() => ComponentCreateWithoutDrawingInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyDrawingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedCreateNestedManyWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateNestedManyWithoutDrawingInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyDrawingInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateOneRequiredWithoutDrawingsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutDrawingsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutDrawingsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutDrawingsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutDrawingsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutDrawingsInputSchema),z.lazy(() => ProjectUpdateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutDrawingsInputSchema) ]).optional(),
}).strict();

export const DrawingUpdateOneWithoutChildrenNestedInputSchema: z.ZodType<Prisma.DrawingUpdateOneWithoutChildrenNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutChildrenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DrawingCreateOrConnectWithoutChildrenInputSchema).optional(),
  upsert: z.lazy(() => DrawingUpsertWithoutChildrenInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => DrawingWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => DrawingWhereInputSchema) ]).optional(),
  connect: z.lazy(() => DrawingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateToOneWithWhereWithoutChildrenInputSchema),z.lazy(() => DrawingUpdateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutChildrenInputSchema) ]).optional(),
}).strict();

export const DrawingUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.DrawingUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutParentInputSchema),z.lazy(() => DrawingCreateWithoutParentInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DrawingUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => DrawingUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => DrawingUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DrawingUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => DrawingUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DrawingScalarWhereInputSchema),z.lazy(() => DrawingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUpdateManyWithoutDrawingNestedInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithoutDrawingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutDrawingInputSchema),z.lazy(() => ComponentCreateWithoutDrawingInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyDrawingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutDrawingInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutDrawingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUpdateManyWithoutDrawingNestedInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithoutDrawingNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyDrawingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutDrawingInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutDrawingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DrawingUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutParentInputSchema),z.lazy(() => DrawingCreateWithoutParentInputSchema).array(),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema),z.lazy(() => DrawingCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DrawingUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => DrawingUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DrawingCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DrawingWhereUniqueInputSchema),z.lazy(() => DrawingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => DrawingUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DrawingUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => DrawingUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DrawingScalarWhereInputSchema),z.lazy(() => DrawingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedUpdateManyWithoutDrawingNestedInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutDrawingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutDrawingInputSchema),z.lazy(() => ComponentCreateWithoutDrawingInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyDrawingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutDrawingInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutDrawingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutDrawingNestedInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutDrawingNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutDrawingInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyDrawingInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutDrawingInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutDrawingInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutDrawingInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutDrawingInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutMilestoneTemplatesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutMilestoneTemplatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutMilestoneTemplatesInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const ComponentCreateNestedManyWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentCreateNestedManyWithoutMilestoneTemplateInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyMilestoneTemplateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedCreateNestedManyWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateNestedManyWithoutMilestoneTemplateInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyMilestoneTemplateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateOneRequiredWithoutMilestoneTemplatesNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutMilestoneTemplatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutMilestoneTemplatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutMilestoneTemplatesInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutMilestoneTemplatesInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUpdateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutMilestoneTemplatesInputSchema) ]).optional(),
}).strict();

export const ComponentUpdateManyWithoutMilestoneTemplateNestedInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithoutMilestoneTemplateNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyMilestoneTemplateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentUncheckedUpdateManyWithoutMilestoneTemplateNestedInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutMilestoneTemplateNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema).array(),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentUpsertWithWhereUniqueWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUpsertWithWhereUniqueWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentCreateManyMilestoneTemplateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentWhereUniqueInputSchema),z.lazy(() => ComponentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateWithWhereUniqueWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUpdateWithWhereUniqueWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentUpdateManyWithWhereWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUpdateManyWithWhereWithoutMilestoneTemplateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutComponentsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutComponentsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const DrawingCreateNestedOneWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingCreateNestedOneWithoutComponentsInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DrawingCreateOrConnectWithoutComponentsInputSchema).optional(),
  connect: z.lazy(() => DrawingWhereUniqueInputSchema).optional()
}).strict();

export const MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateNestedOneWithoutComponentsInput> = z.object({
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MilestoneTemplateCreateOrConnectWithoutComponentsInputSchema).optional(),
  connect: z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInstalledComponentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInstalledComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInstalledComponentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ComponentMilestoneCreateNestedManyWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateNestedManyWithoutComponentInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyComponentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutComponentInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutComponentInputSchema),z.lazy(() => AuditLogCreateWithoutComponentInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyComponentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldCreateNestedManyWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldCreateNestedManyWithoutComponentInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateWithoutComponentInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyComponentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyComponentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutComponentInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutComponentInputSchema),z.lazy(() => AuditLogCreateWithoutComponentInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyComponentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateNestedManyWithoutComponentInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateWithoutComponentInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyComponentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumComponentTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumComponentTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ComponentTypeSchema).optional()
}).strict();

export const EnumWorkflowTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumWorkflowTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => WorkflowTypeSchema).optional()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumComponentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumComponentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ComponentStatusSchema).optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutComponentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutComponentsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutComponentsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutComponentsInputSchema),z.lazy(() => ProjectUpdateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutComponentsInputSchema) ]).optional(),
}).strict();

export const DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema: z.ZodType<Prisma.DrawingUpdateOneRequiredWithoutComponentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DrawingCreateOrConnectWithoutComponentsInputSchema).optional(),
  upsert: z.lazy(() => DrawingUpsertWithoutComponentsInputSchema).optional(),
  connect: z.lazy(() => DrawingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateToOneWithWhereWithoutComponentsInputSchema),z.lazy(() => DrawingUpdateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutComponentsInputSchema) ]).optional(),
}).strict();

export const MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MilestoneTemplateCreateOrConnectWithoutComponentsInputSchema).optional(),
  upsert: z.lazy(() => MilestoneTemplateUpsertWithoutComponentsInputSchema).optional(),
  connect: z.lazy(() => MilestoneTemplateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MilestoneTemplateUpdateToOneWithWhereWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUpdateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedUpdateWithoutComponentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutInstalledComponentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutInstalledComponentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInstalledComponentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInstalledComponentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInstalledComponentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInstalledComponentsInputSchema),z.lazy(() => UserUpdateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInstalledComponentsInputSchema) ]).optional(),
}).strict();

export const ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyWithoutComponentNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyComponentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutComponentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentMilestoneScalarWhereInputSchema),z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutComponentNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutComponentNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutComponentInputSchema),z.lazy(() => AuditLogCreateWithoutComponentInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyComponentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutComponentInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutComponentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUpdateManyWithoutComponentNestedInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithoutComponentNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateWithoutComponentInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyComponentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutComponentInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutComponentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema).array(),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUpsertWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ComponentMilestoneCreateManyComponentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),z.lazy(() => ComponentMilestoneWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUpdateWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUpdateManyWithWhereWithoutComponentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ComponentMilestoneScalarWhereInputSchema),z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutComponentNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutComponentInputSchema),z.lazy(() => AuditLogCreateWithoutComponentInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyComponentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutComponentInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutComponentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutComponentNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateWithoutComponentInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutComponentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyComponentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutComponentInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutComponentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutComponentInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutComponentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ComponentCreateNestedOneWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentCreateNestedOneWithoutMilestonesInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestonesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ComponentCreateOrConnectWithoutMilestonesInputSchema).optional(),
  connect: z.lazy(() => ComponentWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCompletedMilestonesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompletedMilestonesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCompletedMilestonesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ComponentUpdateOneRequiredWithoutMilestonesNestedInputSchema: z.ZodType<Prisma.ComponentUpdateOneRequiredWithoutMilestonesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestonesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ComponentCreateOrConnectWithoutMilestonesInputSchema).optional(),
  upsert: z.lazy(() => ComponentUpsertWithoutMilestonesInputSchema).optional(),
  connect: z.lazy(() => ComponentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateToOneWithWhereWithoutMilestonesInputSchema),z.lazy(() => ComponentUpdateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutMilestonesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutCompletedMilestonesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCompletedMilestonesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompletedMilestonesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCompletedMilestonesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCompletedMilestonesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUpdateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompletedMilestonesInputSchema) ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutImportJobsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutImportJobsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutImportJobsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutImportJobsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutImportJobsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedCreateWithoutImportJobsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutImportJobsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumImportStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumImportStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ImportStatusSchema).optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutImportJobsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutImportJobsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutImportJobsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutImportJobsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutImportJobsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutImportJobsInputSchema),z.lazy(() => ProjectUpdateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutImportJobsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutImportJobsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutImportJobsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedCreateWithoutImportJobsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutImportJobsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutImportJobsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutImportJobsInputSchema),z.lazy(() => UserUpdateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImportJobsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ComponentCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ComponentCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => ComponentWhereUniqueInputSchema).optional()
}).strict();

export const EnumAuditActionFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAuditActionFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AuditActionSchema).optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => ProjectUpdateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const ComponentUpdateOneWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.ComponentUpdateOneWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ComponentCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => ComponentUpsertWithoutAuditLogsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ComponentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ComponentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ComponentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => ComponentUpdateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutReportingCacheInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportingCacheInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutReportingCacheInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutReportingCacheCreatedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportingCacheCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReportingCacheCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutReportingCacheNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutReportingCacheNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportingCacheInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutReportingCacheInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutReportingCacheInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutReportingCacheInputSchema),z.lazy(() => ProjectUpdateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutReportingCacheInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutReportingCacheCreatedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutReportingCacheCreatedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportingCacheCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReportingCacheCreatedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutReportingCacheCreatedInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUpdateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportingCacheCreatedInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutRocConfigurationsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRocConfigurationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRocConfigurationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProjectCreateNestedOneWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutRocConfigurationsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutRocConfigurationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutRocConfigurationsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRocConfigsCreatedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRocConfigsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRocConfigsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProgressSnapshotsCreateNestedManyWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateNestedManyWithoutRocConfigInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyRocConfigInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedCreateNestedManyWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateNestedManyWithoutRocConfigInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyRocConfigInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutRocConfigurationsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutRocConfigurationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRocConfigurationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRocConfigurationsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutRocConfigurationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUpdateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRocConfigurationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateOneWithoutRocConfigurationsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneWithoutRocConfigurationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutRocConfigurationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutRocConfigurationsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutRocConfigurationsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUpdateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutRocConfigurationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutRocConfigsCreatedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutRocConfigsCreatedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRocConfigsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRocConfigsCreatedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRocConfigsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUpdateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRocConfigsCreatedInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsUpdateManyWithoutRocConfigNestedInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyWithoutRocConfigNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutRocConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyRocConfigInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutRocConfigInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutRocConfigInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigNestedInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema).array(),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUpsertWithWhereUniqueWithoutRocConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProgressSnapshotsCreateManyRocConfigInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUpdateWithWhereUniqueWithoutRocConfigInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUpdateManyWithWhereWithoutRocConfigInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutProgressSnapshotsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProgressSnapshotsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutProgressSnapshotsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSnapshotsGeneratedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedCreateWithoutSnapshotsGeneratedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSnapshotsGeneratedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ROCConfigurationsCreateNestedOneWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateNestedOneWithoutProgressSnapshotsInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProgressSnapshotsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProgressSnapshotsInputSchema).optional(),
  connect: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).optional()
}).strict();

export const DecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  increment: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  increment: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutProgressSnapshotsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutProgressSnapshotsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProgressSnapshotsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutProgressSnapshotsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutProgressSnapshotsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUpdateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutProgressSnapshotsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutSnapshotsGeneratedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutSnapshotsGeneratedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedCreateWithoutSnapshotsGeneratedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSnapshotsGeneratedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSnapshotsGeneratedInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUpdateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSnapshotsGeneratedInputSchema) ]).optional(),
}).strict();

export const ROCConfigurationsUpdateOneWithoutProgressSnapshotsNestedInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateOneWithoutProgressSnapshotsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProgressSnapshotsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ROCConfigurationsCreateOrConnectWithoutProgressSnapshotsInputSchema).optional(),
  upsert: z.lazy(() => ROCConfigurationsUpsertWithoutProgressSnapshotsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ROCConfigurationsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ROCConfigurationsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateToOneWithWhereWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUpdateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutProgressSnapshotsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutReportGenerationsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportGenerationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutReportGenerationsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutReportGenerationsRequestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportGenerationsRequestedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReportGenerationsRequestedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const NullableBigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional().nullable(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutReportGenerationsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutReportGenerationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportGenerationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutReportGenerationsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutReportGenerationsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUpdateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutReportGenerationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutReportGenerationsRequestedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutReportGenerationsRequestedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportGenerationsRequestedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReportGenerationsRequestedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutReportGenerationsRequestedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUpdateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportGenerationsRequestedInputSchema) ]).optional(),
}).strict();

export const FieldWeldCreateNestedManyWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldCreateNestedManyWithoutWeldTypeInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWeldTypeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedCreateNestedManyWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateNestedManyWithoutWeldTypeInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWeldTypeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUpdateManyWithoutWeldTypeNestedInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithoutWeldTypeNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWeldTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWeldTypeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWeldTypeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWeldTypeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutWeldTypeNestedInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutWeldTypeNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWeldTypeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWeldTypeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWeldTypeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWeldTypeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWeldTypeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutWeldersInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutWeldersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutWeldersInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const FieldWeldCreateNestedManyWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldCreateNestedManyWithoutWelderInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateWithoutWelderInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWelderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedCreateNestedManyWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateNestedManyWithoutWelderInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateWithoutWelderInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWelderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateOneRequiredWithoutWeldersNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutWeldersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutWeldersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutWeldersInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutWeldersInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutWeldersInputSchema),z.lazy(() => ProjectUpdateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutWeldersInputSchema) ]).optional(),
}).strict();

export const FieldWeldUpdateManyWithoutWelderNestedInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithoutWelderNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateWithoutWelderInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWelderInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWelderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWelderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWelderInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWelderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWelderInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWelderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutWelderNestedInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutWelderNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateWithoutWelderInputSchema).array(),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema),z.lazy(() => FieldWeldCreateOrConnectWithoutWelderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWelderInputSchema),z.lazy(() => FieldWeldUpsertWithWhereUniqueWithoutWelderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldWeldCreateManyWelderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldWeldWhereUniqueInputSchema),z.lazy(() => FieldWeldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWelderInputSchema),z.lazy(() => FieldWeldUpdateWithWhereUniqueWithoutWelderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWelderInputSchema),z.lazy(() => FieldWeldUpdateManyWithWhereWithoutWelderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldWeldCreatendeTypesInputSchema: z.ZodType<Prisma.FieldWeldCreatendeTypesInput> = z.object({
  set: z.string().array()
}).strict();

export const ProjectCreateNestedOneWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutFieldWeldsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const WelderCreateNestedOneWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderCreateNestedOneWithoutFieldWeldsInput> = z.object({
  create: z.union([ z.lazy(() => WelderCreateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WelderCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => WelderWhereUniqueInputSchema).optional()
}).strict();

export const DrawingCreateNestedOneWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingCreateNestedOneWithoutFieldWeldsInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DrawingCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => DrawingWhereUniqueInputSchema).optional()
}).strict();

export const WeldTypeCreateNestedOneWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeCreateNestedOneWithoutFieldWeldsInput> = z.object({
  create: z.union([ z.lazy(() => WeldTypeCreateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WeldTypeCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => WeldTypeWhereUniqueInputSchema).optional()
}).strict();

export const ComponentCreateNestedOneWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentCreateNestedOneWithoutFieldWeldsInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ComponentCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => ComponentWhereUniqueInputSchema).optional()
}).strict();

export const FieldWeldUpdatendeTypesInputSchema: z.ZodType<Prisma.FieldWeldUpdatendeTypesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ProjectUpdateOneRequiredWithoutFieldWeldsNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutFieldWeldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUpdateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutFieldWeldsInputSchema) ]).optional(),
}).strict();

export const WelderUpdateOneWithoutFieldWeldsNestedInputSchema: z.ZodType<Prisma.WelderUpdateOneWithoutFieldWeldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WelderCreateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WelderCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  upsert: z.lazy(() => WelderUpsertWithoutFieldWeldsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => WelderWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => WelderWhereInputSchema) ]).optional(),
  connect: z.lazy(() => WelderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WelderUpdateToOneWithWhereWithoutFieldWeldsInputSchema),z.lazy(() => WelderUpdateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedUpdateWithoutFieldWeldsInputSchema) ]).optional(),
}).strict();

export const DrawingUpdateOneRequiredWithoutFieldWeldsNestedInputSchema: z.ZodType<Prisma.DrawingUpdateOneRequiredWithoutFieldWeldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DrawingCreateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DrawingCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  upsert: z.lazy(() => DrawingUpsertWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => DrawingWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DrawingUpdateToOneWithWhereWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUpdateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutFieldWeldsInputSchema) ]).optional(),
}).strict();

export const WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInputSchema: z.ZodType<Prisma.WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WeldTypeCreateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WeldTypeCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  upsert: z.lazy(() => WeldTypeUpsertWithoutFieldWeldsInputSchema).optional(),
  connect: z.lazy(() => WeldTypeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WeldTypeUpdateToOneWithWhereWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUpdateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedUpdateWithoutFieldWeldsInputSchema) ]).optional(),
}).strict();

export const ComponentUpdateOneWithoutFieldWeldsNestedInputSchema: z.ZodType<Prisma.ComponentUpdateOneWithoutFieldWeldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ComponentCreateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutFieldWeldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ComponentCreateOrConnectWithoutFieldWeldsInputSchema).optional(),
  upsert: z.lazy(() => ComponentUpsertWithoutFieldWeldsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ComponentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ComponentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ComponentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ComponentUpdateToOneWithWhereWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUpdateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutFieldWeldsInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPurchaseTypeFilterSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPurchaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumProjectStatusFilterSchema: z.ZodType<Prisma.NestedEnumProjectStatusFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumProjectStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumProjectStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional()
}).strict();

export const NestedEnumComponentTypeFilterSchema: z.ZodType<Prisma.NestedEnumComponentTypeFilter> = z.object({
  equals: z.lazy(() => ComponentTypeSchema).optional(),
  in: z.lazy(() => ComponentTypeSchema).array().optional(),
  notIn: z.lazy(() => ComponentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => NestedEnumComponentTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumWorkflowTypeFilterSchema: z.ZodType<Prisma.NestedEnumWorkflowTypeFilter> = z.object({
  equals: z.lazy(() => WorkflowTypeSchema).optional(),
  in: z.lazy(() => WorkflowTypeSchema).array().optional(),
  notIn: z.lazy(() => WorkflowTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => NestedEnumWorkflowTypeFilterSchema) ]).optional(),
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumComponentStatusFilterSchema: z.ZodType<Prisma.NestedEnumComponentStatusFilter> = z.object({
  equals: z.lazy(() => ComponentStatusSchema).optional(),
  in: z.lazy(() => ComponentStatusSchema).array().optional(),
  notIn: z.lazy(() => ComponentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => NestedEnumComponentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedEnumComponentTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumComponentTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ComponentTypeSchema).optional(),
  in: z.lazy(() => ComponentTypeSchema).array().optional(),
  notIn: z.lazy(() => ComponentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => NestedEnumComponentTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumComponentTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumComponentTypeFilterSchema).optional()
}).strict();

export const NestedEnumWorkflowTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumWorkflowTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => WorkflowTypeSchema).optional(),
  in: z.lazy(() => WorkflowTypeSchema).array().optional(),
  notIn: z.lazy(() => WorkflowTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => NestedEnumWorkflowTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumWorkflowTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumWorkflowTypeFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedEnumComponentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumComponentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ComponentStatusSchema).optional(),
  in: z.lazy(() => ComponentStatusSchema).array().optional(),
  notIn: z.lazy(() => ComponentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => NestedEnumComponentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumComponentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumComponentStatusFilterSchema).optional()
}).strict();

export const NestedEnumImportStatusFilterSchema: z.ZodType<Prisma.NestedEnumImportStatusFilter> = z.object({
  equals: z.lazy(() => ImportStatusSchema).optional(),
  in: z.lazy(() => ImportStatusSchema).array().optional(),
  notIn: z.lazy(() => ImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => NestedEnumImportStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumImportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumImportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ImportStatusSchema).optional(),
  in: z.lazy(() => ImportStatusSchema).array().optional(),
  notIn: z.lazy(() => ImportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => NestedEnumImportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumImportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumImportStatusFilterSchema).optional()
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumAuditActionFilterSchema: z.ZodType<Prisma.NestedEnumAuditActionFilter> = z.object({
  equals: z.lazy(() => AuditActionSchema).optional(),
  in: z.lazy(() => AuditActionSchema).array().optional(),
  notIn: z.lazy(() => AuditActionSchema).array().optional(),
  not: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => NestedEnumAuditActionFilterSchema) ]).optional(),
}).strict();

export const NestedEnumAuditActionWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAuditActionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AuditActionSchema).optional(),
  in: z.lazy(() => AuditActionSchema).array().optional(),
  notIn: z.lazy(() => AuditActionSchema).array().optional(),
  not: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => NestedEnumAuditActionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAuditActionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAuditActionFilterSchema).optional()
}).strict();

export const NestedDecimalFilterSchema: z.ZodType<Prisma.NestedDecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalNullableFilterSchema: z.ZodType<Prisma.NestedDecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDecimalWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const NestedBigIntNullableFilterSchema: z.ZodType<Prisma.NestedBigIntNullableFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBigIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntNullableWithAggregatesFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntNullableFilterSchema).optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PasskeyCreateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PasskeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PasskeyCreateManyUserInputSchema),z.lazy(() => PasskeyCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const InvitationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyUserInputSchema),z.lazy(() => InvitationCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PurchaseCreateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PurchaseCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PurchaseCreateManyUserInputSchema),z.lazy(() => PurchaseCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyUserInputSchema),z.lazy(() => MemberCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TwoFactorCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TwoFactorCreateManyUserInputSchema),z.lazy(() => TwoFactorCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AiChatCreateWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AiChatCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AiChatCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AiChatCreateManyUserInputSchema),z.lazy(() => AiChatCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectCreateWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectCreateWithoutCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutCreatorInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const ProjectCreateManyCreatorInputEnvelopeSchema: z.ZodType<Prisma.ProjectCreateManyCreatorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProjectCreateManyCreatorInputSchema),z.lazy(() => ProjectCreateManyCreatorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ComponentCreateWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentCreateWithoutInstallerInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutInstallerInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutInstallerInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema) ]),
}).strict();

export const ComponentCreateManyInstallerInputEnvelopeSchema: z.ZodType<Prisma.ComponentCreateManyInstallerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ComponentCreateManyInstallerInputSchema),z.lazy(() => ComponentCreateManyInstallerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ComponentMilestoneCreateWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateWithoutCompleterInput> = z.object({
  id: z.string().cuid().optional(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  component: z.lazy(() => ComponentCreateNestedOneWithoutMilestonesInputSchema)
}).strict();

export const ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedCreateWithoutCompleterInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentMilestoneCreateOrConnectWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateOrConnectWithoutCompleterInput> = z.object({
  where: z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema) ]),
}).strict();

export const ComponentMilestoneCreateManyCompleterInputEnvelopeSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyCompleterInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ComponentMilestoneCreateManyCompleterInputSchema),z.lazy(() => ComponentMilestoneCreateManyCompleterInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ImportJobCreateWithoutUserInputSchema: z.ZodType<Prisma.ImportJobCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutImportJobsInputSchema)
}).strict();

export const ImportJobUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ImportJobCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ImportJobCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ImportJobWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ImportJobCreateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ImportJobCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ImportJobCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ImportJobCreateManyUserInputSchema),z.lazy(() => ImportJobCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuditLogCreateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutAuditLogsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  componentId: z.string().optional().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AuditLogCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AuditLogCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyUserInputSchema),z.lazy(() => AuditLogCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ReportingCacheCreateWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheCreateWithoutCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutReportingCacheInputSchema)
}).strict();

export const ReportingCacheUncheckedCreateWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedCreateWithoutCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable()
}).strict();

export const ReportingCacheCreateOrConnectWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheCreateOrConnectWithoutCreatorInput> = z.object({
  where: z.lazy(() => ReportingCacheWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const ReportingCacheCreateManyCreatorInputEnvelopeSchema: z.ZodType<Prisma.ReportingCacheCreateManyCreatorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReportingCacheCreateManyCreatorInputSchema),z.lazy(() => ReportingCacheCreateManyCreatorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ROCConfigurationsCreateWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateWithoutCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRocConfigurationsInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutRocConfigurationsInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateWithoutCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsCreateOrConnectWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateOrConnectWithoutCreatorInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const ROCConfigurationsCreateManyCreatorInputEnvelopeSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyCreatorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ROCConfigurationsCreateManyCreatorInputSchema),z.lazy(() => ROCConfigurationsCreateManyCreatorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProgressSnapshotsCreateWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateWithoutGeneratorInput> = z.object({
  id: z.string().cuid().optional(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generationMethod: z.string().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutProgressSnapshotsInputSchema),
  rocConfig: z.lazy(() => ROCConfigurationsCreateNestedOneWithoutProgressSnapshotsInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateWithoutGeneratorInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generationMethod: z.string().optional(),
  rocConfigId: z.string().optional().nullable()
}).strict();

export const ProgressSnapshotsCreateOrConnectWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateOrConnectWithoutGeneratorInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema) ]),
}).strict();

export const ProgressSnapshotsCreateManyGeneratorInputEnvelopeSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyGeneratorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProgressSnapshotsCreateManyGeneratorInputSchema),z.lazy(() => ProgressSnapshotsCreateManyGeneratorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ReportGenerationsCreateWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsCreateWithoutRequesterInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutReportGenerationsInputSchema)
}).strict();

export const ReportGenerationsUncheckedCreateWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedCreateWithoutRequesterInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable()
}).strict();

export const ReportGenerationsCreateOrConnectWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsCreateOrConnectWithoutRequesterInput> = z.object({
  where: z.lazy(() => ReportGenerationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema) ]),
}).strict();

export const ReportGenerationsCreateManyRequesterInputEnvelopeSchema: z.ZodType<Prisma.ReportGenerationsCreateManyRequesterInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReportGenerationsCreateManyRequesterInputSchema),z.lazy(() => ReportGenerationsCreateManyRequesterInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PasskeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PasskeyUpdateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PasskeyUpdateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PasskeyUpdateManyMutationInputSchema),z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PasskeyScalarWhereInputSchema: z.ZodType<Prisma.PasskeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const PurchaseUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurchaseUpdateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateManyMutationInputSchema),z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PurchaseScalarWhereInputSchema: z.ZodType<Prisma.PurchaseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const MemberScalarWhereInputSchema: z.ZodType<Prisma.MemberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateManyMutationInputSchema),z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorScalarWhereInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const AiChatUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AiChatUpdateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AiChatUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AiChatUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateManyMutationInputSchema),z.lazy(() => AiChatUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AiChatScalarWhereInputSchema: z.ZodType<Prisma.AiChatScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProjectUpsertWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUpsertWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutCreatorInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const ProjectUpdateWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUpdateWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutCreatorInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutCreatorInputSchema) ]),
}).strict();

export const ProjectUpdateManyWithWhereWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithWhereWithoutCreatorInput> = z.object({
  where: z.lazy(() => ProjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateManyMutationInputSchema),z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorInputSchema) ]),
}).strict();

export const ProjectScalarWhereInputSchema: z.ZodType<Prisma.ProjectScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  jobName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  jobNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  client: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  targetDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ComponentUpsertWithWhereUniqueWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUpsertWithWhereUniqueWithoutInstallerInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ComponentUpdateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutInstallerInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutInstallerInputSchema) ]),
}).strict();

export const ComponentUpdateWithWhereUniqueWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUpdateWithWhereUniqueWithoutInstallerInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutInstallerInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutInstallerInputSchema) ]),
}).strict();

export const ComponentUpdateManyWithWhereWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithWhereWithoutInstallerInput> = z.object({
  where: z.lazy(() => ComponentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateManyMutationInputSchema),z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerInputSchema) ]),
}).strict();

export const ComponentScalarWhereInputSchema: z.ZodType<Prisma.ComponentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentScalarWhereInputSchema),z.lazy(() => ComponentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  drawingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneTemplateId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  instanceNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  totalInstancesOnDrawing: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  displayId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumComponentTypeFilterSchema),z.lazy(() => ComponentTypeSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => EnumWorkflowTypeFilterSchema),z.lazy(() => WorkflowTypeSchema) ]).optional(),
  spec: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  material: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  pressureRating: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  area: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  system: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  testPackage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  testPressure: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  testRequired: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  totalLength: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lengthUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  totalQuantity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  completionPercent: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumComponentStatusFilterSchema),z.lazy(() => ComponentStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  installationDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  installerUserId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ComponentMilestoneUpsertWithWhereUniqueWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUpsertWithWhereUniqueWithoutCompleterInput> = z.object({
  where: z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ComponentMilestoneUpdateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedUpdateWithoutCompleterInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutCompleterInputSchema) ]),
}).strict();

export const ComponentMilestoneUpdateWithWhereUniqueWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateWithWhereUniqueWithoutCompleterInput> = z.object({
  where: z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ComponentMilestoneUpdateWithoutCompleterInputSchema),z.lazy(() => ComponentMilestoneUncheckedUpdateWithoutCompleterInputSchema) ]),
}).strict();

export const ComponentMilestoneUpdateManyWithWhereWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyWithWhereWithoutCompleterInput> = z.object({
  where: z.lazy(() => ComponentMilestoneScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ComponentMilestoneUpdateManyMutationInputSchema),z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterInputSchema) ]),
}).strict();

export const ComponentMilestoneScalarWhereInputSchema: z.ZodType<Prisma.ComponentMilestoneScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ComponentMilestoneScalarWhereInputSchema),z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ComponentMilestoneScalarWhereInputSchema),z.lazy(() => ComponentMilestoneScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  milestoneOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  weight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isCompleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  percentageValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  quantityUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  effectiveDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ImportJobUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ImportJobWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ImportJobUpdateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ImportJobCreateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ImportJobUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ImportJobWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ImportJobUpdateWithoutUserInputSchema),z.lazy(() => ImportJobUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ImportJobUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ImportJobScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ImportJobUpdateManyMutationInputSchema),z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const ImportJobScalarWhereInputSchema: z.ZodType<Prisma.ImportJobScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ImportJobScalarWhereInputSchema),z.lazy(() => ImportJobScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ImportJobScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ImportJobScalarWhereInputSchema),z.lazy(() => ImportJobScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filename: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  originalPath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumImportStatusFilterSchema),z.lazy(() => ImportStatusSchema) ]).optional(),
  totalRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  processedRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  errorRows: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  errors: z.lazy(() => JsonNullableFilterSchema).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AuditLogScalarWhereInputSchema: z.ZodType<Prisma.AuditLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  componentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  entityType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entityId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => EnumAuditActionFilterSchema),z.lazy(() => AuditActionSchema) ]).optional(),
  changes: z.lazy(() => JsonFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReportingCacheUpsertWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUpsertWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => ReportingCacheWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReportingCacheUpdateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedUpdateWithoutCreatorInputSchema) ]),
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const ReportingCacheUpdateWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUpdateWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => ReportingCacheWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReportingCacheUpdateWithoutCreatorInputSchema),z.lazy(() => ReportingCacheUncheckedUpdateWithoutCreatorInputSchema) ]),
}).strict();

export const ReportingCacheUpdateManyWithWhereWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUpdateManyWithWhereWithoutCreatorInput> = z.object({
  where: z.lazy(() => ReportingCacheScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReportingCacheUpdateManyMutationInputSchema),z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorInputSchema) ]),
}).strict();

export const ReportingCacheScalarWhereInputSchema: z.ZodType<Prisma.ReportingCacheScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReportingCacheScalarWhereInputSchema),z.lazy(() => ReportingCacheScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportingCacheScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportingCacheScalarWhereInputSchema),z.lazy(() => ReportingCacheScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cacheKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  result: z.lazy(() => JsonFilterSchema).optional(),
  calculatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  rowCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ROCConfigurationsUpsertWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUpsertWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutCreatorInputSchema) ]),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutCreatorInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutCreatorInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateManyWithWhereWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyWithWhereWithoutCreatorInput> = z.object({
  where: z.lazy(() => ROCConfigurationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateManyMutationInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorInputSchema) ]),
}).strict();

export const ROCConfigurationsScalarWhereInputSchema: z.ZodType<Prisma.ROCConfigurationsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ROCConfigurationsScalarWhereInputSchema),z.lazy(() => ROCConfigurationsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  componentType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  milestoneWeights: z.lazy(() => JsonFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  effectiveDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ProgressSnapshotsUpsertWithWhereUniqueWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpsertWithWhereUniqueWithoutGeneratorInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateWithoutGeneratorInputSchema) ]),
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutGeneratorInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpdateWithWhereUniqueWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateWithWhereUniqueWithoutGeneratorInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithoutGeneratorInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateWithoutGeneratorInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpdateManyWithWhereWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyWithWhereWithoutGeneratorInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyMutationInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorInputSchema) ]),
}).strict();

export const ProgressSnapshotsScalarWhereInputSchema: z.ZodType<Prisma.ProgressSnapshotsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),z.lazy(() => ProgressSnapshotsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  snapshotDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  snapshotTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  totalComponents: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  completedComponents: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  overallCompletionPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rocWeightedPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  areaBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  systemBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  testPackageBreakdown: z.lazy(() => JsonFilterSchema).optional(),
  dailyVelocity: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  milestoneVelocity: z.lazy(() => JsonFilterSchema).optional(),
  stalledComponents7d: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stalledComponents14d: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stalledComponents21d: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  calculationDuration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  generationMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rocConfigId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ReportGenerationsUpsertWithWhereUniqueWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUpsertWithWhereUniqueWithoutRequesterInput> = z.object({
  where: z.lazy(() => ReportGenerationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReportGenerationsUpdateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedUpdateWithoutRequesterInputSchema) ]),
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutRequesterInputSchema) ]),
}).strict();

export const ReportGenerationsUpdateWithWhereUniqueWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateWithWhereUniqueWithoutRequesterInput> = z.object({
  where: z.lazy(() => ReportGenerationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReportGenerationsUpdateWithoutRequesterInputSchema),z.lazy(() => ReportGenerationsUncheckedUpdateWithoutRequesterInputSchema) ]),
}).strict();

export const ReportGenerationsUpdateManyWithWhereWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyWithWhereWithoutRequesterInput> = z.object({
  where: z.lazy(() => ReportGenerationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReportGenerationsUpdateManyMutationInputSchema),z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterInputSchema) ]),
}).strict();

export const ReportGenerationsScalarWhereInputSchema: z.ZodType<Prisma.ReportGenerationsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReportGenerationsScalarWhereInputSchema),z.lazy(() => ReportGenerationsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportGenerationsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportGenerationsScalarWhereInputSchema),z.lazy(() => ReportGenerationsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requestedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  outputFormat: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deliveryMethod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  resultRowCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  resultSize: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  downloadUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  downloadExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  errorDetails: z.lazy(() => JsonNullableFilterSchema).optional(),
  cacheHit: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  dbQueryTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  exportTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  memoryUsage: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateWithoutPasskeysInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPasskeysInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]),
}).strict();

export const UserUpsertWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpsertWithoutPasskeysInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]),
}).strict();

export const UserUpdateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpdateWithoutPasskeysInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPasskeysInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateWithoutTwofactorsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTwofactorsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpsertWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpsertWithoutTwofactorsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const MemberCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyOrganizationInputSchema),z.lazy(() => MemberCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyOrganizationInputSchema),z.lazy(() => InvitationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PurchaseCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PurchaseCreateManyOrganizationInputSchema),z.lazy(() => PurchaseCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AiChatCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AiChatCreateManyOrganizationInputSchema),z.lazy(() => AiChatCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProjectCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProjectCreateManyOrganizationInputSchema),z.lazy(() => ProjectCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ROCConfigurationsCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutRocConfigurationsInputSchema).optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutRocConfigsCreatedInputSchema),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ROCConfigurationsCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ROCConfigurationsCreateManyOrganizationInputSchema),z.lazy(() => ROCConfigurationsCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurchaseUpdateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateManyMutationInputSchema),z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AiChatUpdateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateManyMutationInputSchema),z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateManyMutationInputSchema),z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ROCConfigurationsUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutOrganizationInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ROCConfigurationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateManyMutationInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const UserCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutMembersInputSchema: z.ZodType<Prisma.UserUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const UserUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]),
}).strict();

export const UserCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPurchasesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpsertWithoutPurchasesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]),
}).strict();

export const UserUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]),
}).strict();

export const UserCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAiChatsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAiChatsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProjectsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProjectsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const UserCreateWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedProjectsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedProjectsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedProjectsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedProjectsInputSchema) ]),
}).strict();

export const DrawingCreateWithoutProjectInputSchema: z.ZodType<Prisma.DrawingCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  parent: z.lazy(() => DrawingCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => DrawingCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  children: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.DrawingCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DrawingCreateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const DrawingCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.DrawingCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DrawingCreateManyProjectInputSchema),z.lazy(() => DrawingCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ComponentCreateWithoutProjectInputSchema: z.ZodType<Prisma.ComponentCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ComponentCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ComponentCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ComponentCreateManyProjectInputSchema),z.lazy(() => ComponentCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MilestoneTemplateCreateWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutMilestoneTemplateInputSchema).optional()
}).strict();

export const MilestoneTemplateUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutMilestoneTemplateInputSchema).optional()
}).strict();

export const MilestoneTemplateCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const MilestoneTemplateCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.MilestoneTemplateCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MilestoneTemplateCreateManyProjectInputSchema),z.lazy(() => MilestoneTemplateCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ImportJobCreateWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutImportJobsInputSchema)
}).strict();

export const ImportJobUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ImportJobCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ImportJobWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ImportJobCreateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ImportJobCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ImportJobCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ImportJobCreateManyProjectInputSchema),z.lazy(() => ImportJobCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuditLogCreateWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  componentId: z.string().optional().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AuditLogCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const AuditLogCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyProjectInputSchema),z.lazy(() => AuditLogCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ReportingCacheCreateWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  creator: z.lazy(() => UserCreateNestedOneWithoutReportingCacheCreatedInputSchema).optional()
}).strict();

export const ReportingCacheUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const ReportingCacheCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportingCacheWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ReportingCacheCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ReportingCacheCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReportingCacheCreateManyProjectInputSchema),z.lazy(() => ReportingCacheCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ROCConfigurationsCreateWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRocConfigurationsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutRocConfigsCreatedInputSchema),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutRocConfigInputSchema).optional()
}).strict();

export const ROCConfigurationsCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ROCConfigurationsCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ROCConfigurationsCreateManyProjectInputSchema),z.lazy(() => ROCConfigurationsCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProgressSnapshotsCreateWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generationMethod: z.string().optional(),
  generator: z.lazy(() => UserCreateNestedOneWithoutSnapshotsGeneratedInputSchema).optional(),
  rocConfig: z.lazy(() => ROCConfigurationsCreateNestedOneWithoutProgressSnapshotsInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  generationMethod: z.string().optional(),
  rocConfigId: z.string().optional().nullable()
}).strict();

export const ProgressSnapshotsCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProgressSnapshotsCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProgressSnapshotsCreateManyProjectInputSchema),z.lazy(() => ProgressSnapshotsCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ReportGenerationsCreateWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable(),
  requester: z.lazy(() => UserCreateNestedOneWithoutReportGenerationsRequestedInputSchema)
}).strict();

export const ReportGenerationsUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable()
}).strict();

export const ReportGenerationsCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportGenerationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ReportGenerationsCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ReportGenerationsCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReportGenerationsCreateManyProjectInputSchema),z.lazy(() => ReportGenerationsCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WelderCreateWithoutProjectInputSchema: z.ZodType<Prisma.WelderCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutWelderInputSchema).optional()
}).strict();

export const WelderUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.WelderUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutWelderInputSchema).optional()
}).strict();

export const WelderCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.WelderCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => WelderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WelderCreateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const WelderCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.WelderCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WelderCreateManyProjectInputSchema),z.lazy(() => WelderCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldWeldCreateWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  welder: z.lazy(() => WelderCreateNestedOneWithoutFieldWeldsInputSchema).optional(),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutFieldWeldsInputSchema),
  weldType: z.lazy(() => WeldTypeCreateNestedOneWithoutFieldWeldsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutFieldWeldsInputSchema).optional()
}).strict();

export const FieldWeldUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const FieldWeldCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.FieldWeldCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FieldWeldCreateManyProjectInputSchema),z.lazy(() => FieldWeldCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProjectsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProjectsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProjectsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedProjectsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedProjectsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedProjectsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedProjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedProjectsInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedProjectsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedProjectsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedProjectsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const DrawingUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DrawingUpdateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => DrawingCreateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const DrawingUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DrawingUpdateWithoutProjectInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const DrawingUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => DrawingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DrawingUpdateManyMutationInputSchema),z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const DrawingScalarWhereInputSchema: z.ZodType<Prisma.DrawingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DrawingScalarWhereInputSchema),z.lazy(() => DrawingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DrawingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DrawingScalarWhereInputSchema),z.lazy(() => DrawingScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  number: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  revision: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parentId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filePath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ComponentUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ComponentUpdateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ComponentUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutProjectInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ComponentUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ComponentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateManyMutationInputSchema),z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const MilestoneTemplateUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MilestoneTemplateUpdateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const MilestoneTemplateUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MilestoneTemplateUpdateWithoutProjectInputSchema),z.lazy(() => MilestoneTemplateUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const MilestoneTemplateUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => MilestoneTemplateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MilestoneTemplateUpdateManyMutationInputSchema),z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const MilestoneTemplateScalarWhereInputSchema: z.ZodType<Prisma.MilestoneTemplateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MilestoneTemplateScalarWhereInputSchema),z.lazy(() => MilestoneTemplateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MilestoneTemplateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MilestoneTemplateScalarWhereInputSchema),z.lazy(() => MilestoneTemplateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  milestones: z.lazy(() => JsonFilterSchema).optional(),
  isDefault: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  usageCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ImportJobUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ImportJobWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ImportJobUpdateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ImportJobCreateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ImportJobUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ImportJobWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ImportJobUpdateWithoutProjectInputSchema),z.lazy(() => ImportJobUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ImportJobUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ImportJobScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ImportJobUpdateManyMutationInputSchema),z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutProjectInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ReportingCacheUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportingCacheWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReportingCacheUpdateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ReportingCacheCreateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ReportingCacheUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportingCacheWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReportingCacheUpdateWithoutProjectInputSchema),z.lazy(() => ReportingCacheUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ReportingCacheUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportingCacheScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReportingCacheUpdateManyMutationInputSchema),z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ROCConfigurationsUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutProjectInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ROCConfigurationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateManyMutationInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithoutProjectInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyMutationInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ReportGenerationsUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportGenerationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReportGenerationsUpdateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ReportGenerationsCreateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ReportGenerationsUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportGenerationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReportGenerationsUpdateWithoutProjectInputSchema),z.lazy(() => ReportGenerationsUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ReportGenerationsUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ReportGenerationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReportGenerationsUpdateManyMutationInputSchema),z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const WelderUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.WelderUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => WelderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WelderUpdateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => WelderCreateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const WelderUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.WelderUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => WelderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WelderUpdateWithoutProjectInputSchema),z.lazy(() => WelderUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const WelderUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.WelderUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => WelderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WelderUpdateManyMutationInputSchema),z.lazy(() => WelderUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const WelderScalarWhereInputSchema: z.ZodType<Prisma.WelderScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WelderScalarWhereInputSchema),z.lazy(() => WelderScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WelderScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WelderScalarWhereInputSchema),z.lazy(() => WelderScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  stencil: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FieldWeldUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const FieldWeldUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateWithoutProjectInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const FieldWeldUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => FieldWeldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateManyMutationInputSchema),z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const FieldWeldScalarWhereInputSchema: z.ZodType<Prisma.FieldWeldScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldWeldScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldWeldScalarWhereInputSchema),z.lazy(() => FieldWeldScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldIdNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  welderId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dateWelded: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  drawingId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  packageNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testPressure: z.lazy(() => JsonFilterSchema).optional(),
  specCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tieInNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  xrayPercent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  weldSize: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  schedule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weldTypeCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  baseMetal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  pwhtRequired: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  datePwht: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  ndeTypes: z.lazy(() => StringNullableListFilterSchema).optional(),
  ndeResult: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ndeDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  turnoverDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProjectCreateWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutDrawingsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutDrawingsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutDrawingsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutDrawingsInputSchema) ]),
}).strict();

export const DrawingCreateWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingCreateWithoutChildrenInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutDrawingsInputSchema),
  parent: z.lazy(() => DrawingCreateNestedOneWithoutChildrenInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUncheckedCreateWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateWithoutChildrenInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingCreateOrConnectWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingCreateOrConnectWithoutChildrenInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DrawingCreateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutChildrenInputSchema) ]),
}).strict();

export const DrawingCreateWithoutParentInputSchema: z.ZodType<Prisma.DrawingCreateWithoutParentInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutDrawingsInputSchema),
  children: z.lazy(() => DrawingCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUncheckedCreateWithoutParentInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateWithoutParentInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  children: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutDrawingInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingCreateOrConnectWithoutParentInputSchema: z.ZodType<Prisma.DrawingCreateOrConnectWithoutParentInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DrawingCreateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const DrawingCreateManyParentInputEnvelopeSchema: z.ZodType<Prisma.DrawingCreateManyParentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DrawingCreateManyParentInputSchema),z.lazy(() => DrawingCreateManyParentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ComponentCreateWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentCreateWithoutDrawingInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutDrawingInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutDrawingInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema) ]),
}).strict();

export const ComponentCreateManyDrawingInputEnvelopeSchema: z.ZodType<Prisma.ComponentCreateManyDrawingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ComponentCreateManyDrawingInputSchema),z.lazy(() => ComponentCreateManyDrawingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldWeldCreateWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldCreateWithoutDrawingInput> = z.object({
  id: z.string().cuid().optional(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutFieldWeldsInputSchema),
  welder: z.lazy(() => WelderCreateNestedOneWithoutFieldWeldsInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeCreateNestedOneWithoutFieldWeldsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutFieldWeldsInputSchema).optional()
}).strict();

export const FieldWeldUncheckedCreateWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateWithoutDrawingInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateOrConnectWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldCreateOrConnectWithoutDrawingInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema) ]),
}).strict();

export const FieldWeldCreateManyDrawingInputEnvelopeSchema: z.ZodType<Prisma.FieldWeldCreateManyDrawingInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FieldWeldCreateManyDrawingInputSchema),z.lazy(() => FieldWeldCreateManyDrawingInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectUpsertWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutDrawingsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutDrawingsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutDrawingsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutDrawingsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutDrawingsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutDrawingsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutDrawingsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutDrawingsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutDrawingsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const DrawingUpsertWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingUpsertWithoutChildrenInput> = z.object({
  update: z.union([ z.lazy(() => DrawingUpdateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutChildrenInputSchema) ]),
  create: z.union([ z.lazy(() => DrawingCreateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutChildrenInputSchema) ]),
  where: z.lazy(() => DrawingWhereInputSchema).optional()
}).strict();

export const DrawingUpdateToOneWithWhereWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingUpdateToOneWithWhereWithoutChildrenInput> = z.object({
  where: z.lazy(() => DrawingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DrawingUpdateWithoutChildrenInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutChildrenInputSchema) ]),
}).strict();

export const DrawingUpdateWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingUpdateWithoutChildrenInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutDrawingsNestedInputSchema).optional(),
  parent: z.lazy(() => DrawingUpdateOneWithoutChildrenNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateWithoutChildrenInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateWithoutChildrenInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.DrawingUpsertWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DrawingUpdateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutParentInputSchema) ]),
  create: z.union([ z.lazy(() => DrawingCreateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const DrawingUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.DrawingUpdateWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DrawingUpdateWithoutParentInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutParentInputSchema) ]),
}).strict();

export const DrawingUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<Prisma.DrawingUpdateManyWithWhereWithoutParentInput> = z.object({
  where: z.lazy(() => DrawingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DrawingUpdateManyMutationInputSchema),z.lazy(() => DrawingUncheckedUpdateManyWithoutParentInputSchema) ]),
}).strict();

export const ComponentUpsertWithWhereUniqueWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUpsertWithWhereUniqueWithoutDrawingInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ComponentUpdateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutDrawingInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutDrawingInputSchema) ]),
}).strict();

export const ComponentUpdateWithWhereUniqueWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUpdateWithWhereUniqueWithoutDrawingInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutDrawingInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutDrawingInputSchema) ]),
}).strict();

export const ComponentUpdateManyWithWhereWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithWhereWithoutDrawingInput> = z.object({
  where: z.lazy(() => ComponentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateManyMutationInputSchema),z.lazy(() => ComponentUncheckedUpdateManyWithoutDrawingInputSchema) ]),
}).strict();

export const FieldWeldUpsertWithWhereUniqueWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUpsertWithWhereUniqueWithoutDrawingInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutDrawingInputSchema) ]),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutDrawingInputSchema) ]),
}).strict();

export const FieldWeldUpdateWithWhereUniqueWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithWhereUniqueWithoutDrawingInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateWithoutDrawingInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutDrawingInputSchema) ]),
}).strict();

export const FieldWeldUpdateManyWithWhereWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithWhereWithoutDrawingInput> = z.object({
  where: z.lazy(() => FieldWeldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateManyMutationInputSchema),z.lazy(() => FieldWeldUncheckedUpdateManyWithoutDrawingInputSchema) ]),
}).strict();

export const ProjectCreateWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectCreateWithoutMilestoneTemplatesInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutMilestoneTemplatesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutMilestoneTemplatesInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutMilestoneTemplatesInputSchema) ]),
}).strict();

export const ComponentCreateWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentCreateWithoutMilestoneTemplateInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutMilestoneTemplateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutMilestoneTemplateInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema) ]),
}).strict();

export const ComponentCreateManyMilestoneTemplateInputEnvelopeSchema: z.ZodType<Prisma.ComponentCreateManyMilestoneTemplateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ComponentCreateManyMilestoneTemplateInputSchema),z.lazy(() => ComponentCreateManyMilestoneTemplateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectUpsertWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutMilestoneTemplatesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutMilestoneTemplatesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutMilestoneTemplatesInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutMilestoneTemplatesInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutMilestoneTemplatesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutMilestoneTemplatesInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutMilestoneTemplatesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutMilestoneTemplatesInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutMilestoneTemplatesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ComponentUpsertWithWhereUniqueWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUpsertWithWhereUniqueWithoutMilestoneTemplateInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ComponentUpdateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutMilestoneTemplateInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestoneTemplateInputSchema) ]),
}).strict();

export const ComponentUpdateWithWhereUniqueWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUpdateWithWhereUniqueWithoutMilestoneTemplateInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutMilestoneTemplateInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutMilestoneTemplateInputSchema) ]),
}).strict();

export const ComponentUpdateManyWithWhereWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUpdateManyWithWhereWithoutMilestoneTemplateInput> = z.object({
  where: z.lazy(() => ComponentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ComponentUpdateManyMutationInputSchema),z.lazy(() => ComponentUncheckedUpdateManyWithoutMilestoneTemplateInputSchema) ]),
}).strict();

export const ProjectCreateWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutComponentsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutComponentsInputSchema) ]),
}).strict();

export const DrawingCreateWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingCreateWithoutComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutDrawingsInputSchema),
  parent: z.lazy(() => DrawingCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => DrawingCreateNestedManyWithoutParentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUncheckedCreateWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateWithoutComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  children: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingCreateOrConnectWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingCreateOrConnectWithoutComponentsInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DrawingCreateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutComponentsInputSchema) ]),
}).strict();

export const MilestoneTemplateCreateWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateWithoutComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutMilestoneTemplatesInputSchema)
}).strict();

export const MilestoneTemplateUncheckedCreateWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedCreateWithoutComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MilestoneTemplateCreateOrConnectWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateOrConnectWithoutComponentsInput> = z.object({
  where: z.lazy(() => MilestoneTemplateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutComponentsInputSchema) ]),
}).strict();

export const UserCreateWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserCreateWithoutInstalledComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInstalledComponentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInstalledComponentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInstalledComponentsInputSchema) ]),
}).strict();

export const ComponentMilestoneCreateWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateWithoutComponentInput> = z.object({
  id: z.string().cuid().optional(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  completer: z.lazy(() => UserCreateNestedOneWithoutCompletedMilestonesInputSchema).optional()
}).strict();

export const ComponentMilestoneUncheckedCreateWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedCreateWithoutComponentInput> = z.object({
  id: z.string().cuid().optional(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  completedBy: z.string().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentMilestoneCreateOrConnectWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateOrConnectWithoutComponentInput> = z.object({
  where: z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema) ]),
}).strict();

export const ComponentMilestoneCreateManyComponentInputEnvelopeSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyComponentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ComponentMilestoneCreateManyComponentInputSchema),z.lazy(() => ComponentMilestoneCreateManyComponentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuditLogCreateWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutComponentInput> = z.object({
  id: z.string().cuid().optional(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutAuditLogsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema)
}).strict();

export const AuditLogUncheckedCreateWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutComponentInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  userId: z.string(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AuditLogCreateOrConnectWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutComponentInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema) ]),
}).strict();

export const AuditLogCreateManyComponentInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyComponentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyComponentInputSchema),z.lazy(() => AuditLogCreateManyComponentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldWeldCreateWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldCreateWithoutComponentInput> = z.object({
  id: z.string().cuid().optional(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutFieldWeldsInputSchema),
  welder: z.lazy(() => WelderCreateNestedOneWithoutFieldWeldsInputSchema).optional(),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutFieldWeldsInputSchema),
  weldType: z.lazy(() => WeldTypeCreateNestedOneWithoutFieldWeldsInputSchema)
}).strict();

export const FieldWeldUncheckedCreateWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateWithoutComponentInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateOrConnectWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldCreateOrConnectWithoutComponentInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema) ]),
}).strict();

export const FieldWeldCreateManyComponentInputEnvelopeSchema: z.ZodType<Prisma.FieldWeldCreateManyComponentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FieldWeldCreateManyComponentInputSchema),z.lazy(() => FieldWeldCreateManyComponentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectUpsertWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutComponentsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutComponentsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutComponentsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutComponentsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutComponentsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutComponentsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutComponentsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const DrawingUpsertWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingUpsertWithoutComponentsInput> = z.object({
  update: z.union([ z.lazy(() => DrawingUpdateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutComponentsInputSchema) ]),
  create: z.union([ z.lazy(() => DrawingCreateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutComponentsInputSchema) ]),
  where: z.lazy(() => DrawingWhereInputSchema).optional()
}).strict();

export const DrawingUpdateToOneWithWhereWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingUpdateToOneWithWhereWithoutComponentsInput> = z.object({
  where: z.lazy(() => DrawingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DrawingUpdateWithoutComponentsInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutComponentsInputSchema) ]),
}).strict();

export const DrawingUpdateWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingUpdateWithoutComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutDrawingsNestedInputSchema).optional(),
  parent: z.lazy(() => DrawingUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => DrawingUpdateManyWithoutParentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateWithoutComponentsInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateWithoutComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.lazy(() => DrawingUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const MilestoneTemplateUpsertWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateUpsertWithoutComponentsInput> = z.object({
  update: z.union([ z.lazy(() => MilestoneTemplateUpdateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedUpdateWithoutComponentsInputSchema) ]),
  create: z.union([ z.lazy(() => MilestoneTemplateCreateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedCreateWithoutComponentsInputSchema) ]),
  where: z.lazy(() => MilestoneTemplateWhereInputSchema).optional()
}).strict();

export const MilestoneTemplateUpdateToOneWithWhereWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateToOneWithWhereWithoutComponentsInput> = z.object({
  where: z.lazy(() => MilestoneTemplateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MilestoneTemplateUpdateWithoutComponentsInputSchema),z.lazy(() => MilestoneTemplateUncheckedUpdateWithoutComponentsInputSchema) ]),
}).strict();

export const MilestoneTemplateUpdateWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateWithoutComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutMilestoneTemplatesNestedInputSchema).optional()
}).strict();

export const MilestoneTemplateUncheckedUpdateWithoutComponentsInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedUpdateWithoutComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpsertWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInstalledComponentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInstalledComponentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInstalledComponentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInstalledComponentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInstalledComponentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInstalledComponentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInstalledComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInstalledComponentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInstalledComponentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const ComponentMilestoneUpsertWithWhereUniqueWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUpsertWithWhereUniqueWithoutComponentInput> = z.object({
  where: z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ComponentMilestoneUpdateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedUpdateWithoutComponentInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentMilestoneCreateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedCreateWithoutComponentInputSchema) ]),
}).strict();

export const ComponentMilestoneUpdateWithWhereUniqueWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateWithWhereUniqueWithoutComponentInput> = z.object({
  where: z.lazy(() => ComponentMilestoneWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ComponentMilestoneUpdateWithoutComponentInputSchema),z.lazy(() => ComponentMilestoneUncheckedUpdateWithoutComponentInputSchema) ]),
}).strict();

export const ComponentMilestoneUpdateManyWithWhereWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyWithWhereWithoutComponentInput> = z.object({
  where: z.lazy(() => ComponentMilestoneScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ComponentMilestoneUpdateManyMutationInputSchema),z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentInputSchema) ]),
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutComponentInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutComponentInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutComponentInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutComponentInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutComponentInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutComponentInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutComponentInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentInputSchema) ]),
}).strict();

export const FieldWeldUpsertWithWhereUniqueWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUpsertWithWhereUniqueWithoutComponentInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutComponentInputSchema) ]),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutComponentInputSchema) ]),
}).strict();

export const FieldWeldUpdateWithWhereUniqueWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithWhereUniqueWithoutComponentInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateWithoutComponentInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutComponentInputSchema) ]),
}).strict();

export const FieldWeldUpdateManyWithWhereWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithWhereWithoutComponentInput> = z.object({
  where: z.lazy(() => FieldWeldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateManyMutationInputSchema),z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentInputSchema) ]),
}).strict();

export const ComponentCreateWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentCreateWithoutMilestonesInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutMilestonesInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutMilestonesInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestonesInputSchema) ]),
}).strict();

export const UserCreateWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserCreateWithoutCompletedMilestonesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCompletedMilestonesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCompletedMilestonesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompletedMilestonesInputSchema) ]),
}).strict();

export const ComponentUpsertWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentUpsertWithoutMilestonesInput> = z.object({
  update: z.union([ z.lazy(() => ComponentUpdateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutMilestonesInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutMilestonesInputSchema) ]),
  where: z.lazy(() => ComponentWhereInputSchema).optional()
}).strict();

export const ComponentUpdateToOneWithWhereWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentUpdateToOneWithWhereWithoutMilestonesInput> = z.object({
  where: z.lazy(() => ComponentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutMilestonesInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutMilestonesInputSchema) ]),
}).strict();

export const ComponentUpdateWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutMilestonesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutMilestonesInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutMilestonesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCompletedMilestonesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompletedMilestonesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCompletedMilestonesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCompletedMilestonesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCompletedMilestonesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCompletedMilestonesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCompletedMilestonesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCompletedMilestonesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCompletedMilestonesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const ProjectCreateWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutImportJobsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutImportJobsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutImportJobsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutImportJobsInputSchema) ]),
}).strict();

export const UserCreateWithoutImportJobsInputSchema: z.ZodType<Prisma.UserCreateWithoutImportJobsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutImportJobsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutImportJobsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutImportJobsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutImportJobsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedCreateWithoutImportJobsInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutImportJobsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutImportJobsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutImportJobsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutImportJobsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutImportJobsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutImportJobsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutImportJobsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutImportJobsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutImportJobsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutImportJobsInputSchema: z.ZodType<Prisma.UserUpsertWithoutImportJobsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImportJobsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedCreateWithoutImportJobsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutImportJobsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutImportJobsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutImportJobsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutImportJobsInputSchema) ]),
}).strict();

export const UserUpdateWithoutImportJobsInputSchema: z.ZodType<Prisma.UserUpdateWithoutImportJobsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutImportJobsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutImportJobsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const ProjectCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutAuditLogsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const UserCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateWithoutAuditLogsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const ComponentCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentCreateWithoutAuditLogsInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutAuditLogsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const ComponentUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => ComponentUpdateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => ComponentWhereInputSchema).optional()
}).strict();

export const ComponentUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => ComponentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutAuditLogsInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const ComponentUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ProjectCreateWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectCreateWithoutReportingCacheInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutReportingCacheInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutReportingCacheInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportingCacheInputSchema) ]),
}).strict();

export const UserCreateWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserCreateWithoutReportingCacheCreatedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutReportingCacheCreatedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutReportingCacheCreatedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportingCacheCreatedInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutReportingCacheInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutReportingCacheInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportingCacheInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutReportingCacheInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutReportingCacheInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutReportingCacheInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutReportingCacheInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutReportingCacheInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutReportingCacheInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserUpsertWithoutReportingCacheCreatedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportingCacheCreatedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportingCacheCreatedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutReportingCacheCreatedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutReportingCacheCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportingCacheCreatedInputSchema) ]),
}).strict();

export const UserUpdateWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserUpdateWithoutReportingCacheCreatedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutReportingCacheCreatedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutReportingCacheCreatedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutRocConfigurationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutRocConfigurationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutRocConfigurationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRocConfigurationsInputSchema) ]),
}).strict();

export const ProjectCreateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutRocConfigurationsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutRocConfigurationsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutRocConfigurationsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutRocConfigurationsInputSchema) ]),
}).strict();

export const UserCreateWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserCreateWithoutRocConfigsCreatedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRocConfigsCreatedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRocConfigsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRocConfigsCreatedInputSchema) ]),
}).strict();

export const ProgressSnapshotsCreateWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateWithoutRocConfigInput> = z.object({
  id: z.string().cuid().optional(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generationMethod: z.string().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutProgressSnapshotsInputSchema),
  generator: z.lazy(() => UserCreateNestedOneWithoutSnapshotsGeneratedInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedCreateWithoutRocConfigInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  generationMethod: z.string().optional()
}).strict();

export const ProgressSnapshotsCreateOrConnectWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateOrConnectWithoutRocConfigInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema) ]),
}).strict();

export const ProgressSnapshotsCreateManyRocConfigInputEnvelopeSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyRocConfigInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProgressSnapshotsCreateManyRocConfigInputSchema),z.lazy(() => ProgressSnapshotsCreateManyRocConfigInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutRocConfigurationsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRocConfigurationsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRocConfigurationsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutRocConfigurationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutRocConfigurationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRocConfigurationsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutRocConfigurationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutRocConfigurationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProjectUpsertWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutRocConfigurationsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutRocConfigurationsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutRocConfigurationsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutRocConfigurationsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutRocConfigurationsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutRocConfigurationsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutRocConfigurationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutRocConfigurationsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutRocConfigurationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserUpsertWithoutRocConfigsCreatedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRocConfigsCreatedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRocConfigsCreatedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRocConfigsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRocConfigsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRocConfigsCreatedInputSchema) ]),
}).strict();

export const UserUpdateWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserUpdateWithoutRocConfigsCreatedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRocConfigsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRocConfigsCreatedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const ProgressSnapshotsUpsertWithWhereUniqueWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpsertWithWhereUniqueWithoutRocConfigInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateWithoutRocConfigInputSchema) ]),
  create: z.union([ z.lazy(() => ProgressSnapshotsCreateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedCreateWithoutRocConfigInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpdateWithWhereUniqueWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateWithWhereUniqueWithoutRocConfigInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProgressSnapshotsUpdateWithoutRocConfigInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateWithoutRocConfigInputSchema) ]),
}).strict();

export const ProgressSnapshotsUpdateManyWithWhereWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyWithWhereWithoutRocConfigInput> = z.object({
  where: z.lazy(() => ProgressSnapshotsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProgressSnapshotsUpdateManyMutationInputSchema),z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigInputSchema) ]),
}).strict();

export const ProjectCreateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutProgressSnapshotsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutProgressSnapshotsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutProgressSnapshotsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProgressSnapshotsInputSchema) ]),
}).strict();

export const UserCreateWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserCreateWithoutSnapshotsGeneratedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSnapshotsGeneratedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutRequesterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSnapshotsGeneratedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedCreateWithoutSnapshotsGeneratedInputSchema) ]),
}).strict();

export const ROCConfigurationsCreateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateWithoutProgressSnapshotsInput> = z.object({
  id: z.string().cuid().optional(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRocConfigurationsInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutRocConfigurationsInputSchema).optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutRocConfigsCreatedInputSchema)
}).strict();

export const ROCConfigurationsUncheckedCreateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedCreateWithoutProgressSnapshotsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string()
}).strict();

export const ROCConfigurationsCreateOrConnectWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateOrConnectWithoutProgressSnapshotsInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProgressSnapshotsInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutProgressSnapshotsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutProgressSnapshotsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutProgressSnapshotsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutProgressSnapshotsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutProgressSnapshotsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutProgressSnapshotsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutProgressSnapshotsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutProgressSnapshotsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserUpsertWithoutSnapshotsGeneratedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSnapshotsGeneratedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedCreateWithoutSnapshotsGeneratedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSnapshotsGeneratedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSnapshotsGeneratedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSnapshotsGeneratedInputSchema) ]),
}).strict();

export const UserUpdateWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserUpdateWithoutSnapshotsGeneratedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSnapshotsGeneratedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSnapshotsGeneratedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  reportGenerationsRequested: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutRequesterNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUpsertWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsUpsertWithoutProgressSnapshotsInput> = z.object({
  update: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutProgressSnapshotsInputSchema) ]),
  create: z.union([ z.lazy(() => ROCConfigurationsCreateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedCreateWithoutProgressSnapshotsInputSchema) ]),
  where: z.lazy(() => ROCConfigurationsWhereInputSchema).optional()
}).strict();

export const ROCConfigurationsUpdateToOneWithWhereWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateToOneWithWhereWithoutProgressSnapshotsInput> = z.object({
  where: z.lazy(() => ROCConfigurationsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ROCConfigurationsUpdateWithoutProgressSnapshotsInputSchema),z.lazy(() => ROCConfigurationsUncheckedUpdateWithoutProgressSnapshotsInputSchema) ]),
}).strict();

export const ROCConfigurationsUpdateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithoutProgressSnapshotsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRocConfigurationsNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutRocConfigurationsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutRocConfigsCreatedNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateWithoutProgressSnapshotsInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateWithoutProgressSnapshotsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutReportGenerationsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutReportGenerationsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutReportGenerationsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportGenerationsInputSchema) ]),
}).strict();

export const UserCreateWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserCreateWithoutReportGenerationsRequestedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutGeneratorInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutReportGenerationsRequestedInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutInstallerInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutCompleterInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutGeneratorInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutReportGenerationsRequestedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportGenerationsRequestedInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutReportGenerationsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutReportGenerationsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutReportGenerationsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutReportGenerationsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutReportGenerationsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutReportGenerationsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutReportGenerationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutReportGenerationsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutReportGenerationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserUpsertWithoutReportGenerationsRequestedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportGenerationsRequestedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportGenerationsRequestedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutReportGenerationsRequestedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutReportGenerationsRequestedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportGenerationsRequestedInputSchema) ]),
}).strict();

export const UserUpdateWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserUpdateWithoutReportGenerationsRequestedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUpdateManyWithoutGeneratorNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutReportGenerationsRequestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutReportGenerationsRequestedInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdProjects: z.lazy(() => ProjectUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  installedComponents: z.lazy(() => ComponentUncheckedUpdateManyWithoutInstallerNestedInputSchema).optional(),
  completedMilestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutCompleterNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reportingCacheCreated: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  rocConfigsCreated: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  snapshotsGenerated: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorNestedInputSchema).optional()
}).strict();

export const FieldWeldCreateWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldCreateWithoutWeldTypeInput> = z.object({
  id: z.string().cuid().optional(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutFieldWeldsInputSchema),
  welder: z.lazy(() => WelderCreateNestedOneWithoutFieldWeldsInputSchema).optional(),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutFieldWeldsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutFieldWeldsInputSchema).optional()
}).strict();

export const FieldWeldUncheckedCreateWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateWithoutWeldTypeInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateOrConnectWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldCreateOrConnectWithoutWeldTypeInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema) ]),
}).strict();

export const FieldWeldCreateManyWeldTypeInputEnvelopeSchema: z.ZodType<Prisma.FieldWeldCreateManyWeldTypeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FieldWeldCreateManyWeldTypeInputSchema),z.lazy(() => FieldWeldCreateManyWeldTypeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldWeldUpsertWithWhereUniqueWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUpsertWithWhereUniqueWithoutWeldTypeInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutWeldTypeInputSchema) ]),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWeldTypeInputSchema) ]),
}).strict();

export const FieldWeldUpdateWithWhereUniqueWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithWhereUniqueWithoutWeldTypeInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateWithoutWeldTypeInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutWeldTypeInputSchema) ]),
}).strict();

export const FieldWeldUpdateManyWithWhereWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithWhereWithoutWeldTypeInput> = z.object({
  where: z.lazy(() => FieldWeldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateManyMutationInputSchema),z.lazy(() => FieldWeldUncheckedUpdateManyWithoutWeldTypeInputSchema) ]),
}).strict();

export const ProjectCreateWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectCreateWithoutWeldersInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutWeldersInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutWeldersInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutWeldersInputSchema) ]),
}).strict();

export const FieldWeldCreateWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldCreateWithoutWelderInput> = z.object({
  id: z.string().cuid().optional(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutFieldWeldsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutFieldWeldsInputSchema),
  weldType: z.lazy(() => WeldTypeCreateNestedOneWithoutFieldWeldsInputSchema),
  component: z.lazy(() => ComponentCreateNestedOneWithoutFieldWeldsInputSchema).optional()
}).strict();

export const FieldWeldUncheckedCreateWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUncheckedCreateWithoutWelderInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateOrConnectWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldCreateOrConnectWithoutWelderInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema) ]),
}).strict();

export const FieldWeldCreateManyWelderInputEnvelopeSchema: z.ZodType<Prisma.FieldWeldCreateManyWelderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FieldWeldCreateManyWelderInputSchema),z.lazy(() => FieldWeldCreateManyWelderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectUpsertWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutWeldersInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutWeldersInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutWeldersInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutWeldersInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutWeldersInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutWeldersInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutWeldersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutWeldersInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutWeldersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const FieldWeldUpsertWithWhereUniqueWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUpsertWithWhereUniqueWithoutWelderInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldWeldUpdateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutWelderInputSchema) ]),
  create: z.union([ z.lazy(() => FieldWeldCreateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedCreateWithoutWelderInputSchema) ]),
}).strict();

export const FieldWeldUpdateWithWhereUniqueWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithWhereUniqueWithoutWelderInput> = z.object({
  where: z.lazy(() => FieldWeldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateWithoutWelderInputSchema),z.lazy(() => FieldWeldUncheckedUpdateWithoutWelderInputSchema) ]),
}).strict();

export const FieldWeldUpdateManyWithWhereWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUpdateManyWithWhereWithoutWelderInput> = z.object({
  where: z.lazy(() => FieldWeldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldWeldUpdateManyMutationInputSchema),z.lazy(() => FieldWeldUncheckedUpdateManyWithoutWelderInputSchema) ]),
}).strict();

export const ProjectCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutCreatedProjectsInputSchema),
  drawings: z.lazy(() => DrawingCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string(),
  drawings: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const WelderCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutWeldersInputSchema)
}).strict();

export const WelderUncheckedCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderUncheckedCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WelderCreateOrConnectWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderCreateOrConnectWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => WelderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WelderCreateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedCreateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const DrawingCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutDrawingsInputSchema),
  parent: z.lazy(() => DrawingCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => DrawingCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingUncheckedCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingUncheckedCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  children: z.lazy(() => DrawingUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedCreateNestedManyWithoutDrawingInputSchema).optional()
}).strict();

export const DrawingCreateOrConnectWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingCreateOrConnectWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => DrawingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DrawingCreateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const WeldTypeCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  code: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const WeldTypeUncheckedCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeUncheckedCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  code: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const WeldTypeCreateOrConnectWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeCreateOrConnectWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => WeldTypeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WeldTypeCreateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedCreateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const ComponentCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutComponentsInputSchema),
  drawing: z.lazy(() => DrawingCreateNestedOneWithoutComponentsInputSchema),
  milestoneTemplate: z.lazy(() => MilestoneTemplateCreateNestedOneWithoutComponentsInputSchema),
  installer: z.lazy(() => UserCreateNestedOneWithoutInstalledComponentsInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentUncheckedCreateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentUncheckedCreateWithoutFieldWeldsInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedCreateNestedManyWithoutComponentInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutComponentInputSchema).optional()
}).strict();

export const ComponentCreateOrConnectWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentCreateOrConnectWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => ComponentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ComponentCreateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutFieldWeldsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutFieldWeldsInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutFieldWeldsInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const WelderUpsertWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderUpsertWithoutFieldWeldsInput> = z.object({
  update: z.union([ z.lazy(() => WelderUpdateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
  create: z.union([ z.lazy(() => WelderCreateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedCreateWithoutFieldWeldsInputSchema) ]),
  where: z.lazy(() => WelderWhereInputSchema).optional()
}).strict();

export const WelderUpdateToOneWithWhereWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderUpdateToOneWithWhereWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => WelderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WelderUpdateWithoutFieldWeldsInputSchema),z.lazy(() => WelderUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const WelderUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutWeldersNestedInputSchema).optional()
}).strict();

export const WelderUncheckedUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WelderUncheckedUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DrawingUpsertWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingUpsertWithoutFieldWeldsInput> = z.object({
  update: z.union([ z.lazy(() => DrawingUpdateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
  create: z.union([ z.lazy(() => DrawingCreateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedCreateWithoutFieldWeldsInputSchema) ]),
  where: z.lazy(() => DrawingWhereInputSchema).optional()
}).strict();

export const DrawingUpdateToOneWithWhereWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingUpdateToOneWithWhereWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => DrawingWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DrawingUpdateWithoutFieldWeldsInputSchema),z.lazy(() => DrawingUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const DrawingUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutDrawingsNestedInputSchema).optional(),
  parent: z.lazy(() => DrawingUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => DrawingUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.lazy(() => DrawingUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const WeldTypeUpsertWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeUpsertWithoutFieldWeldsInput> = z.object({
  update: z.union([ z.lazy(() => WeldTypeUpdateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
  create: z.union([ z.lazy(() => WeldTypeCreateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedCreateWithoutFieldWeldsInputSchema) ]),
  where: z.lazy(() => WeldTypeWhereInputSchema).optional()
}).strict();

export const WeldTypeUpdateToOneWithWhereWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeUpdateToOneWithWhereWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => WeldTypeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WeldTypeUpdateWithoutFieldWeldsInputSchema),z.lazy(() => WeldTypeUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const WeldTypeUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WeldTypeUncheckedUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.WeldTypeUncheckedUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentUpsertWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentUpsertWithoutFieldWeldsInput> = z.object({
  update: z.union([ z.lazy(() => ComponentUpdateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
  create: z.union([ z.lazy(() => ComponentCreateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedCreateWithoutFieldWeldsInputSchema) ]),
  where: z.lazy(() => ComponentWhereInputSchema).optional()
}).strict();

export const ComponentUpdateToOneWithWhereWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentUpdateToOneWithWhereWithoutFieldWeldsInput> = z.object({
  where: z.lazy(() => ComponentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ComponentUpdateWithoutFieldWeldsInputSchema),z.lazy(() => ComponentUncheckedUpdateWithoutFieldWeldsInputSchema) ]),
}).strict();

export const ComponentUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutFieldWeldsInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutFieldWeldsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const PasskeyCreateManyUserInputSchema: z.ZodType<Prisma.PasskeyCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const InvitationCreateManyUserInputSchema: z.ZodType<Prisma.InvitationCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const PurchaseCreateManyUserInputSchema: z.ZodType<Prisma.PurchaseCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MemberCreateManyUserInputSchema: z.ZodType<Prisma.MemberCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const TwoFactorCreateManyUserInputSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const AiChatCreateManyUserInputSchema: z.ZodType<Prisma.AiChatCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectCreateManyCreatorInputSchema: z.ZodType<Prisma.ProjectCreateManyCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentCreateManyInstallerInputSchema: z.ZodType<Prisma.ComponentCreateManyInstallerInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable()
}).strict();

export const ComponentMilestoneCreateManyCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyCompleterInput> = z.object({
  id: z.string().cuid().optional(),
  componentId: z.string(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ImportJobCreateManyUserInputSchema: z.ZodType<Prisma.ImportJobCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateManyUserInputSchema: z.ZodType<Prisma.AuditLogCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  componentId: z.string().optional().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ReportingCacheCreateManyCreatorInputSchema: z.ZodType<Prisma.ReportingCacheCreateManyCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable()
}).strict();

export const ROCConfigurationsCreateManyCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyCreatorInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProgressSnapshotsCreateManyGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyGeneratorInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generationMethod: z.string().optional(),
  rocConfigId: z.string().optional().nullable()
}).strict();

export const ReportGenerationsCreateManyRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsCreateManyRequesterInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  reportType: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable()
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasskeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InvitationUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUpdateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUpdateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateManyWithoutCreatorInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentUpdateWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutInstallerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutInstallerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateManyWithoutInstallerInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutInstallerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ComponentMilestoneUpdateWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateWithoutCompleterInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  component: z.lazy(() => ComponentUpdateOneRequiredWithoutMilestonesNestedInputSchema).optional()
}).strict();

export const ComponentMilestoneUncheckedUpdateWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateWithoutCompleterInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedUpdateManyWithoutCompleterInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateManyWithoutCompleterInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobUpdateWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutImportJobsNestedInputSchema).optional()
}).strict();

export const ImportJobUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUpdateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportingCacheUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutReportingCacheNestedInputSchema).optional()
}).strict();

export const ReportingCacheUncheckedUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportingCacheUncheckedUpdateManyWithoutCreatorInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateManyWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ROCConfigurationsUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRocConfigurationsNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutRocConfigurationsNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateManyWithoutCreatorInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyWithoutCreatorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsUpdateWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateWithoutGeneratorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutProgressSnapshotsNestedInputSchema).optional(),
  rocConfig: z.lazy(() => ROCConfigurationsUpdateOneWithoutProgressSnapshotsNestedInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedUpdateWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateWithoutGeneratorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rocConfigId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyWithoutGeneratorInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rocConfigId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsUpdateWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateWithoutRequesterInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutReportGenerationsNestedInputSchema).optional()
}).strict();

export const ReportGenerationsUncheckedUpdateWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateWithoutRequesterInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsUncheckedUpdateManyWithoutRequesterInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateManyWithoutRequesterInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MemberCreateManyOrganizationInputSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const InvitationCreateManyOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const PurchaseCreateManyOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateManyOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  jobName: z.string(),
  jobNumber: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema).optional(),
  client: z.string().optional().nullable(),
  location: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  targetDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string()
}).strict();

export const ROCConfigurationsCreateManyOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string()
}).strict();

export const MemberUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutCreatedProjectsNestedInputSchema).optional(),
  drawings: z.lazy(() => DrawingUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawings: z.lazy(() => DrawingUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  milestoneTemplates: z.lazy(() => MilestoneTemplateUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  importJobs: z.lazy(() => ImportJobUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportingCache: z.lazy(() => ReportingCacheUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  rocConfigurations: z.lazy(() => ROCConfigurationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  reportGenerations: z.lazy(() => ReportGenerationsUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  welders: z.lazy(() => WelderUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  jobNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  targetDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ROCConfigurationsUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutRocConfigurationsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutRocConfigsCreatedNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DrawingCreateManyProjectInputSchema: z.ZodType<Prisma.DrawingCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  parentId: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentCreateManyProjectInputSchema: z.ZodType<Prisma.ComponentCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  drawingId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable()
}).strict();

export const MilestoneTemplateCreateManyProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]),
  isDefault: z.boolean().optional(),
  usageCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ImportJobCreateManyProjectInputSchema: z.ZodType<Prisma.ImportJobCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  filename: z.string(),
  originalPath: z.string().optional().nullable(),
  status: z.lazy(() => ImportStatusSchema).optional(),
  totalRows: z.number().int().optional().nullable(),
  processedRows: z.number().int().optional().nullable(),
  errorRows: z.number().int().optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateManyProjectInputSchema: z.ZodType<Prisma.AuditLogCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  componentId: z.string().optional().nullable(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ReportingCacheCreateManyProjectInputSchema: z.ZodType<Prisma.ReportingCacheCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  cacheKey: z.string(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.coerce.date().optional(),
  expiresAt: z.coerce.date(),
  calculationDuration: z.number().int().optional().nullable(),
  rowCount: z.number().int().optional().nullable(),
  createdBy: z.string().optional().nullable()
}).strict();

export const ROCConfigurationsCreateManyProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  componentType: z.string().optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.string().optional().nullable(),
  isDefault: z.boolean().optional(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.string()
}).strict();

export const ProgressSnapshotsCreateManyProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  generationMethod: z.string().optional(),
  rocConfigId: z.string().optional().nullable()
}).strict();

export const ReportGenerationsCreateManyProjectInputSchema: z.ZodType<Prisma.ReportGenerationsCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  reportType: z.string(),
  requestedBy: z.string(),
  requestedAt: z.coerce.date().optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.string(),
  deliveryMethod: z.string().optional(),
  status: z.string().optional(),
  startedAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  resultRowCount: z.number().int().optional().nullable(),
  resultSize: z.bigint().optional().nullable(),
  downloadUrl: z.string().optional().nullable(),
  downloadExpires: z.coerce.date().optional().nullable(),
  errorMessage: z.string().optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.boolean().optional(),
  dbQueryTime: z.number().int().optional().nullable(),
  exportTime: z.number().int().optional().nullable(),
  memoryUsage: z.bigint().optional().nullable()
}).strict();

export const WelderCreateManyProjectInputSchema: z.ZodType<Prisma.WelderCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  stencil: z.string(),
  name: z.string(),
  active: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateManyProjectInputSchema: z.ZodType<Prisma.FieldWeldCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DrawingUpdateWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  parent: z.lazy(() => DrawingUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => DrawingUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.lazy(() => DrawingUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MilestoneTemplateUpdateWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutMilestoneTemplateNestedInputSchema).optional()
}).strict();

export const MilestoneTemplateUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutMilestoneTemplateNestedInputSchema).optional()
}).strict();

export const MilestoneTemplateUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.MilestoneTemplateUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ name: z.string(), weight: z.number(), order: z.number() })) ]).optional(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutImportJobsNestedInputSchema).optional()
}).strict();

export const ImportJobUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ImportJobUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ImportJobUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ImportStatusSchema),z.lazy(() => EnumImportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  totalRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processedRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorRows: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errors: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.array(z.object({ row: z.number(), field: z.string(), error: z.string(), value: z.any() })) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUpdateWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportingCacheUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  creator: z.lazy(() => UserUpdateOneWithoutReportingCacheCreatedNestedInputSchema).optional()
}).strict();

export const ReportingCacheUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportingCacheUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ReportingCacheUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cacheKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  result: z.union([ z.lazy(() => JsonNullValueInputSchema),z.any() ]).optional(),
  calculatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ROCConfigurationsUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRocConfigurationsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutRocConfigsCreatedNestedInputSchema).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  progressSnapshots: z.lazy(() => ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigNestedInputSchema).optional()
}).strict();

export const ROCConfigurationsUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ROCConfigurationsUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneWeights: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDefault: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  generator: z.lazy(() => UserUpdateOneWithoutSnapshotsGeneratedNestedInputSchema).optional(),
  rocConfig: z.lazy(() => ROCConfigurationsUpdateOneWithoutProgressSnapshotsNestedInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rocConfigId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rocConfigId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester: z.lazy(() => UserUpdateOneRequiredWithoutReportGenerationsRequestedNestedInputSchema).optional()
}).strict();

export const ReportGenerationsUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ReportGenerationsUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ReportGenerationsUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requestedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  outputFormat: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deliveryMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultRowCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultSize: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  downloadExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  errorDetails: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.any() ]).optional(),
  cacheHit: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  dbQueryTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  exportTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  memoryUsage: z.union([ z.bigint(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const WelderUpdateWithoutProjectInputSchema: z.ZodType<Prisma.WelderUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutWelderNestedInputSchema).optional()
}).strict();

export const WelderUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.WelderUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutWelderNestedInputSchema).optional()
}).strict();

export const WelderUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.WelderUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  stencil: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUpdateWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  welder: z.lazy(() => WelderUpdateOneWithoutFieldWeldsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutFieldWeldsNestedInputSchema).optional()
}).strict();

export const FieldWeldUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DrawingCreateManyParentInputSchema: z.ZodType<Prisma.DrawingCreateManyParentInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  number: z.string(),
  title: z.string(),
  revision: z.string().optional().nullable(),
  filePath: z.string().optional().nullable(),
  fileUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentCreateManyDrawingInputSchema: z.ZodType<Prisma.ComponentCreateManyDrawingInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  milestoneTemplateId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable()
}).strict();

export const FieldWeldCreateManyDrawingInputSchema: z.ZodType<Prisma.FieldWeldCreateManyDrawingInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DrawingUpdateWithoutParentInputSchema: z.ZodType<Prisma.DrawingUpdateWithoutParentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutDrawingsNestedInputSchema).optional(),
  children: z.lazy(() => DrawingUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateWithoutParentInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateWithoutParentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  children: z.lazy(() => DrawingUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  components: z.lazy(() => ComponentUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutDrawingNestedInputSchema).optional()
}).strict();

export const DrawingUncheckedUpdateManyWithoutParentInputSchema: z.ZodType<Prisma.DrawingUncheckedUpdateManyWithoutParentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  number: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  revision: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filePath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentUpdateWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutDrawingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  milestoneTemplate: z.lazy(() => MilestoneTemplateUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutDrawingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateManyWithoutDrawingInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutDrawingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneTemplateId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldWeldUpdateWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithoutDrawingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  welder: z.lazy(() => WelderUpdateOneWithoutFieldWeldsNestedInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutFieldWeldsNestedInputSchema).optional()
}).strict();

export const FieldWeldUncheckedUpdateWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateWithoutDrawingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutDrawingInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutDrawingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentCreateManyMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentCreateManyMilestoneTemplateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  drawingId: z.string(),
  componentId: z.string(),
  weldId: z.string().optional().nullable(),
  instanceNumber: z.number().int().optional(),
  totalInstancesOnDrawing: z.number().int().optional().nullable(),
  displayId: z.string().optional().nullable(),
  type: z.lazy(() => ComponentTypeSchema),
  workflowType: z.lazy(() => WorkflowTypeSchema),
  spec: z.string().optional().nullable(),
  size: z.string().optional().nullable(),
  material: z.string().optional().nullable(),
  pressureRating: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  area: z.string().optional().nullable(),
  system: z.string().optional().nullable(),
  testPackage: z.string().optional().nullable(),
  testPressure: z.number().optional().nullable(),
  testRequired: z.string().optional().nullable(),
  totalLength: z.number().optional().nullable(),
  lengthUnit: z.string().optional().nullable(),
  totalQuantity: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  completionPercent: z.number().optional(),
  status: z.lazy(() => ComponentStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  installationDate: z.coerce.date().optional().nullable(),
  installerUserId: z.string().optional().nullable()
}).strict();

export const ComponentUpdateWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUpdateWithoutMilestoneTemplateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutComponentsNestedInputSchema).optional(),
  installer: z.lazy(() => UserUpdateOneWithoutInstalledComponentsNestedInputSchema).optional(),
  milestones: z.lazy(() => ComponentMilestoneUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateWithoutMilestoneTemplateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestones: z.lazy(() => ComponentMilestoneUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutComponentNestedInputSchema).optional(),
  fieldWelds: z.lazy(() => FieldWeldUncheckedUpdateManyWithoutComponentNestedInputSchema).optional()
}).strict();

export const ComponentUncheckedUpdateManyWithoutMilestoneTemplateInputSchema: z.ZodType<Prisma.ComponentUncheckedUpdateManyWithoutMilestoneTemplateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  componentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  instanceNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalInstancesOnDrawing: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => ComponentTypeSchema),z.lazy(() => EnumComponentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  workflowType: z.union([ z.lazy(() => WorkflowTypeSchema),z.lazy(() => EnumWorkflowTypeFieldUpdateOperationsInputSchema) ]).optional(),
  spec: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  material: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pressureRating: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  area: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  system: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPackage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testPressure: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  testRequired: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalLength: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lengthUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  totalQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completionPercent: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ComponentStatusSchema),z.lazy(() => EnumComponentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  installationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  installerUserId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ComponentMilestoneCreateManyComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyComponentInput> = z.object({
  id: z.string().cuid().optional(),
  milestoneName: z.string(),
  milestoneOrder: z.number().int(),
  weight: z.number(),
  isCompleted: z.boolean().optional(),
  percentageValue: z.number().optional().nullable(),
  quantityValue: z.number().optional().nullable(),
  quantityUnit: z.string().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  completedBy: z.string().optional().nullable(),
  effectiveDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateManyComponentInputSchema: z.ZodType<Prisma.AuditLogCreateManyComponentInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  userId: z.string(),
  entityType: z.string(),
  entityId: z.string(),
  action: z.lazy(() => AuditActionSchema),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const FieldWeldCreateManyComponentInputSchema: z.ZodType<Prisma.FieldWeldCreateManyComponentInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ComponentMilestoneUpdateWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUpdateWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completer: z.lazy(() => UserUpdateOneWithoutCompletedMilestonesNestedInputSchema).optional()
}).strict();

export const ComponentMilestoneUncheckedUpdateWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ComponentMilestoneUncheckedUpdateManyWithoutComponentInputSchema: z.ZodType<Prisma.ComponentMilestoneUncheckedUpdateManyWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  milestoneOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  weight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCompleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  percentageValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  quantityUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  effectiveDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUpdateWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutComponentInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entityId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.lazy(() => AuditActionSchema),z.lazy(() => EnumAuditActionFieldUpdateOperationsInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.object({ old: z.any(), new: z.any() })) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUpdateWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  welder: z.lazy(() => WelderUpdateOneWithoutFieldWeldsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional()
}).strict();

export const FieldWeldUncheckedUpdateWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutComponentInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutComponentInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsCreateManyRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyRocConfigInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  snapshotDate: z.coerce.date(),
  snapshotTime: z.coerce.date().optional(),
  totalComponents: z.number().int().optional(),
  completedComponents: z.number().int().optional(),
  overallCompletionPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rocWeightedPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  weeklyVelocity: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.number().int().optional(),
  stalledComponents14d: z.number().int().optional(),
  stalledComponents21d: z.number().int().optional(),
  calculationDuration: z.number().int().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  generationMethod: z.string().optional()
}).strict();

export const ProgressSnapshotsUpdateWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateWithoutRocConfigInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutProgressSnapshotsNestedInputSchema).optional(),
  generator: z.lazy(() => UserUpdateOneWithoutSnapshotsGeneratedNestedInputSchema).optional()
}).strict();

export const ProgressSnapshotsUncheckedUpdateWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateWithoutRocConfigInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigInputSchema: z.ZodType<Prisma.ProgressSnapshotsUncheckedUpdateManyWithoutRocConfigInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  snapshotTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  totalComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedComponents: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  overallCompletionPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rocWeightedPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  areaBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ area: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  systemBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ system: z.string(), completionPercent: z.number(), componentCount: z.number() })) ]).optional(),
  testPackageBreakdown: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ testPackage: z.string(), completionPercent: z.number(), componentCount: z.number(), isReady: z.boolean() })) ]).optional(),
  dailyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weeklyVelocity: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  milestoneVelocity: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.number()) ]).optional(),
  stalledComponents7d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents14d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stalledComponents21d: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calculationDuration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generationMethod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldCreateManyWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldCreateManyWeldTypeInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  welderId: z.string().optional().nullable(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldUpdateWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithoutWeldTypeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  welder: z.lazy(() => WelderUpdateOneWithoutFieldWeldsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutFieldWeldsNestedInputSchema).optional()
}).strict();

export const FieldWeldUncheckedUpdateWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateWithoutWeldTypeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutWeldTypeInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutWeldTypeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  welderId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldCreateManyWelderInputSchema: z.ZodType<Prisma.FieldWeldCreateManyWelderInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string(),
  weldIdNumber: z.string(),
  dateWelded: z.coerce.date().optional().nullable(),
  drawingId: z.string(),
  packageNumber: z.string(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.string(),
  tieInNumber: z.string().optional().nullable(),
  xrayPercent: z.number().int().optional().nullable(),
  weldSize: z.string(),
  schedule: z.string(),
  weldTypeCode: z.string(),
  baseMetal: z.string().optional().nullable(),
  pwhtRequired: z.boolean().optional(),
  datePwht: z.coerce.date().optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldCreatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.string().optional().nullable(),
  ndeDate: z.coerce.date().optional().nullable(),
  turnoverDate: z.coerce.date().optional().nullable(),
  comments: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FieldWeldUpdateWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUpdateWithoutWelderInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  drawing: z.lazy(() => DrawingUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  weldType: z.lazy(() => WeldTypeUpdateOneRequiredWithoutFieldWeldsNestedInputSchema).optional(),
  component: z.lazy(() => ComponentUpdateOneWithoutFieldWeldsNestedInputSchema).optional()
}).strict();

export const FieldWeldUncheckedUpdateWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateWithoutWelderInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FieldWeldUncheckedUpdateManyWithoutWelderInputSchema: z.ZodType<Prisma.FieldWeldUncheckedUpdateManyWithoutWelderInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldIdNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dateWelded: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drawingId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  packageNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testPressure: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  specCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tieInNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  xrayPercent: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weldSize: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  schedule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weldTypeCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseMetal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  pwhtRequired: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  datePwht: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeTypes: z.union([ z.lazy(() => FieldWeldUpdatendeTypesInputSchema),z.string().array() ]).optional(),
  ndeResult: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ndeDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  turnoverDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Omit<Prisma.UserFindFirstArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.UserFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Omit<Prisma.UserFindManyArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Omit<Prisma.UserFindUniqueArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.UserFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Omit<Prisma.SessionFindFirstArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.SessionFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Omit<Prisma.SessionFindManyArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Omit<Prisma.SessionFindUniqueArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.SessionFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Omit<Prisma.AccountFindFirstArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AccountFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Omit<Prisma.AccountFindManyArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AccountFindUniqueArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AccountFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindFirstArgsSchema: z.ZodType<Omit<Prisma.VerificationFindFirstArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.VerificationFindFirstOrThrowArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindManyArgsSchema: z.ZodType<Omit<Prisma.VerificationFindManyArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationAggregateArgsSchema: z.ZodType<Prisma.VerificationAggregateArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationGroupByArgsSchema: z.ZodType<Prisma.VerificationGroupByArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithAggregationInputSchema.array(),VerificationOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationScalarFieldEnumSchema.array(),
  having: VerificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.VerificationFindUniqueArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.VerificationFindUniqueOrThrowArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const PasskeyFindFirstArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindFirstArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyFindManyArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindManyArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyAggregateArgsSchema: z.ZodType<Prisma.PasskeyAggregateArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasskeyGroupByArgsSchema: z.ZodType<Prisma.PasskeyGroupByArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithAggregationInputSchema.array(),PasskeyOrderByWithAggregationInputSchema ]).optional(),
  by: PasskeyScalarFieldEnumSchema.array(),
  having: PasskeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasskeyFindUniqueArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindUniqueArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindFirstArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindFirstArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindManyArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindManyArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorAggregateArgsSchema: z.ZodType<Prisma.TwoFactorAggregateArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorGroupByArgsSchema: z.ZodType<Prisma.TwoFactorGroupByArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithAggregationInputSchema.array(),TwoFactorOrderByWithAggregationInputSchema ]).optional(),
  by: TwoFactorScalarFieldEnumSchema.array(),
  having: TwoFactorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorFindUniqueArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindUniqueArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindFirstArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindManyArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindUniqueArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const MemberFindFirstArgsSchema: z.ZodType<Omit<Prisma.MemberFindFirstArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindManyArgsSchema: z.ZodType<Omit<Prisma.MemberFindManyArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberAggregateArgsSchema: z.ZodType<Prisma.MemberAggregateArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberGroupByArgsSchema: z.ZodType<Prisma.MemberGroupByArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithAggregationInputSchema.array(),MemberOrderByWithAggregationInputSchema ]).optional(),
  by: MemberScalarFieldEnumSchema.array(),
  having: MemberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberFindUniqueArgsSchema: z.ZodType<Omit<Prisma.MemberFindUniqueArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Omit<Prisma.InvitationFindFirstArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.InvitationFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Omit<Prisma.InvitationFindManyArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.InvitationFindUniqueArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.InvitationFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const PurchaseFindFirstArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindFirstArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseFindManyArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindManyArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseAggregateArgsSchema: z.ZodType<Prisma.PurchaseAggregateArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurchaseGroupByArgsSchema: z.ZodType<Prisma.PurchaseGroupByArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithAggregationInputSchema.array(),PurchaseOrderByWithAggregationInputSchema ]).optional(),
  by: PurchaseScalarFieldEnumSchema.array(),
  having: PurchaseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurchaseFindUniqueArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindUniqueArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const AiChatFindFirstArgsSchema: z.ZodType<Omit<Prisma.AiChatFindFirstArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AiChatFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatFindManyArgsSchema: z.ZodType<Omit<Prisma.AiChatFindManyArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatAggregateArgsSchema: z.ZodType<Prisma.AiChatAggregateArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AiChatGroupByArgsSchema: z.ZodType<Prisma.AiChatGroupByArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithAggregationInputSchema.array(),AiChatOrderByWithAggregationInputSchema ]).optional(),
  by: AiChatScalarFieldEnumSchema.array(),
  having: AiChatScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AiChatFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AiChatFindUniqueArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AiChatFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const ProjectFindFirstArgsSchema: z.ZodType<Omit<Prisma.ProjectFindFirstArgs, "select" | "include">> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectScalarFieldEnumSchema,ProjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProjectFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectScalarFieldEnumSchema,ProjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectFindManyArgsSchema: z.ZodType<Omit<Prisma.ProjectFindManyArgs, "select" | "include">> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectScalarFieldEnumSchema,ProjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectAggregateArgsSchema: z.ZodType<Prisma.ProjectAggregateArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProjectGroupByArgsSchema: z.ZodType<Prisma.ProjectGroupByArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithAggregationInputSchema.array(),ProjectOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectScalarFieldEnumSchema.array(),
  having: ProjectScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProjectFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ProjectFindUniqueArgs, "select" | "include">> = z.object({
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const ProjectFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProjectFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const DrawingFindFirstArgsSchema: z.ZodType<Omit<Prisma.DrawingFindFirstArgs, "select" | "include">> = z.object({
  where: DrawingWhereInputSchema.optional(),
  orderBy: z.union([ DrawingOrderByWithRelationInputSchema.array(),DrawingOrderByWithRelationInputSchema ]).optional(),
  cursor: DrawingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DrawingScalarFieldEnumSchema,DrawingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DrawingFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.DrawingFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: DrawingWhereInputSchema.optional(),
  orderBy: z.union([ DrawingOrderByWithRelationInputSchema.array(),DrawingOrderByWithRelationInputSchema ]).optional(),
  cursor: DrawingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DrawingScalarFieldEnumSchema,DrawingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DrawingFindManyArgsSchema: z.ZodType<Omit<Prisma.DrawingFindManyArgs, "select" | "include">> = z.object({
  where: DrawingWhereInputSchema.optional(),
  orderBy: z.union([ DrawingOrderByWithRelationInputSchema.array(),DrawingOrderByWithRelationInputSchema ]).optional(),
  cursor: DrawingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DrawingScalarFieldEnumSchema,DrawingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DrawingAggregateArgsSchema: z.ZodType<Prisma.DrawingAggregateArgs> = z.object({
  where: DrawingWhereInputSchema.optional(),
  orderBy: z.union([ DrawingOrderByWithRelationInputSchema.array(),DrawingOrderByWithRelationInputSchema ]).optional(),
  cursor: DrawingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DrawingGroupByArgsSchema: z.ZodType<Prisma.DrawingGroupByArgs> = z.object({
  where: DrawingWhereInputSchema.optional(),
  orderBy: z.union([ DrawingOrderByWithAggregationInputSchema.array(),DrawingOrderByWithAggregationInputSchema ]).optional(),
  by: DrawingScalarFieldEnumSchema.array(),
  having: DrawingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DrawingFindUniqueArgsSchema: z.ZodType<Omit<Prisma.DrawingFindUniqueArgs, "select" | "include">> = z.object({
  where: DrawingWhereUniqueInputSchema,
}).strict() ;

export const DrawingFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.DrawingFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: DrawingWhereUniqueInputSchema,
}).strict() ;

export const MilestoneTemplateFindFirstArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateFindFirstArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MilestoneTemplateOrderByWithRelationInputSchema.array(),MilestoneTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MilestoneTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MilestoneTemplateScalarFieldEnumSchema,MilestoneTemplateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MilestoneTemplateFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MilestoneTemplateOrderByWithRelationInputSchema.array(),MilestoneTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MilestoneTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MilestoneTemplateScalarFieldEnumSchema,MilestoneTemplateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MilestoneTemplateFindManyArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateFindManyArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MilestoneTemplateOrderByWithRelationInputSchema.array(),MilestoneTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MilestoneTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MilestoneTemplateScalarFieldEnumSchema,MilestoneTemplateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MilestoneTemplateAggregateArgsSchema: z.ZodType<Prisma.MilestoneTemplateAggregateArgs> = z.object({
  where: MilestoneTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MilestoneTemplateOrderByWithRelationInputSchema.array(),MilestoneTemplateOrderByWithRelationInputSchema ]).optional(),
  cursor: MilestoneTemplateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MilestoneTemplateGroupByArgsSchema: z.ZodType<Prisma.MilestoneTemplateGroupByArgs> = z.object({
  where: MilestoneTemplateWhereInputSchema.optional(),
  orderBy: z.union([ MilestoneTemplateOrderByWithAggregationInputSchema.array(),MilestoneTemplateOrderByWithAggregationInputSchema ]).optional(),
  by: MilestoneTemplateScalarFieldEnumSchema.array(),
  having: MilestoneTemplateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MilestoneTemplateFindUniqueArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateFindUniqueArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereUniqueInputSchema,
}).strict() ;

export const MilestoneTemplateFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereUniqueInputSchema,
}).strict() ;

export const ComponentFindFirstArgsSchema: z.ZodType<Omit<Prisma.ComponentFindFirstArgs, "select" | "include">> = z.object({
  where: ComponentWhereInputSchema.optional(),
  orderBy: z.union([ ComponentOrderByWithRelationInputSchema.array(),ComponentOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ComponentScalarFieldEnumSchema,ComponentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ComponentFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ComponentFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ComponentWhereInputSchema.optional(),
  orderBy: z.union([ ComponentOrderByWithRelationInputSchema.array(),ComponentOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ComponentScalarFieldEnumSchema,ComponentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ComponentFindManyArgsSchema: z.ZodType<Omit<Prisma.ComponentFindManyArgs, "select" | "include">> = z.object({
  where: ComponentWhereInputSchema.optional(),
  orderBy: z.union([ ComponentOrderByWithRelationInputSchema.array(),ComponentOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ComponentScalarFieldEnumSchema,ComponentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ComponentAggregateArgsSchema: z.ZodType<Prisma.ComponentAggregateArgs> = z.object({
  where: ComponentWhereInputSchema.optional(),
  orderBy: z.union([ ComponentOrderByWithRelationInputSchema.array(),ComponentOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ComponentGroupByArgsSchema: z.ZodType<Prisma.ComponentGroupByArgs> = z.object({
  where: ComponentWhereInputSchema.optional(),
  orderBy: z.union([ ComponentOrderByWithAggregationInputSchema.array(),ComponentOrderByWithAggregationInputSchema ]).optional(),
  by: ComponentScalarFieldEnumSchema.array(),
  having: ComponentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ComponentFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ComponentFindUniqueArgs, "select" | "include">> = z.object({
  where: ComponentWhereUniqueInputSchema,
}).strict() ;

export const ComponentFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ComponentFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ComponentWhereUniqueInputSchema,
}).strict() ;

export const ComponentMilestoneFindFirstArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneFindFirstArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereInputSchema.optional(),
  orderBy: z.union([ ComponentMilestoneOrderByWithRelationInputSchema.array(),ComponentMilestoneOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentMilestoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ComponentMilestoneScalarFieldEnumSchema,ComponentMilestoneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ComponentMilestoneFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereInputSchema.optional(),
  orderBy: z.union([ ComponentMilestoneOrderByWithRelationInputSchema.array(),ComponentMilestoneOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentMilestoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ComponentMilestoneScalarFieldEnumSchema,ComponentMilestoneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ComponentMilestoneFindManyArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneFindManyArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereInputSchema.optional(),
  orderBy: z.union([ ComponentMilestoneOrderByWithRelationInputSchema.array(),ComponentMilestoneOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentMilestoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ComponentMilestoneScalarFieldEnumSchema,ComponentMilestoneScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ComponentMilestoneAggregateArgsSchema: z.ZodType<Prisma.ComponentMilestoneAggregateArgs> = z.object({
  where: ComponentMilestoneWhereInputSchema.optional(),
  orderBy: z.union([ ComponentMilestoneOrderByWithRelationInputSchema.array(),ComponentMilestoneOrderByWithRelationInputSchema ]).optional(),
  cursor: ComponentMilestoneWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ComponentMilestoneGroupByArgsSchema: z.ZodType<Prisma.ComponentMilestoneGroupByArgs> = z.object({
  where: ComponentMilestoneWhereInputSchema.optional(),
  orderBy: z.union([ ComponentMilestoneOrderByWithAggregationInputSchema.array(),ComponentMilestoneOrderByWithAggregationInputSchema ]).optional(),
  by: ComponentMilestoneScalarFieldEnumSchema.array(),
  having: ComponentMilestoneScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ComponentMilestoneFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneFindUniqueArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereUniqueInputSchema,
}).strict() ;

export const ComponentMilestoneFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereUniqueInputSchema,
}).strict() ;

export const ImportJobFindFirstArgsSchema: z.ZodType<Omit<Prisma.ImportJobFindFirstArgs, "select" | "include">> = z.object({
  where: ImportJobWhereInputSchema.optional(),
  orderBy: z.union([ ImportJobOrderByWithRelationInputSchema.array(),ImportJobOrderByWithRelationInputSchema ]).optional(),
  cursor: ImportJobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ImportJobScalarFieldEnumSchema,ImportJobScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ImportJobFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ImportJobFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ImportJobWhereInputSchema.optional(),
  orderBy: z.union([ ImportJobOrderByWithRelationInputSchema.array(),ImportJobOrderByWithRelationInputSchema ]).optional(),
  cursor: ImportJobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ImportJobScalarFieldEnumSchema,ImportJobScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ImportJobFindManyArgsSchema: z.ZodType<Omit<Prisma.ImportJobFindManyArgs, "select" | "include">> = z.object({
  where: ImportJobWhereInputSchema.optional(),
  orderBy: z.union([ ImportJobOrderByWithRelationInputSchema.array(),ImportJobOrderByWithRelationInputSchema ]).optional(),
  cursor: ImportJobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ImportJobScalarFieldEnumSchema,ImportJobScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ImportJobAggregateArgsSchema: z.ZodType<Prisma.ImportJobAggregateArgs> = z.object({
  where: ImportJobWhereInputSchema.optional(),
  orderBy: z.union([ ImportJobOrderByWithRelationInputSchema.array(),ImportJobOrderByWithRelationInputSchema ]).optional(),
  cursor: ImportJobWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ImportJobGroupByArgsSchema: z.ZodType<Prisma.ImportJobGroupByArgs> = z.object({
  where: ImportJobWhereInputSchema.optional(),
  orderBy: z.union([ ImportJobOrderByWithAggregationInputSchema.array(),ImportJobOrderByWithAggregationInputSchema ]).optional(),
  by: ImportJobScalarFieldEnumSchema.array(),
  having: ImportJobScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ImportJobFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ImportJobFindUniqueArgs, "select" | "include">> = z.object({
  where: ImportJobWhereUniqueInputSchema,
}).strict() ;

export const ImportJobFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ImportJobFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ImportJobWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindFirstArgsSchema: z.ZodType<Omit<Prisma.AuditLogFindFirstArgs, "select" | "include">> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AuditLogFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindManyArgsSchema: z.ZodType<Omit<Prisma.AuditLogFindManyArgs, "select" | "include">> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogAggregateArgsSchema: z.ZodType<Prisma.AuditLogAggregateArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogGroupByArgsSchema: z.ZodType<Prisma.AuditLogGroupByArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithAggregationInputSchema.array(),AuditLogOrderByWithAggregationInputSchema ]).optional(),
  by: AuditLogScalarFieldEnumSchema.array(),
  having: AuditLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AuditLogFindUniqueArgs, "select" | "include">> = z.object({
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AuditLogFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const ReportingCacheFindFirstArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheFindFirstArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereInputSchema.optional(),
  orderBy: z.union([ ReportingCacheOrderByWithRelationInputSchema.array(),ReportingCacheOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportingCacheWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportingCacheScalarFieldEnumSchema,ReportingCacheScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportingCacheFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereInputSchema.optional(),
  orderBy: z.union([ ReportingCacheOrderByWithRelationInputSchema.array(),ReportingCacheOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportingCacheWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportingCacheScalarFieldEnumSchema,ReportingCacheScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportingCacheFindManyArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheFindManyArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereInputSchema.optional(),
  orderBy: z.union([ ReportingCacheOrderByWithRelationInputSchema.array(),ReportingCacheOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportingCacheWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportingCacheScalarFieldEnumSchema,ReportingCacheScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportingCacheAggregateArgsSchema: z.ZodType<Prisma.ReportingCacheAggregateArgs> = z.object({
  where: ReportingCacheWhereInputSchema.optional(),
  orderBy: z.union([ ReportingCacheOrderByWithRelationInputSchema.array(),ReportingCacheOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportingCacheWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReportingCacheGroupByArgsSchema: z.ZodType<Prisma.ReportingCacheGroupByArgs> = z.object({
  where: ReportingCacheWhereInputSchema.optional(),
  orderBy: z.union([ ReportingCacheOrderByWithAggregationInputSchema.array(),ReportingCacheOrderByWithAggregationInputSchema ]).optional(),
  by: ReportingCacheScalarFieldEnumSchema.array(),
  having: ReportingCacheScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReportingCacheFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheFindUniqueArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereUniqueInputSchema,
}).strict() ;

export const ReportingCacheFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereUniqueInputSchema,
}).strict() ;

export const ROCConfigurationsFindFirstArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsFindFirstArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereInputSchema.optional(),
  orderBy: z.union([ ROCConfigurationsOrderByWithRelationInputSchema.array(),ROCConfigurationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ROCConfigurationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ROCConfigurationsScalarFieldEnumSchema,ROCConfigurationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ROCConfigurationsFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereInputSchema.optional(),
  orderBy: z.union([ ROCConfigurationsOrderByWithRelationInputSchema.array(),ROCConfigurationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ROCConfigurationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ROCConfigurationsScalarFieldEnumSchema,ROCConfigurationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ROCConfigurationsFindManyArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsFindManyArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereInputSchema.optional(),
  orderBy: z.union([ ROCConfigurationsOrderByWithRelationInputSchema.array(),ROCConfigurationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ROCConfigurationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ROCConfigurationsScalarFieldEnumSchema,ROCConfigurationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ROCConfigurationsAggregateArgsSchema: z.ZodType<Prisma.ROCConfigurationsAggregateArgs> = z.object({
  where: ROCConfigurationsWhereInputSchema.optional(),
  orderBy: z.union([ ROCConfigurationsOrderByWithRelationInputSchema.array(),ROCConfigurationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ROCConfigurationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ROCConfigurationsGroupByArgsSchema: z.ZodType<Prisma.ROCConfigurationsGroupByArgs> = z.object({
  where: ROCConfigurationsWhereInputSchema.optional(),
  orderBy: z.union([ ROCConfigurationsOrderByWithAggregationInputSchema.array(),ROCConfigurationsOrderByWithAggregationInputSchema ]).optional(),
  by: ROCConfigurationsScalarFieldEnumSchema.array(),
  having: ROCConfigurationsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ROCConfigurationsFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsFindUniqueArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereUniqueInputSchema,
}).strict() ;

export const ROCConfigurationsFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereUniqueInputSchema,
}).strict() ;

export const ProgressSnapshotsFindFirstArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsFindFirstArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereInputSchema.optional(),
  orderBy: z.union([ ProgressSnapshotsOrderByWithRelationInputSchema.array(),ProgressSnapshotsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProgressSnapshotsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProgressSnapshotsScalarFieldEnumSchema,ProgressSnapshotsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProgressSnapshotsFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereInputSchema.optional(),
  orderBy: z.union([ ProgressSnapshotsOrderByWithRelationInputSchema.array(),ProgressSnapshotsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProgressSnapshotsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProgressSnapshotsScalarFieldEnumSchema,ProgressSnapshotsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProgressSnapshotsFindManyArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsFindManyArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereInputSchema.optional(),
  orderBy: z.union([ ProgressSnapshotsOrderByWithRelationInputSchema.array(),ProgressSnapshotsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProgressSnapshotsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProgressSnapshotsScalarFieldEnumSchema,ProgressSnapshotsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProgressSnapshotsAggregateArgsSchema: z.ZodType<Prisma.ProgressSnapshotsAggregateArgs> = z.object({
  where: ProgressSnapshotsWhereInputSchema.optional(),
  orderBy: z.union([ ProgressSnapshotsOrderByWithRelationInputSchema.array(),ProgressSnapshotsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProgressSnapshotsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProgressSnapshotsGroupByArgsSchema: z.ZodType<Prisma.ProgressSnapshotsGroupByArgs> = z.object({
  where: ProgressSnapshotsWhereInputSchema.optional(),
  orderBy: z.union([ ProgressSnapshotsOrderByWithAggregationInputSchema.array(),ProgressSnapshotsOrderByWithAggregationInputSchema ]).optional(),
  by: ProgressSnapshotsScalarFieldEnumSchema.array(),
  having: ProgressSnapshotsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProgressSnapshotsFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsFindUniqueArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereUniqueInputSchema,
}).strict() ;

export const ProgressSnapshotsFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereUniqueInputSchema,
}).strict() ;

export const ReportGenerationsFindFirstArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsFindFirstArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereInputSchema.optional(),
  orderBy: z.union([ ReportGenerationsOrderByWithRelationInputSchema.array(),ReportGenerationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportGenerationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportGenerationsScalarFieldEnumSchema,ReportGenerationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportGenerationsFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereInputSchema.optional(),
  orderBy: z.union([ ReportGenerationsOrderByWithRelationInputSchema.array(),ReportGenerationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportGenerationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportGenerationsScalarFieldEnumSchema,ReportGenerationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportGenerationsFindManyArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsFindManyArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereInputSchema.optional(),
  orderBy: z.union([ ReportGenerationsOrderByWithRelationInputSchema.array(),ReportGenerationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportGenerationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportGenerationsScalarFieldEnumSchema,ReportGenerationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportGenerationsAggregateArgsSchema: z.ZodType<Prisma.ReportGenerationsAggregateArgs> = z.object({
  where: ReportGenerationsWhereInputSchema.optional(),
  orderBy: z.union([ ReportGenerationsOrderByWithRelationInputSchema.array(),ReportGenerationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportGenerationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReportGenerationsGroupByArgsSchema: z.ZodType<Prisma.ReportGenerationsGroupByArgs> = z.object({
  where: ReportGenerationsWhereInputSchema.optional(),
  orderBy: z.union([ ReportGenerationsOrderByWithAggregationInputSchema.array(),ReportGenerationsOrderByWithAggregationInputSchema ]).optional(),
  by: ReportGenerationsScalarFieldEnumSchema.array(),
  having: ReportGenerationsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReportGenerationsFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsFindUniqueArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereUniqueInputSchema,
}).strict() ;

export const ReportGenerationsFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereUniqueInputSchema,
}).strict() ;

export const WeldTypeFindFirstArgsSchema: z.ZodType<Omit<Prisma.WeldTypeFindFirstArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereInputSchema.optional(),
  orderBy: z.union([ WeldTypeOrderByWithRelationInputSchema.array(),WeldTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: WeldTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WeldTypeScalarFieldEnumSchema,WeldTypeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WeldTypeFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.WeldTypeFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereInputSchema.optional(),
  orderBy: z.union([ WeldTypeOrderByWithRelationInputSchema.array(),WeldTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: WeldTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WeldTypeScalarFieldEnumSchema,WeldTypeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WeldTypeFindManyArgsSchema: z.ZodType<Omit<Prisma.WeldTypeFindManyArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereInputSchema.optional(),
  orderBy: z.union([ WeldTypeOrderByWithRelationInputSchema.array(),WeldTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: WeldTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WeldTypeScalarFieldEnumSchema,WeldTypeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WeldTypeAggregateArgsSchema: z.ZodType<Prisma.WeldTypeAggregateArgs> = z.object({
  where: WeldTypeWhereInputSchema.optional(),
  orderBy: z.union([ WeldTypeOrderByWithRelationInputSchema.array(),WeldTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: WeldTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WeldTypeGroupByArgsSchema: z.ZodType<Prisma.WeldTypeGroupByArgs> = z.object({
  where: WeldTypeWhereInputSchema.optional(),
  orderBy: z.union([ WeldTypeOrderByWithAggregationInputSchema.array(),WeldTypeOrderByWithAggregationInputSchema ]).optional(),
  by: WeldTypeScalarFieldEnumSchema.array(),
  having: WeldTypeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WeldTypeFindUniqueArgsSchema: z.ZodType<Omit<Prisma.WeldTypeFindUniqueArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereUniqueInputSchema,
}).strict() ;

export const WeldTypeFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.WeldTypeFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereUniqueInputSchema,
}).strict() ;

export const WelderFindFirstArgsSchema: z.ZodType<Omit<Prisma.WelderFindFirstArgs, "select" | "include">> = z.object({
  where: WelderWhereInputSchema.optional(),
  orderBy: z.union([ WelderOrderByWithRelationInputSchema.array(),WelderOrderByWithRelationInputSchema ]).optional(),
  cursor: WelderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WelderScalarFieldEnumSchema,WelderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WelderFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.WelderFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: WelderWhereInputSchema.optional(),
  orderBy: z.union([ WelderOrderByWithRelationInputSchema.array(),WelderOrderByWithRelationInputSchema ]).optional(),
  cursor: WelderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WelderScalarFieldEnumSchema,WelderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WelderFindManyArgsSchema: z.ZodType<Omit<Prisma.WelderFindManyArgs, "select" | "include">> = z.object({
  where: WelderWhereInputSchema.optional(),
  orderBy: z.union([ WelderOrderByWithRelationInputSchema.array(),WelderOrderByWithRelationInputSchema ]).optional(),
  cursor: WelderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WelderScalarFieldEnumSchema,WelderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WelderAggregateArgsSchema: z.ZodType<Prisma.WelderAggregateArgs> = z.object({
  where: WelderWhereInputSchema.optional(),
  orderBy: z.union([ WelderOrderByWithRelationInputSchema.array(),WelderOrderByWithRelationInputSchema ]).optional(),
  cursor: WelderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WelderGroupByArgsSchema: z.ZodType<Prisma.WelderGroupByArgs> = z.object({
  where: WelderWhereInputSchema.optional(),
  orderBy: z.union([ WelderOrderByWithAggregationInputSchema.array(),WelderOrderByWithAggregationInputSchema ]).optional(),
  by: WelderScalarFieldEnumSchema.array(),
  having: WelderScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WelderFindUniqueArgsSchema: z.ZodType<Omit<Prisma.WelderFindUniqueArgs, "select" | "include">> = z.object({
  where: WelderWhereUniqueInputSchema,
}).strict() ;

export const WelderFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.WelderFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: WelderWhereUniqueInputSchema,
}).strict() ;

export const FieldWeldFindFirstArgsSchema: z.ZodType<Omit<Prisma.FieldWeldFindFirstArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereInputSchema.optional(),
  orderBy: z.union([ FieldWeldOrderByWithRelationInputSchema.array(),FieldWeldOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldWeldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FieldWeldScalarFieldEnumSchema,FieldWeldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FieldWeldFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.FieldWeldFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereInputSchema.optional(),
  orderBy: z.union([ FieldWeldOrderByWithRelationInputSchema.array(),FieldWeldOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldWeldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FieldWeldScalarFieldEnumSchema,FieldWeldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FieldWeldFindManyArgsSchema: z.ZodType<Omit<Prisma.FieldWeldFindManyArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereInputSchema.optional(),
  orderBy: z.union([ FieldWeldOrderByWithRelationInputSchema.array(),FieldWeldOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldWeldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FieldWeldScalarFieldEnumSchema,FieldWeldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FieldWeldAggregateArgsSchema: z.ZodType<Prisma.FieldWeldAggregateArgs> = z.object({
  where: FieldWeldWhereInputSchema.optional(),
  orderBy: z.union([ FieldWeldOrderByWithRelationInputSchema.array(),FieldWeldOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldWeldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FieldWeldGroupByArgsSchema: z.ZodType<Prisma.FieldWeldGroupByArgs> = z.object({
  where: FieldWeldWhereInputSchema.optional(),
  orderBy: z.union([ FieldWeldOrderByWithAggregationInputSchema.array(),FieldWeldOrderByWithAggregationInputSchema ]).optional(),
  by: FieldWeldScalarFieldEnumSchema.array(),
  having: FieldWeldScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FieldWeldFindUniqueArgsSchema: z.ZodType<Omit<Prisma.FieldWeldFindUniqueArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereUniqueInputSchema,
}).strict() ;

export const FieldWeldFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.FieldWeldFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessLeadFindFirstArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadFindFirstArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessLeadOrderByWithRelationInputSchema.array(),EarlyAccessLeadOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessLeadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EarlyAccessLeadScalarFieldEnumSchema,EarlyAccessLeadScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EarlyAccessLeadFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadFindFirstOrThrowArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessLeadOrderByWithRelationInputSchema.array(),EarlyAccessLeadOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessLeadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EarlyAccessLeadScalarFieldEnumSchema,EarlyAccessLeadScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EarlyAccessLeadFindManyArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadFindManyArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessLeadOrderByWithRelationInputSchema.array(),EarlyAccessLeadOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessLeadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EarlyAccessLeadScalarFieldEnumSchema,EarlyAccessLeadScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EarlyAccessLeadAggregateArgsSchema: z.ZodType<Prisma.EarlyAccessLeadAggregateArgs> = z.object({
  where: EarlyAccessLeadWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessLeadOrderByWithRelationInputSchema.array(),EarlyAccessLeadOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessLeadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EarlyAccessLeadGroupByArgsSchema: z.ZodType<Prisma.EarlyAccessLeadGroupByArgs> = z.object({
  where: EarlyAccessLeadWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessLeadOrderByWithAggregationInputSchema.array(),EarlyAccessLeadOrderByWithAggregationInputSchema ]).optional(),
  by: EarlyAccessLeadScalarFieldEnumSchema.array(),
  having: EarlyAccessLeadScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EarlyAccessLeadFindUniqueArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadFindUniqueArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessLeadFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadFindUniqueOrThrowArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Omit<Prisma.UserCreateArgs, "select" | "include">> = z.object({
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Omit<Prisma.UserUpsertArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Omit<Prisma.UserDeleteArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Omit<Prisma.UserUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Omit<Prisma.SessionCreateArgs, "select" | "include">> = z.object({
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Omit<Prisma.SessionUpsertArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Omit<Prisma.SessionDeleteArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Omit<Prisma.SessionUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Omit<Prisma.AccountCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Omit<Prisma.AccountUpsertArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Omit<Prisma.AccountDeleteArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Omit<Prisma.AccountUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationCreateArgsSchema: z.ZodType<Omit<Prisma.VerificationCreateArgs, "select">> = z.object({
  data: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationUpsertArgsSchema: z.ZodType<Omit<Prisma.VerificationUpsertArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
  create: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
  update: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationCreateManyArgsSchema: z.ZodType<Prisma.VerificationCreateManyArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationCreateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationDeleteArgsSchema: z.ZodType<Omit<Prisma.VerificationDeleteArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateArgsSchema: z.ZodType<Omit<Prisma.VerificationUpdateArgs, "select">> = z.object({
  data: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateManyArgsSchema: z.ZodType<Prisma.VerificationUpdateManyArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationDeleteManyArgsSchema: z.ZodType<Prisma.VerificationDeleteManyArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyCreateArgsSchema: z.ZodType<Omit<Prisma.PasskeyCreateArgs, "select" | "include">> = z.object({
  data: z.union([ PasskeyCreateInputSchema,PasskeyUncheckedCreateInputSchema ]),
}).strict() ;

export const PasskeyUpsertArgsSchema: z.ZodType<Omit<Prisma.PasskeyUpsertArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
  create: z.union([ PasskeyCreateInputSchema,PasskeyUncheckedCreateInputSchema ]),
  update: z.union([ PasskeyUpdateInputSchema,PasskeyUncheckedUpdateInputSchema ]),
}).strict() ;

export const PasskeyCreateManyArgsSchema: z.ZodType<Prisma.PasskeyCreateManyArgs> = z.object({
  data: z.union([ PasskeyCreateManyInputSchema,PasskeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasskeyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PasskeyCreateManyAndReturnArgs> = z.object({
  data: z.union([ PasskeyCreateManyInputSchema,PasskeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasskeyDeleteArgsSchema: z.ZodType<Omit<Prisma.PasskeyDeleteArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyUpdateArgsSchema: z.ZodType<Omit<Prisma.PasskeyUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ PasskeyUpdateInputSchema,PasskeyUncheckedUpdateInputSchema ]),
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyUpdateManyArgsSchema: z.ZodType<Prisma.PasskeyUpdateManyArgs> = z.object({
  data: z.union([ PasskeyUpdateManyMutationInputSchema,PasskeyUncheckedUpdateManyInputSchema ]),
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PasskeyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PasskeyUpdateManyMutationInputSchema,PasskeyUncheckedUpdateManyInputSchema ]),
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyDeleteManyArgsSchema: z.ZodType<Prisma.PasskeyDeleteManyArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorCreateArgsSchema: z.ZodType<Omit<Prisma.TwoFactorCreateArgs, "select" | "include">> = z.object({
  data: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
}).strict() ;

export const TwoFactorUpsertArgsSchema: z.ZodType<Omit<Prisma.TwoFactorUpsertArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
  create: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
  update: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
}).strict() ;

export const TwoFactorCreateManyArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TwoFactorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyAndReturnArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TwoFactorDeleteArgsSchema: z.ZodType<Omit<Prisma.TwoFactorDeleteArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateArgsSchema: z.ZodType<Omit<Prisma.TwoFactorUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateManyArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorDeleteManyArgsSchema: z.ZodType<Prisma.TwoFactorDeleteManyArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Omit<Prisma.OrganizationCreateArgs, "select" | "include">> = z.object({
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Omit<Prisma.OrganizationUpsertArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Omit<Prisma.OrganizationDeleteArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Omit<Prisma.OrganizationUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberCreateArgsSchema: z.ZodType<Omit<Prisma.MemberCreateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
}).strict() ;

export const MemberUpsertArgsSchema: z.ZodType<Omit<Prisma.MemberUpsertArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
  create: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
  update: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
}).strict() ;

export const MemberCreateManyArgsSchema: z.ZodType<Prisma.MemberCreateManyArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberCreateManyAndReturnArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberDeleteArgsSchema: z.ZodType<Omit<Prisma.MemberDeleteArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateArgsSchema: z.ZodType<Omit<Prisma.MemberUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateManyArgsSchema: z.ZodType<Prisma.MemberUpdateManyArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberDeleteManyArgsSchema: z.ZodType<Prisma.MemberDeleteManyArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Omit<Prisma.InvitationCreateArgs, "select" | "include">> = z.object({
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Omit<Prisma.InvitationUpsertArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Omit<Prisma.InvitationDeleteArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Omit<Prisma.InvitationUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseCreateArgsSchema: z.ZodType<Omit<Prisma.PurchaseCreateArgs, "select" | "include">> = z.object({
  data: z.union([ PurchaseCreateInputSchema,PurchaseUncheckedCreateInputSchema ]),
}).strict() ;

export const PurchaseUpsertArgsSchema: z.ZodType<Omit<Prisma.PurchaseUpsertArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
  create: z.union([ PurchaseCreateInputSchema,PurchaseUncheckedCreateInputSchema ]),
  update: z.union([ PurchaseUpdateInputSchema,PurchaseUncheckedUpdateInputSchema ]),
}).strict() ;

export const PurchaseCreateManyArgsSchema: z.ZodType<Prisma.PurchaseCreateManyArgs> = z.object({
  data: z.union([ PurchaseCreateManyInputSchema,PurchaseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurchaseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PurchaseCreateManyAndReturnArgs> = z.object({
  data: z.union([ PurchaseCreateManyInputSchema,PurchaseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurchaseDeleteArgsSchema: z.ZodType<Omit<Prisma.PurchaseDeleteArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseUpdateArgsSchema: z.ZodType<Omit<Prisma.PurchaseUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ PurchaseUpdateInputSchema,PurchaseUncheckedUpdateInputSchema ]),
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseUpdateManyArgsSchema: z.ZodType<Prisma.PurchaseUpdateManyArgs> = z.object({
  data: z.union([ PurchaseUpdateManyMutationInputSchema,PurchaseUncheckedUpdateManyInputSchema ]),
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PurchaseUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PurchaseUpdateManyMutationInputSchema,PurchaseUncheckedUpdateManyInputSchema ]),
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseDeleteManyArgsSchema: z.ZodType<Prisma.PurchaseDeleteManyArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatCreateArgsSchema: z.ZodType<Omit<Prisma.AiChatCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AiChatCreateInputSchema,AiChatUncheckedCreateInputSchema ]),
}).strict() ;

export const AiChatUpsertArgsSchema: z.ZodType<Omit<Prisma.AiChatUpsertArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
  create: z.union([ AiChatCreateInputSchema,AiChatUncheckedCreateInputSchema ]),
  update: z.union([ AiChatUpdateInputSchema,AiChatUncheckedUpdateInputSchema ]),
}).strict() ;

export const AiChatCreateManyArgsSchema: z.ZodType<Prisma.AiChatCreateManyArgs> = z.object({
  data: z.union([ AiChatCreateManyInputSchema,AiChatCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AiChatCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AiChatCreateManyAndReturnArgs> = z.object({
  data: z.union([ AiChatCreateManyInputSchema,AiChatCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AiChatDeleteArgsSchema: z.ZodType<Omit<Prisma.AiChatDeleteArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatUpdateArgsSchema: z.ZodType<Omit<Prisma.AiChatUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AiChatUpdateInputSchema,AiChatUncheckedUpdateInputSchema ]),
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatUpdateManyArgsSchema: z.ZodType<Prisma.AiChatUpdateManyArgs> = z.object({
  data: z.union([ AiChatUpdateManyMutationInputSchema,AiChatUncheckedUpdateManyInputSchema ]),
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AiChatUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AiChatUpdateManyMutationInputSchema,AiChatUncheckedUpdateManyInputSchema ]),
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatDeleteManyArgsSchema: z.ZodType<Prisma.AiChatDeleteManyArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProjectCreateArgsSchema: z.ZodType<Omit<Prisma.ProjectCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ProjectCreateInputSchema,ProjectUncheckedCreateInputSchema ]),
}).strict() ;

export const ProjectUpsertArgsSchema: z.ZodType<Omit<Prisma.ProjectUpsertArgs, "select" | "include">> = z.object({
  where: ProjectWhereUniqueInputSchema,
  create: z.union([ ProjectCreateInputSchema,ProjectUncheckedCreateInputSchema ]),
  update: z.union([ ProjectUpdateInputSchema,ProjectUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProjectCreateManyArgsSchema: z.ZodType<Prisma.ProjectCreateManyArgs> = z.object({
  data: z.union([ ProjectCreateManyInputSchema,ProjectCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProjectCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProjectCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProjectCreateManyInputSchema,ProjectCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProjectDeleteArgsSchema: z.ZodType<Omit<Prisma.ProjectDeleteArgs, "select" | "include">> = z.object({
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const ProjectUpdateArgsSchema: z.ZodType<Omit<Prisma.ProjectUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ProjectUpdateInputSchema,ProjectUncheckedUpdateInputSchema ]),
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const ProjectUpdateManyArgsSchema: z.ZodType<Prisma.ProjectUpdateManyArgs> = z.object({
  data: z.union([ ProjectUpdateManyMutationInputSchema,ProjectUncheckedUpdateManyInputSchema ]),
  where: ProjectWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProjectUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProjectUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProjectUpdateManyMutationInputSchema,ProjectUncheckedUpdateManyInputSchema ]),
  where: ProjectWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProjectDeleteManyArgsSchema: z.ZodType<Prisma.ProjectDeleteManyArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DrawingCreateArgsSchema: z.ZodType<Omit<Prisma.DrawingCreateArgs, "select" | "include">> = z.object({
  data: z.union([ DrawingCreateInputSchema,DrawingUncheckedCreateInputSchema ]),
}).strict() ;

export const DrawingUpsertArgsSchema: z.ZodType<Omit<Prisma.DrawingUpsertArgs, "select" | "include">> = z.object({
  where: DrawingWhereUniqueInputSchema,
  create: z.union([ DrawingCreateInputSchema,DrawingUncheckedCreateInputSchema ]),
  update: z.union([ DrawingUpdateInputSchema,DrawingUncheckedUpdateInputSchema ]),
}).strict() ;

export const DrawingCreateManyArgsSchema: z.ZodType<Prisma.DrawingCreateManyArgs> = z.object({
  data: z.union([ DrawingCreateManyInputSchema,DrawingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DrawingCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DrawingCreateManyAndReturnArgs> = z.object({
  data: z.union([ DrawingCreateManyInputSchema,DrawingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DrawingDeleteArgsSchema: z.ZodType<Omit<Prisma.DrawingDeleteArgs, "select" | "include">> = z.object({
  where: DrawingWhereUniqueInputSchema,
}).strict() ;

export const DrawingUpdateArgsSchema: z.ZodType<Omit<Prisma.DrawingUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ DrawingUpdateInputSchema,DrawingUncheckedUpdateInputSchema ]),
  where: DrawingWhereUniqueInputSchema,
}).strict() ;

export const DrawingUpdateManyArgsSchema: z.ZodType<Prisma.DrawingUpdateManyArgs> = z.object({
  data: z.union([ DrawingUpdateManyMutationInputSchema,DrawingUncheckedUpdateManyInputSchema ]),
  where: DrawingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DrawingUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.DrawingUpdateManyAndReturnArgs> = z.object({
  data: z.union([ DrawingUpdateManyMutationInputSchema,DrawingUncheckedUpdateManyInputSchema ]),
  where: DrawingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DrawingDeleteManyArgsSchema: z.ZodType<Prisma.DrawingDeleteManyArgs> = z.object({
  where: DrawingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MilestoneTemplateCreateArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateCreateArgs, "select" | "include">> = z.object({
  data: z.union([ MilestoneTemplateCreateInputSchema,MilestoneTemplateUncheckedCreateInputSchema ]),
}).strict() ;

export const MilestoneTemplateUpsertArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateUpsertArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereUniqueInputSchema,
  create: z.union([ MilestoneTemplateCreateInputSchema,MilestoneTemplateUncheckedCreateInputSchema ]),
  update: z.union([ MilestoneTemplateUpdateInputSchema,MilestoneTemplateUncheckedUpdateInputSchema ]),
}).strict() ;

export const MilestoneTemplateCreateManyArgsSchema: z.ZodType<Prisma.MilestoneTemplateCreateManyArgs> = z.object({
  data: z.union([ MilestoneTemplateCreateManyInputSchema,MilestoneTemplateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MilestoneTemplateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MilestoneTemplateCreateManyAndReturnArgs> = z.object({
  data: z.union([ MilestoneTemplateCreateManyInputSchema,MilestoneTemplateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MilestoneTemplateDeleteArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateDeleteArgs, "select" | "include">> = z.object({
  where: MilestoneTemplateWhereUniqueInputSchema,
}).strict() ;

export const MilestoneTemplateUpdateArgsSchema: z.ZodType<Omit<Prisma.MilestoneTemplateUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ MilestoneTemplateUpdateInputSchema,MilestoneTemplateUncheckedUpdateInputSchema ]),
  where: MilestoneTemplateWhereUniqueInputSchema,
}).strict() ;

export const MilestoneTemplateUpdateManyArgsSchema: z.ZodType<Prisma.MilestoneTemplateUpdateManyArgs> = z.object({
  data: z.union([ MilestoneTemplateUpdateManyMutationInputSchema,MilestoneTemplateUncheckedUpdateManyInputSchema ]),
  where: MilestoneTemplateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MilestoneTemplateUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MilestoneTemplateUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MilestoneTemplateUpdateManyMutationInputSchema,MilestoneTemplateUncheckedUpdateManyInputSchema ]),
  where: MilestoneTemplateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MilestoneTemplateDeleteManyArgsSchema: z.ZodType<Prisma.MilestoneTemplateDeleteManyArgs> = z.object({
  where: MilestoneTemplateWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ComponentCreateArgsSchema: z.ZodType<Omit<Prisma.ComponentCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ComponentCreateInputSchema,ComponentUncheckedCreateInputSchema ]),
}).strict() ;

export const ComponentUpsertArgsSchema: z.ZodType<Omit<Prisma.ComponentUpsertArgs, "select" | "include">> = z.object({
  where: ComponentWhereUniqueInputSchema,
  create: z.union([ ComponentCreateInputSchema,ComponentUncheckedCreateInputSchema ]),
  update: z.union([ ComponentUpdateInputSchema,ComponentUncheckedUpdateInputSchema ]),
}).strict() ;

export const ComponentCreateManyArgsSchema: z.ZodType<Prisma.ComponentCreateManyArgs> = z.object({
  data: z.union([ ComponentCreateManyInputSchema,ComponentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ComponentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ComponentCreateManyAndReturnArgs> = z.object({
  data: z.union([ ComponentCreateManyInputSchema,ComponentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ComponentDeleteArgsSchema: z.ZodType<Omit<Prisma.ComponentDeleteArgs, "select" | "include">> = z.object({
  where: ComponentWhereUniqueInputSchema,
}).strict() ;

export const ComponentUpdateArgsSchema: z.ZodType<Omit<Prisma.ComponentUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ComponentUpdateInputSchema,ComponentUncheckedUpdateInputSchema ]),
  where: ComponentWhereUniqueInputSchema,
}).strict() ;

export const ComponentUpdateManyArgsSchema: z.ZodType<Prisma.ComponentUpdateManyArgs> = z.object({
  data: z.union([ ComponentUpdateManyMutationInputSchema,ComponentUncheckedUpdateManyInputSchema ]),
  where: ComponentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ComponentUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ComponentUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ComponentUpdateManyMutationInputSchema,ComponentUncheckedUpdateManyInputSchema ]),
  where: ComponentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ComponentDeleteManyArgsSchema: z.ZodType<Prisma.ComponentDeleteManyArgs> = z.object({
  where: ComponentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ComponentMilestoneCreateArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ComponentMilestoneCreateInputSchema,ComponentMilestoneUncheckedCreateInputSchema ]),
}).strict() ;

export const ComponentMilestoneUpsertArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneUpsertArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereUniqueInputSchema,
  create: z.union([ ComponentMilestoneCreateInputSchema,ComponentMilestoneUncheckedCreateInputSchema ]),
  update: z.union([ ComponentMilestoneUpdateInputSchema,ComponentMilestoneUncheckedUpdateInputSchema ]),
}).strict() ;

export const ComponentMilestoneCreateManyArgsSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyArgs> = z.object({
  data: z.union([ ComponentMilestoneCreateManyInputSchema,ComponentMilestoneCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ComponentMilestoneCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ComponentMilestoneCreateManyAndReturnArgs> = z.object({
  data: z.union([ ComponentMilestoneCreateManyInputSchema,ComponentMilestoneCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ComponentMilestoneDeleteArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneDeleteArgs, "select" | "include">> = z.object({
  where: ComponentMilestoneWhereUniqueInputSchema,
}).strict() ;

export const ComponentMilestoneUpdateArgsSchema: z.ZodType<Omit<Prisma.ComponentMilestoneUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ComponentMilestoneUpdateInputSchema,ComponentMilestoneUncheckedUpdateInputSchema ]),
  where: ComponentMilestoneWhereUniqueInputSchema,
}).strict() ;

export const ComponentMilestoneUpdateManyArgsSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyArgs> = z.object({
  data: z.union([ ComponentMilestoneUpdateManyMutationInputSchema,ComponentMilestoneUncheckedUpdateManyInputSchema ]),
  where: ComponentMilestoneWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ComponentMilestoneUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ComponentMilestoneUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ComponentMilestoneUpdateManyMutationInputSchema,ComponentMilestoneUncheckedUpdateManyInputSchema ]),
  where: ComponentMilestoneWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ComponentMilestoneDeleteManyArgsSchema: z.ZodType<Prisma.ComponentMilestoneDeleteManyArgs> = z.object({
  where: ComponentMilestoneWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ImportJobCreateArgsSchema: z.ZodType<Omit<Prisma.ImportJobCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ImportJobCreateInputSchema,ImportJobUncheckedCreateInputSchema ]),
}).strict() ;

export const ImportJobUpsertArgsSchema: z.ZodType<Omit<Prisma.ImportJobUpsertArgs, "select" | "include">> = z.object({
  where: ImportJobWhereUniqueInputSchema,
  create: z.union([ ImportJobCreateInputSchema,ImportJobUncheckedCreateInputSchema ]),
  update: z.union([ ImportJobUpdateInputSchema,ImportJobUncheckedUpdateInputSchema ]),
}).strict() ;

export const ImportJobCreateManyArgsSchema: z.ZodType<Prisma.ImportJobCreateManyArgs> = z.object({
  data: z.union([ ImportJobCreateManyInputSchema,ImportJobCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ImportJobCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ImportJobCreateManyAndReturnArgs> = z.object({
  data: z.union([ ImportJobCreateManyInputSchema,ImportJobCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ImportJobDeleteArgsSchema: z.ZodType<Omit<Prisma.ImportJobDeleteArgs, "select" | "include">> = z.object({
  where: ImportJobWhereUniqueInputSchema,
}).strict() ;

export const ImportJobUpdateArgsSchema: z.ZodType<Omit<Prisma.ImportJobUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ImportJobUpdateInputSchema,ImportJobUncheckedUpdateInputSchema ]),
  where: ImportJobWhereUniqueInputSchema,
}).strict() ;

export const ImportJobUpdateManyArgsSchema: z.ZodType<Prisma.ImportJobUpdateManyArgs> = z.object({
  data: z.union([ ImportJobUpdateManyMutationInputSchema,ImportJobUncheckedUpdateManyInputSchema ]),
  where: ImportJobWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ImportJobUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ImportJobUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ImportJobUpdateManyMutationInputSchema,ImportJobUncheckedUpdateManyInputSchema ]),
  where: ImportJobWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ImportJobDeleteManyArgsSchema: z.ZodType<Prisma.ImportJobDeleteManyArgs> = z.object({
  where: ImportJobWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogCreateArgsSchema: z.ZodType<Omit<Prisma.AuditLogCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
}).strict() ;

export const AuditLogUpsertArgsSchema: z.ZodType<Omit<Prisma.AuditLogUpsertArgs, "select" | "include">> = z.object({
  where: AuditLogWhereUniqueInputSchema,
  create: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
  update: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const AuditLogCreateManyArgsSchema: z.ZodType<Prisma.AuditLogCreateManyArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuditLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AuditLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuditLogDeleteArgsSchema: z.ZodType<Omit<Prisma.AuditLogDeleteArgs, "select" | "include">> = z.object({
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateArgsSchema: z.ZodType<Omit<Prisma.AuditLogUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateManyArgsSchema: z.ZodType<Prisma.AuditLogUpdateManyArgs> = z.object({
  data: z.union([ AuditLogUpdateManyMutationInputSchema,AuditLogUncheckedUpdateManyInputSchema ]),
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AuditLogUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AuditLogUpdateManyMutationInputSchema,AuditLogUncheckedUpdateManyInputSchema ]),
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogDeleteManyArgsSchema: z.ZodType<Prisma.AuditLogDeleteManyArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportingCacheCreateArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ReportingCacheCreateInputSchema,ReportingCacheUncheckedCreateInputSchema ]),
}).strict() ;

export const ReportingCacheUpsertArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheUpsertArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereUniqueInputSchema,
  create: z.union([ ReportingCacheCreateInputSchema,ReportingCacheUncheckedCreateInputSchema ]),
  update: z.union([ ReportingCacheUpdateInputSchema,ReportingCacheUncheckedUpdateInputSchema ]),
}).strict() ;

export const ReportingCacheCreateManyArgsSchema: z.ZodType<Prisma.ReportingCacheCreateManyArgs> = z.object({
  data: z.union([ ReportingCacheCreateManyInputSchema,ReportingCacheCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReportingCacheCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ReportingCacheCreateManyAndReturnArgs> = z.object({
  data: z.union([ ReportingCacheCreateManyInputSchema,ReportingCacheCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReportingCacheDeleteArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheDeleteArgs, "select" | "include">> = z.object({
  where: ReportingCacheWhereUniqueInputSchema,
}).strict() ;

export const ReportingCacheUpdateArgsSchema: z.ZodType<Omit<Prisma.ReportingCacheUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ReportingCacheUpdateInputSchema,ReportingCacheUncheckedUpdateInputSchema ]),
  where: ReportingCacheWhereUniqueInputSchema,
}).strict() ;

export const ReportingCacheUpdateManyArgsSchema: z.ZodType<Prisma.ReportingCacheUpdateManyArgs> = z.object({
  data: z.union([ ReportingCacheUpdateManyMutationInputSchema,ReportingCacheUncheckedUpdateManyInputSchema ]),
  where: ReportingCacheWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportingCacheUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ReportingCacheUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ReportingCacheUpdateManyMutationInputSchema,ReportingCacheUncheckedUpdateManyInputSchema ]),
  where: ReportingCacheWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportingCacheDeleteManyArgsSchema: z.ZodType<Prisma.ReportingCacheDeleteManyArgs> = z.object({
  where: ReportingCacheWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ROCConfigurationsCreateArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ROCConfigurationsCreateInputSchema,ROCConfigurationsUncheckedCreateInputSchema ]),
}).strict() ;

export const ROCConfigurationsUpsertArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsUpsertArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereUniqueInputSchema,
  create: z.union([ ROCConfigurationsCreateInputSchema,ROCConfigurationsUncheckedCreateInputSchema ]),
  update: z.union([ ROCConfigurationsUpdateInputSchema,ROCConfigurationsUncheckedUpdateInputSchema ]),
}).strict() ;

export const ROCConfigurationsCreateManyArgsSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyArgs> = z.object({
  data: z.union([ ROCConfigurationsCreateManyInputSchema,ROCConfigurationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ROCConfigurationsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ROCConfigurationsCreateManyAndReturnArgs> = z.object({
  data: z.union([ ROCConfigurationsCreateManyInputSchema,ROCConfigurationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ROCConfigurationsDeleteArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsDeleteArgs, "select" | "include">> = z.object({
  where: ROCConfigurationsWhereUniqueInputSchema,
}).strict() ;

export const ROCConfigurationsUpdateArgsSchema: z.ZodType<Omit<Prisma.ROCConfigurationsUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ROCConfigurationsUpdateInputSchema,ROCConfigurationsUncheckedUpdateInputSchema ]),
  where: ROCConfigurationsWhereUniqueInputSchema,
}).strict() ;

export const ROCConfigurationsUpdateManyArgsSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyArgs> = z.object({
  data: z.union([ ROCConfigurationsUpdateManyMutationInputSchema,ROCConfigurationsUncheckedUpdateManyInputSchema ]),
  where: ROCConfigurationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ROCConfigurationsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ROCConfigurationsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ROCConfigurationsUpdateManyMutationInputSchema,ROCConfigurationsUncheckedUpdateManyInputSchema ]),
  where: ROCConfigurationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ROCConfigurationsDeleteManyArgsSchema: z.ZodType<Prisma.ROCConfigurationsDeleteManyArgs> = z.object({
  where: ROCConfigurationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProgressSnapshotsCreateArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ProgressSnapshotsCreateInputSchema,ProgressSnapshotsUncheckedCreateInputSchema ]),
}).strict() ;

export const ProgressSnapshotsUpsertArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsUpsertArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereUniqueInputSchema,
  create: z.union([ ProgressSnapshotsCreateInputSchema,ProgressSnapshotsUncheckedCreateInputSchema ]),
  update: z.union([ ProgressSnapshotsUpdateInputSchema,ProgressSnapshotsUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProgressSnapshotsCreateManyArgsSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyArgs> = z.object({
  data: z.union([ ProgressSnapshotsCreateManyInputSchema,ProgressSnapshotsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProgressSnapshotsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProgressSnapshotsCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProgressSnapshotsCreateManyInputSchema,ProgressSnapshotsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProgressSnapshotsDeleteArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsDeleteArgs, "select" | "include">> = z.object({
  where: ProgressSnapshotsWhereUniqueInputSchema,
}).strict() ;

export const ProgressSnapshotsUpdateArgsSchema: z.ZodType<Omit<Prisma.ProgressSnapshotsUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ProgressSnapshotsUpdateInputSchema,ProgressSnapshotsUncheckedUpdateInputSchema ]),
  where: ProgressSnapshotsWhereUniqueInputSchema,
}).strict() ;

export const ProgressSnapshotsUpdateManyArgsSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyArgs> = z.object({
  data: z.union([ ProgressSnapshotsUpdateManyMutationInputSchema,ProgressSnapshotsUncheckedUpdateManyInputSchema ]),
  where: ProgressSnapshotsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProgressSnapshotsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProgressSnapshotsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProgressSnapshotsUpdateManyMutationInputSchema,ProgressSnapshotsUncheckedUpdateManyInputSchema ]),
  where: ProgressSnapshotsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProgressSnapshotsDeleteManyArgsSchema: z.ZodType<Prisma.ProgressSnapshotsDeleteManyArgs> = z.object({
  where: ProgressSnapshotsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportGenerationsCreateArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ReportGenerationsCreateInputSchema,ReportGenerationsUncheckedCreateInputSchema ]),
}).strict() ;

export const ReportGenerationsUpsertArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsUpsertArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereUniqueInputSchema,
  create: z.union([ ReportGenerationsCreateInputSchema,ReportGenerationsUncheckedCreateInputSchema ]),
  update: z.union([ ReportGenerationsUpdateInputSchema,ReportGenerationsUncheckedUpdateInputSchema ]),
}).strict() ;

export const ReportGenerationsCreateManyArgsSchema: z.ZodType<Prisma.ReportGenerationsCreateManyArgs> = z.object({
  data: z.union([ ReportGenerationsCreateManyInputSchema,ReportGenerationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReportGenerationsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ReportGenerationsCreateManyAndReturnArgs> = z.object({
  data: z.union([ ReportGenerationsCreateManyInputSchema,ReportGenerationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ReportGenerationsDeleteArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsDeleteArgs, "select" | "include">> = z.object({
  where: ReportGenerationsWhereUniqueInputSchema,
}).strict() ;

export const ReportGenerationsUpdateArgsSchema: z.ZodType<Omit<Prisma.ReportGenerationsUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ReportGenerationsUpdateInputSchema,ReportGenerationsUncheckedUpdateInputSchema ]),
  where: ReportGenerationsWhereUniqueInputSchema,
}).strict() ;

export const ReportGenerationsUpdateManyArgsSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyArgs> = z.object({
  data: z.union([ ReportGenerationsUpdateManyMutationInputSchema,ReportGenerationsUncheckedUpdateManyInputSchema ]),
  where: ReportGenerationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportGenerationsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ReportGenerationsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ReportGenerationsUpdateManyMutationInputSchema,ReportGenerationsUncheckedUpdateManyInputSchema ]),
  where: ReportGenerationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportGenerationsDeleteManyArgsSchema: z.ZodType<Prisma.ReportGenerationsDeleteManyArgs> = z.object({
  where: ReportGenerationsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WeldTypeCreateArgsSchema: z.ZodType<Omit<Prisma.WeldTypeCreateArgs, "select" | "include">> = z.object({
  data: z.union([ WeldTypeCreateInputSchema,WeldTypeUncheckedCreateInputSchema ]),
}).strict() ;

export const WeldTypeUpsertArgsSchema: z.ZodType<Omit<Prisma.WeldTypeUpsertArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereUniqueInputSchema,
  create: z.union([ WeldTypeCreateInputSchema,WeldTypeUncheckedCreateInputSchema ]),
  update: z.union([ WeldTypeUpdateInputSchema,WeldTypeUncheckedUpdateInputSchema ]),
}).strict() ;

export const WeldTypeCreateManyArgsSchema: z.ZodType<Prisma.WeldTypeCreateManyArgs> = z.object({
  data: z.union([ WeldTypeCreateManyInputSchema,WeldTypeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WeldTypeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WeldTypeCreateManyAndReturnArgs> = z.object({
  data: z.union([ WeldTypeCreateManyInputSchema,WeldTypeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WeldTypeDeleteArgsSchema: z.ZodType<Omit<Prisma.WeldTypeDeleteArgs, "select" | "include">> = z.object({
  where: WeldTypeWhereUniqueInputSchema,
}).strict() ;

export const WeldTypeUpdateArgsSchema: z.ZodType<Omit<Prisma.WeldTypeUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ WeldTypeUpdateInputSchema,WeldTypeUncheckedUpdateInputSchema ]),
  where: WeldTypeWhereUniqueInputSchema,
}).strict() ;

export const WeldTypeUpdateManyArgsSchema: z.ZodType<Prisma.WeldTypeUpdateManyArgs> = z.object({
  data: z.union([ WeldTypeUpdateManyMutationInputSchema,WeldTypeUncheckedUpdateManyInputSchema ]),
  where: WeldTypeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WeldTypeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.WeldTypeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ WeldTypeUpdateManyMutationInputSchema,WeldTypeUncheckedUpdateManyInputSchema ]),
  where: WeldTypeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WeldTypeDeleteManyArgsSchema: z.ZodType<Prisma.WeldTypeDeleteManyArgs> = z.object({
  where: WeldTypeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WelderCreateArgsSchema: z.ZodType<Omit<Prisma.WelderCreateArgs, "select" | "include">> = z.object({
  data: z.union([ WelderCreateInputSchema,WelderUncheckedCreateInputSchema ]),
}).strict() ;

export const WelderUpsertArgsSchema: z.ZodType<Omit<Prisma.WelderUpsertArgs, "select" | "include">> = z.object({
  where: WelderWhereUniqueInputSchema,
  create: z.union([ WelderCreateInputSchema,WelderUncheckedCreateInputSchema ]),
  update: z.union([ WelderUpdateInputSchema,WelderUncheckedUpdateInputSchema ]),
}).strict() ;

export const WelderCreateManyArgsSchema: z.ZodType<Prisma.WelderCreateManyArgs> = z.object({
  data: z.union([ WelderCreateManyInputSchema,WelderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WelderCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WelderCreateManyAndReturnArgs> = z.object({
  data: z.union([ WelderCreateManyInputSchema,WelderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WelderDeleteArgsSchema: z.ZodType<Omit<Prisma.WelderDeleteArgs, "select" | "include">> = z.object({
  where: WelderWhereUniqueInputSchema,
}).strict() ;

export const WelderUpdateArgsSchema: z.ZodType<Omit<Prisma.WelderUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ WelderUpdateInputSchema,WelderUncheckedUpdateInputSchema ]),
  where: WelderWhereUniqueInputSchema,
}).strict() ;

export const WelderUpdateManyArgsSchema: z.ZodType<Prisma.WelderUpdateManyArgs> = z.object({
  data: z.union([ WelderUpdateManyMutationInputSchema,WelderUncheckedUpdateManyInputSchema ]),
  where: WelderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WelderUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.WelderUpdateManyAndReturnArgs> = z.object({
  data: z.union([ WelderUpdateManyMutationInputSchema,WelderUncheckedUpdateManyInputSchema ]),
  where: WelderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WelderDeleteManyArgsSchema: z.ZodType<Prisma.WelderDeleteManyArgs> = z.object({
  where: WelderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FieldWeldCreateArgsSchema: z.ZodType<Omit<Prisma.FieldWeldCreateArgs, "select" | "include">> = z.object({
  data: z.union([ FieldWeldCreateInputSchema,FieldWeldUncheckedCreateInputSchema ]),
}).strict() ;

export const FieldWeldUpsertArgsSchema: z.ZodType<Omit<Prisma.FieldWeldUpsertArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereUniqueInputSchema,
  create: z.union([ FieldWeldCreateInputSchema,FieldWeldUncheckedCreateInputSchema ]),
  update: z.union([ FieldWeldUpdateInputSchema,FieldWeldUncheckedUpdateInputSchema ]),
}).strict() ;

export const FieldWeldCreateManyArgsSchema: z.ZodType<Prisma.FieldWeldCreateManyArgs> = z.object({
  data: z.union([ FieldWeldCreateManyInputSchema,FieldWeldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FieldWeldCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FieldWeldCreateManyAndReturnArgs> = z.object({
  data: z.union([ FieldWeldCreateManyInputSchema,FieldWeldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FieldWeldDeleteArgsSchema: z.ZodType<Omit<Prisma.FieldWeldDeleteArgs, "select" | "include">> = z.object({
  where: FieldWeldWhereUniqueInputSchema,
}).strict() ;

export const FieldWeldUpdateArgsSchema: z.ZodType<Omit<Prisma.FieldWeldUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ FieldWeldUpdateInputSchema,FieldWeldUncheckedUpdateInputSchema ]),
  where: FieldWeldWhereUniqueInputSchema,
}).strict() ;

export const FieldWeldUpdateManyArgsSchema: z.ZodType<Prisma.FieldWeldUpdateManyArgs> = z.object({
  data: z.union([ FieldWeldUpdateManyMutationInputSchema,FieldWeldUncheckedUpdateManyInputSchema ]),
  where: FieldWeldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FieldWeldUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FieldWeldUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FieldWeldUpdateManyMutationInputSchema,FieldWeldUncheckedUpdateManyInputSchema ]),
  where: FieldWeldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FieldWeldDeleteManyArgsSchema: z.ZodType<Prisma.FieldWeldDeleteManyArgs> = z.object({
  where: FieldWeldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EarlyAccessLeadCreateArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadCreateArgs, "select">> = z.object({
  data: z.union([ EarlyAccessLeadCreateInputSchema,EarlyAccessLeadUncheckedCreateInputSchema ]),
}).strict() ;

export const EarlyAccessLeadUpsertArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadUpsertArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereUniqueInputSchema,
  create: z.union([ EarlyAccessLeadCreateInputSchema,EarlyAccessLeadUncheckedCreateInputSchema ]),
  update: z.union([ EarlyAccessLeadUpdateInputSchema,EarlyAccessLeadUncheckedUpdateInputSchema ]),
}).strict() ;

export const EarlyAccessLeadCreateManyArgsSchema: z.ZodType<Prisma.EarlyAccessLeadCreateManyArgs> = z.object({
  data: z.union([ EarlyAccessLeadCreateManyInputSchema,EarlyAccessLeadCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EarlyAccessLeadCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EarlyAccessLeadCreateManyAndReturnArgs> = z.object({
  data: z.union([ EarlyAccessLeadCreateManyInputSchema,EarlyAccessLeadCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EarlyAccessLeadDeleteArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadDeleteArgs, "select">> = z.object({
  where: EarlyAccessLeadWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessLeadUpdateArgsSchema: z.ZodType<Omit<Prisma.EarlyAccessLeadUpdateArgs, "select">> = z.object({
  data: z.union([ EarlyAccessLeadUpdateInputSchema,EarlyAccessLeadUncheckedUpdateInputSchema ]),
  where: EarlyAccessLeadWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessLeadUpdateManyArgsSchema: z.ZodType<Prisma.EarlyAccessLeadUpdateManyArgs> = z.object({
  data: z.union([ EarlyAccessLeadUpdateManyMutationInputSchema,EarlyAccessLeadUncheckedUpdateManyInputSchema ]),
  where: EarlyAccessLeadWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EarlyAccessLeadUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.EarlyAccessLeadUpdateManyAndReturnArgs> = z.object({
  data: z.union([ EarlyAccessLeadUpdateManyMutationInputSchema,EarlyAccessLeadUncheckedUpdateManyInputSchema ]),
  where: EarlyAccessLeadWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EarlyAccessLeadDeleteManyArgsSchema: z.ZodType<Prisma.EarlyAccessLeadDeleteManyArgs> = z.object({
  where: EarlyAccessLeadWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;